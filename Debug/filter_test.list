
filter_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f914  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800fab8  0800fab8  00010ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff50  0800ff50  000112cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff50  0800ff50  00010f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff58  0800ff58  000112cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff58  0800ff58  00010f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ff5c  0800ff5c  00010f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002cc  20000000  0800ff60  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002168  200002d0  0801022c  000112d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002438  0801022c  00011438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000112cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b87  00000000  00000000  000112fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003de7  00000000  00000000  0002ae83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  0002ec70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001113  00000000  00000000  000302a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7b9  00000000  00000000  000313b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae78  00000000  00000000  0004cb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f900  00000000  00000000  000679e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001072e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007210  00000000  00000000  00107328  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  0010e538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d0 	.word	0x200002d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fa9c 	.word	0x0800fa9c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	0800fa9c 	.word	0x0800fa9c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <HAL_TIM_PeriodElapsedCallback>:
void parse_IMU_data(UART_HandleTypeDef* huart, uint8_t* IMUarray, double* roll, double* pitch, double* yaw, double* accelX, double* accelY, double* accelZ, double* gyroX, double* gyroY, double* gyroZ);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	if(htim == &htim9){
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a10      	ldr	r2, [pc, #64]	@ (8001040 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d119      	bne.n	8001038 <HAL_TIM_PeriodElapsedCallback+0x44>

		Read_Pressure_Data();
 8001004:	f000 fb74 	bl	80016f0 <Read_Pressure_Data>

        // DMA 수신이 진행 중인 경우 새로운 요청을 시작하지 않음
       // if (dma_receive_in_progress == 0) {
            unsigned char star = '*';
 8001008:	232a      	movs	r3, #42	@ 0x2a
 800100a:	73fb      	strb	r3, [r7, #15]
            HAL_UART_Transmit(&huart1, &star, 1, 10); // IMU에 데이터 요청
 800100c:	f107 010f 	add.w	r1, r7, #15
 8001010:	230a      	movs	r3, #10
 8001012:	2201      	movs	r2, #1
 8001014:	480b      	ldr	r0, [pc, #44]	@ (8001044 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001016:	f005 f86d 	bl	80060f4 <HAL_UART_Transmit>
            // DMA 수신 시작 및 상태 플래그 설정
            if (HAL_UART_Receive_DMA(&huart1, IMU1array, IMU_DATA_SIZE) == HAL_OK) {
 800101a:	2237      	movs	r2, #55	@ 0x37
 800101c:	490a      	ldr	r1, [pc, #40]	@ (8001048 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800101e:	4809      	ldr	r0, [pc, #36]	@ (8001044 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001020:	f005 f8f3 	bl	800620a <HAL_UART_Receive_DMA>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_TIM_PeriodElapsedCallback+0x3a>
                //dma_receive_in_progress = 1;

            } else {
                Error_Handler();
 800102a:	f000 fde9 	bl	8001c00 <Error_Handler>
            }
            cnt00++;
 800102e:	4b07      	ldr	r3, [pc, #28]	@ (800104c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	4a05      	ldr	r2, [pc, #20]	@ (800104c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001036:	6013      	str	r3, [r2, #0]
       // }
		//SendPacket();
	}
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000338 	.word	0x20000338
 8001044:	20000380 	.word	0x20000380
 8001048:	20000588 	.word	0x20000588
 800104c:	200006f8 	.word	0x200006f8

08001050 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af08      	add	r7, sp, #32
 8001056:	6078      	str	r0, [r7, #4]

	 if (huart->Instance == USART1) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a5e      	ldr	r2, [pc, #376]	@ (80011d8 <HAL_UART_RxCpltCallback+0x188>)
 800105e:	4293      	cmp	r3, r2
 8001060:	f040 80b5 	bne.w	80011ce <HAL_UART_RxCpltCallback+0x17e>
		 	 cnt11++;
 8001064:	4b5d      	ldr	r3, [pc, #372]	@ (80011dc <HAL_UART_RxCpltCallback+0x18c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	4a5c      	ldr	r2, [pc, #368]	@ (80011dc <HAL_UART_RxCpltCallback+0x18c>)
 800106c:	6013      	str	r3, [r2, #0]
		 	dma_receive_in_progress = 0;
 800106e:	4b5c      	ldr	r3, [pc, #368]	@ (80011e0 <HAL_UART_RxCpltCallback+0x190>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
			parse_IMU_data(&huart1, IMU1array, &roll1, &pitch1, &yaw1, &accelX1, &accelY1, &accelZ1, &gyroX1, &gyroY1, &gyroZ1);
 8001074:	4b5b      	ldr	r3, [pc, #364]	@ (80011e4 <HAL_UART_RxCpltCallback+0x194>)
 8001076:	9306      	str	r3, [sp, #24]
 8001078:	4b5b      	ldr	r3, [pc, #364]	@ (80011e8 <HAL_UART_RxCpltCallback+0x198>)
 800107a:	9305      	str	r3, [sp, #20]
 800107c:	4b5b      	ldr	r3, [pc, #364]	@ (80011ec <HAL_UART_RxCpltCallback+0x19c>)
 800107e:	9304      	str	r3, [sp, #16]
 8001080:	4b5b      	ldr	r3, [pc, #364]	@ (80011f0 <HAL_UART_RxCpltCallback+0x1a0>)
 8001082:	9303      	str	r3, [sp, #12]
 8001084:	4b5b      	ldr	r3, [pc, #364]	@ (80011f4 <HAL_UART_RxCpltCallback+0x1a4>)
 8001086:	9302      	str	r3, [sp, #8]
 8001088:	4b5b      	ldr	r3, [pc, #364]	@ (80011f8 <HAL_UART_RxCpltCallback+0x1a8>)
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	4b5b      	ldr	r3, [pc, #364]	@ (80011fc <HAL_UART_RxCpltCallback+0x1ac>)
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	4b5b      	ldr	r3, [pc, #364]	@ (8001200 <HAL_UART_RxCpltCallback+0x1b0>)
 8001092:	4a5c      	ldr	r2, [pc, #368]	@ (8001204 <HAL_UART_RxCpltCallback+0x1b4>)
 8001094:	495c      	ldr	r1, [pc, #368]	@ (8001208 <HAL_UART_RxCpltCallback+0x1b8>)
 8001096:	485d      	ldr	r0, [pc, #372]	@ (800120c <HAL_UART_RxCpltCallback+0x1bc>)
 8001098:	f000 fbb0 	bl	80017fc <parse_IMU_data>

			roll1 = ApplyLowPassFilter(roll1, &roll1_prev);
 800109c:	4b59      	ldr	r3, [pc, #356]	@ (8001204 <HAL_UART_RxCpltCallback+0x1b4>)
 800109e:	ed93 7b00 	vldr	d7, [r3]
 80010a2:	485b      	ldr	r0, [pc, #364]	@ (8001210 <HAL_UART_RxCpltCallback+0x1c0>)
 80010a4:	eeb0 0a47 	vmov.f32	s0, s14
 80010a8:	eef0 0a67 	vmov.f32	s1, s15
 80010ac:	f000 fd6a 	bl	8001b84 <ApplyLowPassFilter>
 80010b0:	eeb0 7a40 	vmov.f32	s14, s0
 80010b4:	eef0 7a60 	vmov.f32	s15, s1
 80010b8:	4b52      	ldr	r3, [pc, #328]	@ (8001204 <HAL_UART_RxCpltCallback+0x1b4>)
 80010ba:	ed83 7b00 	vstr	d7, [r3]
			pitch1 = ApplyLowPassFilter(pitch1, &pitch1_prev);
 80010be:	4b50      	ldr	r3, [pc, #320]	@ (8001200 <HAL_UART_RxCpltCallback+0x1b0>)
 80010c0:	ed93 7b00 	vldr	d7, [r3]
 80010c4:	4853      	ldr	r0, [pc, #332]	@ (8001214 <HAL_UART_RxCpltCallback+0x1c4>)
 80010c6:	eeb0 0a47 	vmov.f32	s0, s14
 80010ca:	eef0 0a67 	vmov.f32	s1, s15
 80010ce:	f000 fd59 	bl	8001b84 <ApplyLowPassFilter>
 80010d2:	eeb0 7a40 	vmov.f32	s14, s0
 80010d6:	eef0 7a60 	vmov.f32	s15, s1
 80010da:	4b49      	ldr	r3, [pc, #292]	@ (8001200 <HAL_UART_RxCpltCallback+0x1b0>)
 80010dc:	ed83 7b00 	vstr	d7, [r3]
			yaw1 = ApplyLowPassFilter(yaw1, &yaw1_prev);
 80010e0:	4b46      	ldr	r3, [pc, #280]	@ (80011fc <HAL_UART_RxCpltCallback+0x1ac>)
 80010e2:	ed93 7b00 	vldr	d7, [r3]
 80010e6:	484c      	ldr	r0, [pc, #304]	@ (8001218 <HAL_UART_RxCpltCallback+0x1c8>)
 80010e8:	eeb0 0a47 	vmov.f32	s0, s14
 80010ec:	eef0 0a67 	vmov.f32	s1, s15
 80010f0:	f000 fd48 	bl	8001b84 <ApplyLowPassFilter>
 80010f4:	eeb0 7a40 	vmov.f32	s14, s0
 80010f8:	eef0 7a60 	vmov.f32	s15, s1
 80010fc:	4b3f      	ldr	r3, [pc, #252]	@ (80011fc <HAL_UART_RxCpltCallback+0x1ac>)
 80010fe:	ed83 7b00 	vstr	d7, [r3]

			accelX1 = ApplyLowPassFilter(accelX1, &prevAccelX1);
 8001102:	4b3d      	ldr	r3, [pc, #244]	@ (80011f8 <HAL_UART_RxCpltCallback+0x1a8>)
 8001104:	ed93 7b00 	vldr	d7, [r3]
 8001108:	4844      	ldr	r0, [pc, #272]	@ (800121c <HAL_UART_RxCpltCallback+0x1cc>)
 800110a:	eeb0 0a47 	vmov.f32	s0, s14
 800110e:	eef0 0a67 	vmov.f32	s1, s15
 8001112:	f000 fd37 	bl	8001b84 <ApplyLowPassFilter>
 8001116:	eeb0 7a40 	vmov.f32	s14, s0
 800111a:	eef0 7a60 	vmov.f32	s15, s1
 800111e:	4b36      	ldr	r3, [pc, #216]	@ (80011f8 <HAL_UART_RxCpltCallback+0x1a8>)
 8001120:	ed83 7b00 	vstr	d7, [r3]
			accelY1 = ApplyLowPassFilter(accelY1, &prevAccelY1);
 8001124:	4b33      	ldr	r3, [pc, #204]	@ (80011f4 <HAL_UART_RxCpltCallback+0x1a4>)
 8001126:	ed93 7b00 	vldr	d7, [r3]
 800112a:	483d      	ldr	r0, [pc, #244]	@ (8001220 <HAL_UART_RxCpltCallback+0x1d0>)
 800112c:	eeb0 0a47 	vmov.f32	s0, s14
 8001130:	eef0 0a67 	vmov.f32	s1, s15
 8001134:	f000 fd26 	bl	8001b84 <ApplyLowPassFilter>
 8001138:	eeb0 7a40 	vmov.f32	s14, s0
 800113c:	eef0 7a60 	vmov.f32	s15, s1
 8001140:	4b2c      	ldr	r3, [pc, #176]	@ (80011f4 <HAL_UART_RxCpltCallback+0x1a4>)
 8001142:	ed83 7b00 	vstr	d7, [r3]
			accelZ1 = ApplyLowPassFilter(accelZ1, &prevAccelZ1);
 8001146:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <HAL_UART_RxCpltCallback+0x1a0>)
 8001148:	ed93 7b00 	vldr	d7, [r3]
 800114c:	4835      	ldr	r0, [pc, #212]	@ (8001224 <HAL_UART_RxCpltCallback+0x1d4>)
 800114e:	eeb0 0a47 	vmov.f32	s0, s14
 8001152:	eef0 0a67 	vmov.f32	s1, s15
 8001156:	f000 fd15 	bl	8001b84 <ApplyLowPassFilter>
 800115a:	eeb0 7a40 	vmov.f32	s14, s0
 800115e:	eef0 7a60 	vmov.f32	s15, s1
 8001162:	4b23      	ldr	r3, [pc, #140]	@ (80011f0 <HAL_UART_RxCpltCallback+0x1a0>)
 8001164:	ed83 7b00 	vstr	d7, [r3]

			gyroX1 = ApplyLowPassFilter(gyroX1, &prevGyroX1);
 8001168:	4b20      	ldr	r3, [pc, #128]	@ (80011ec <HAL_UART_RxCpltCallback+0x19c>)
 800116a:	ed93 7b00 	vldr	d7, [r3]
 800116e:	482e      	ldr	r0, [pc, #184]	@ (8001228 <HAL_UART_RxCpltCallback+0x1d8>)
 8001170:	eeb0 0a47 	vmov.f32	s0, s14
 8001174:	eef0 0a67 	vmov.f32	s1, s15
 8001178:	f000 fd04 	bl	8001b84 <ApplyLowPassFilter>
 800117c:	eeb0 7a40 	vmov.f32	s14, s0
 8001180:	eef0 7a60 	vmov.f32	s15, s1
 8001184:	4b19      	ldr	r3, [pc, #100]	@ (80011ec <HAL_UART_RxCpltCallback+0x19c>)
 8001186:	ed83 7b00 	vstr	d7, [r3]
			gyroY1 = ApplyLowPassFilter(gyroY1, &prevGyroY1);
 800118a:	4b17      	ldr	r3, [pc, #92]	@ (80011e8 <HAL_UART_RxCpltCallback+0x198>)
 800118c:	ed93 7b00 	vldr	d7, [r3]
 8001190:	4826      	ldr	r0, [pc, #152]	@ (800122c <HAL_UART_RxCpltCallback+0x1dc>)
 8001192:	eeb0 0a47 	vmov.f32	s0, s14
 8001196:	eef0 0a67 	vmov.f32	s1, s15
 800119a:	f000 fcf3 	bl	8001b84 <ApplyLowPassFilter>
 800119e:	eeb0 7a40 	vmov.f32	s14, s0
 80011a2:	eef0 7a60 	vmov.f32	s15, s1
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <HAL_UART_RxCpltCallback+0x198>)
 80011a8:	ed83 7b00 	vstr	d7, [r3]
			gyroZ1 = ApplyLowPassFilter(gyroZ1, &prevGyroZ1);
 80011ac:	4b0d      	ldr	r3, [pc, #52]	@ (80011e4 <HAL_UART_RxCpltCallback+0x194>)
 80011ae:	ed93 7b00 	vldr	d7, [r3]
 80011b2:	481f      	ldr	r0, [pc, #124]	@ (8001230 <HAL_UART_RxCpltCallback+0x1e0>)
 80011b4:	eeb0 0a47 	vmov.f32	s0, s14
 80011b8:	eef0 0a67 	vmov.f32	s1, s15
 80011bc:	f000 fce2 	bl	8001b84 <ApplyLowPassFilter>
 80011c0:	eeb0 7a40 	vmov.f32	s14, s0
 80011c4:	eef0 7a60 	vmov.f32	s15, s1
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <HAL_UART_RxCpltCallback+0x194>)
 80011ca:	ed83 7b00 	vstr	d7, [r3]
        // IMU3 데이터 수신 및 파싱
        Get_IMU_Data(&huart6, IMU3array, &roll3, &pitch3, &yaw3, &accelX3, &accelY3, &accelZ3, &gyroX3, &gyroY3, &gyroZ3);
        HAL_UART_Receive_DMA(&huart6, (uint8_t*)IMU3array, IMU_DATA_SIZE); // DMA 수신 재시작
    }*/

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40011000 	.word	0x40011000
 80011dc:	200006fc 	.word	0x200006fc
 80011e0:	200002ec 	.word	0x200002ec
 80011e4:	200006d8 	.word	0x200006d8
 80011e8:	200006d0 	.word	0x200006d0
 80011ec:	200006c8 	.word	0x200006c8
 80011f0:	200006a8 	.word	0x200006a8
 80011f4:	200006a0 	.word	0x200006a0
 80011f8:	20000698 	.word	0x20000698
 80011fc:	20000658 	.word	0x20000658
 8001200:	20000650 	.word	0x20000650
 8001204:	20000648 	.word	0x20000648
 8001208:	20000588 	.word	0x20000588
 800120c:	20000380 	.word	0x20000380
 8001210:	20000680 	.word	0x20000680
 8001214:	20000688 	.word	0x20000688
 8001218:	20000690 	.word	0x20000690
 800121c:	200006b0 	.word	0x200006b0
 8001220:	200006b8 	.word	0x200006b8
 8001224:	200006c0 	.word	0x200006c0
 8001228:	200006e0 	.word	0x200006e0
 800122c:	200006e8 	.word	0x200006e8
 8001230:	200006f0 	.word	0x200006f0

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001238:	f001 f84e 	bl	80022d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123c:	f000 f834 	bl	80012a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001240:	f000 fa2e 	bl	80016a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001244:	f000 f9f6 	bl	8001634 <MX_DMA_Init>
  MX_ADC1_Init();
 8001248:	f000 f8d4 	bl	80013f4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800124c:	f000 f974 	bl	8001538 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001250:	f000 f99c 	bl	800158c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001254:	f000 f9c4 	bl	80015e0 <MX_USART6_UART_Init>
  MX_USB_DEVICE_Init();
 8001258:	f009 fbbe 	bl	800a9d8 <MX_USB_DEVICE_Init>
  MX_TIM9_Init();
 800125c:	f000 f932 	bl	80014c4 <MX_TIM9_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001260:	f000 f88c 	bl	800137c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim9);
 8001264:	4809      	ldr	r0, [pc, #36]	@ (800128c <main+0x58>)
 8001266:	f004 fb79 	bl	800595c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)IMU1array, IMU_DATA_SIZE);
 800126a:	2237      	movs	r2, #55	@ 0x37
 800126c:	4908      	ldr	r1, [pc, #32]	@ (8001290 <main+0x5c>)
 800126e:	4809      	ldr	r0, [pc, #36]	@ (8001294 <main+0x60>)
 8001270:	f004 ffcb 	bl	800620a <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart2, (uint8_t*)IMU2array, IMU_DATA_SIZE);
 8001274:	2237      	movs	r2, #55	@ 0x37
 8001276:	4908      	ldr	r1, [pc, #32]	@ (8001298 <main+0x64>)
 8001278:	4808      	ldr	r0, [pc, #32]	@ (800129c <main+0x68>)
 800127a:	f004 ffc6 	bl	800620a <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart6, (uint8_t*)IMU3array, IMU_DATA_SIZE);
 800127e:	2237      	movs	r2, #55	@ 0x37
 8001280:	4907      	ldr	r1, [pc, #28]	@ (80012a0 <main+0x6c>)
 8001282:	4808      	ldr	r0, [pc, #32]	@ (80012a4 <main+0x70>)
 8001284:	f004 ffc1 	bl	800620a <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <main+0x54>
 800128c:	20000338 	.word	0x20000338
 8001290:	20000588 	.word	0x20000588
 8001294:	20000380 	.word	0x20000380
 8001298:	200005c0 	.word	0x200005c0
 800129c:	200003c8 	.word	0x200003c8
 80012a0:	200005f8 	.word	0x200005f8
 80012a4:	20000410 	.word	0x20000410

080012a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b094      	sub	sp, #80	@ 0x50
 80012ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	2230      	movs	r2, #48	@ 0x30
 80012b4:	2100      	movs	r1, #0
 80012b6:	4618      	mov	r0, r3
 80012b8:	f00b fe21 	bl	800cefe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	4b28      	ldr	r3, [pc, #160]	@ (8001374 <SystemClock_Config+0xcc>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a27      	ldr	r2, [pc, #156]	@ (8001374 <SystemClock_Config+0xcc>)
 80012d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b25      	ldr	r3, [pc, #148]	@ (8001374 <SystemClock_Config+0xcc>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012e8:	2300      	movs	r3, #0
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	4b22      	ldr	r3, [pc, #136]	@ (8001378 <SystemClock_Config+0xd0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012f4:	4a20      	ldr	r2, [pc, #128]	@ (8001378 <SystemClock_Config+0xd0>)
 80012f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001378 <SystemClock_Config+0xd0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001308:	2302      	movs	r3, #2
 800130a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800130c:	2301      	movs	r3, #1
 800130e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001310:	2310      	movs	r3, #16
 8001312:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001314:	2302      	movs	r3, #2
 8001316:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001318:	2300      	movs	r3, #0
 800131a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800131c:	2310      	movs	r3, #16
 800131e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001320:	23c0      	movs	r3, #192	@ 0xc0
 8001322:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001324:	2302      	movs	r3, #2
 8001326:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001328:	2304      	movs	r3, #4
 800132a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132c:	f107 0320 	add.w	r3, r7, #32
 8001330:	4618      	mov	r0, r3
 8001332:	f003 fe6b 	bl	800500c <HAL_RCC_OscConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800133c:	f000 fc60 	bl	8001c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001340:	230f      	movs	r3, #15
 8001342:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001354:	f107 030c 	add.w	r3, r7, #12
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f004 f8ce 	bl	80054fc <HAL_RCC_ClockConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001366:	f000 fc4b 	bl	8001c00 <Error_Handler>
  }
}
 800136a:	bf00      	nop
 800136c:	3750      	adds	r7, #80	@ 0x50
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40007000 	.word	0x40007000

0800137c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* TIM1_BRK_TIM9_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	2018      	movs	r0, #24
 8001386:	f001 fe32 	bl	8002fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800138a:	2018      	movs	r0, #24
 800138c:	f001 fe4b 	bl	8003026 <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001390:	2200      	movs	r2, #0
 8001392:	2100      	movs	r1, #0
 8001394:	2025      	movs	r0, #37	@ 0x25
 8001396:	f001 fe2a 	bl	8002fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800139a:	2025      	movs	r0, #37	@ 0x25
 800139c:	f001 fe43 	bl	8003026 <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	2026      	movs	r0, #38	@ 0x26
 80013a6:	f001 fe22 	bl	8002fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013aa:	2026      	movs	r0, #38	@ 0x26
 80013ac:	f001 fe3b 	bl	8003026 <HAL_NVIC_EnableIRQ>
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	2047      	movs	r0, #71	@ 0x47
 80013b6:	f001 fe1a 	bl	8002fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80013ba:	2047      	movs	r0, #71	@ 0x47
 80013bc:	f001 fe33 	bl	8003026 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	2012      	movs	r0, #18
 80013c6:	f001 fe12 	bl	8002fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80013ca:	2012      	movs	r0, #18
 80013cc:	f001 fe2b 	bl	8003026 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	203a      	movs	r0, #58	@ 0x3a
 80013d6:	f001 fe0a 	bl	8002fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80013da:	203a      	movs	r0, #58	@ 0x3a
 80013dc:	f001 fe23 	bl	8003026 <HAL_NVIC_EnableIRQ>
  /* OTG_FS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2043      	movs	r0, #67	@ 0x43
 80013e6:	f001 fe02 	bl	8002fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80013ea:	2043      	movs	r0, #67	@ 0x43
 80013ec:	f001 fe1b 	bl	8003026 <HAL_NVIC_EnableIRQ>
}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001406:	4b2c      	ldr	r3, [pc, #176]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 8001408:	4a2c      	ldr	r2, [pc, #176]	@ (80014bc <MX_ADC1_Init+0xc8>)
 800140a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800140c:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 800140e:	2200      	movs	r2, #0
 8001410:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001412:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 8001414:	2200      	movs	r2, #0
 8001416:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001418:	4b27      	ldr	r3, [pc, #156]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 800141a:	2200      	movs	r2, #0
 800141c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800141e:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 8001420:	2200      	movs	r2, #0
 8001422:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001424:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 8001426:	2200      	movs	r2, #0
 8001428:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800142c:	4b22      	ldr	r3, [pc, #136]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 800142e:	2200      	movs	r2, #0
 8001430:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001432:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 8001434:	4a22      	ldr	r2, [pc, #136]	@ (80014c0 <MX_ADC1_Init+0xcc>)
 8001436:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001438:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800143e:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 8001440:	2201      	movs	r2, #1
 8001442:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001444:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 8001446:	2200      	movs	r2, #0
 8001448:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800144c:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 800144e:	2201      	movs	r2, #1
 8001450:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001452:	4819      	ldr	r0, [pc, #100]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 8001454:	f000 ffd6 	bl	8002404 <HAL_ADC_Init>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800145e:	f000 fbcf 	bl	8001c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001462:	2300      	movs	r3, #0
 8001464:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 8001466:	2301      	movs	r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800146a:	2306      	movs	r3, #6
 800146c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4619      	mov	r1, r3
 8001472:	4811      	ldr	r0, [pc, #68]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 8001474:	f001 fab8 	bl	80029e8 <HAL_ADC_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800147e:	f000 fbbf 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  for(int i=0;i < NUM_SENSORS; i++){
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e00e      	b.n	80014a6 <MX_ADC1_Init+0xb2>
	  sConfig.Channel = ADC_CHANNEL_0 + i;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	607b      	str	r3, [r7, #4]
	  sConfig.Rank = i + 1;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	60bb      	str	r3, [r7, #8]
	  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001492:	2301      	movs	r3, #1
 8001494:	60fb      	str	r3, [r7, #12]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	4619      	mov	r1, r3
 800149a:	4807      	ldr	r0, [pc, #28]	@ (80014b8 <MX_ADC1_Init+0xc4>)
 800149c:	f001 faa4 	bl	80029e8 <HAL_ADC_ConfigChannel>
  for(int i=0;i < NUM_SENSORS; i++){
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	3301      	adds	r3, #1
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2b03      	cmp	r3, #3
 80014aa:	dded      	ble.n	8001488 <MX_ADC1_Init+0x94>
  }
  /* USER CODE END ADC1_Init 2 */

}
 80014ac:	bf00      	nop
 80014ae:	bf00      	nop
 80014b0:	3718      	adds	r7, #24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200002f0 	.word	0x200002f0
 80014bc:	40012000 	.word	0x40012000
 80014c0:	0f000001 	.word	0x0f000001

080014c4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	463b      	mov	r3, r7
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80014d6:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <MX_TIM9_Init+0x6c>)
 80014d8:	4a16      	ldr	r2, [pc, #88]	@ (8001534 <MX_TIM9_Init+0x70>)
 80014da:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 8399;
 80014dc:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <MX_TIM9_Init+0x6c>)
 80014de:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80014e2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <MX_TIM9_Init+0x6c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 5000-1;
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_TIM9_Init+0x6c>)
 80014ec:	f241 3287 	movw	r2, #4999	@ 0x1387
 80014f0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <MX_TIM9_Init+0x6c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <MX_TIM9_Init+0x6c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80014fe:	480c      	ldr	r0, [pc, #48]	@ (8001530 <MX_TIM9_Init+0x6c>)
 8001500:	f004 f9dc 	bl	80058bc <HAL_TIM_Base_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800150a:	f000 fb79 	bl	8001c00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001512:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_TIM9_Init+0x6c>)
 800151a:	f004 fb71 	bl	8005c00 <HAL_TIM_ConfigClockSource>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8001524:	f000 fb6c 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000338 	.word	0x20000338
 8001534:	40014000 	.word	0x40014000

08001538 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800153c:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 800153e:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <MX_USART1_UART_Init+0x50>)
 8001540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001542:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <MX_USART1_UART_Init+0x4c>)
 8001570:	f004 fd70 	bl	8006054 <HAL_UART_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800157a:	f000 fb41 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000380 	.word	0x20000380
 8001588:	40011000 	.word	0x40011000

0800158c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001590:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <MX_USART2_UART_Init+0x50>)
 8001594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001596:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_USART2_UART_Init+0x4c>)
 80015c4:	f004 fd46 	bl	8006054 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015ce:	f000 fb17 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200003c8 	.word	0x200003c8
 80015dc:	40004400 	.word	0x40004400

080015e0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80015e4:	4b11      	ldr	r3, [pc, #68]	@ (800162c <MX_USART6_UART_Init+0x4c>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	@ (8001630 <MX_USART6_UART_Init+0x50>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <MX_USART6_UART_Init+0x4c>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <MX_USART6_UART_Init+0x4c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_USART6_UART_Init+0x4c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <MX_USART6_UART_Init+0x4c>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001604:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_USART6_UART_Init+0x4c>)
 8001606:	220c      	movs	r2, #12
 8001608:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b08      	ldr	r3, [pc, #32]	@ (800162c <MX_USART6_UART_Init+0x4c>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_USART6_UART_Init+0x4c>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001616:	4805      	ldr	r0, [pc, #20]	@ (800162c <MX_USART6_UART_Init+0x4c>)
 8001618:	f004 fd1c 	bl	8006054 <HAL_UART_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001622:	f000 faed 	bl	8001c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000410 	.word	0x20000410
 8001630:	40011400 	.word	0x40011400

08001634 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b17      	ldr	r3, [pc, #92]	@ (800169c <MX_DMA_Init+0x68>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4a16      	ldr	r2, [pc, #88]	@ (800169c <MX_DMA_Init+0x68>)
 8001644:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4b14      	ldr	r3, [pc, #80]	@ (800169c <MX_DMA_Init+0x68>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <MX_DMA_Init+0x68>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4a0f      	ldr	r2, [pc, #60]	@ (800169c <MX_DMA_Init+0x68>)
 8001660:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <MX_DMA_Init+0x68>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2010      	movs	r0, #16
 8001678:	f001 fcb9 	bl	8002fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800167c:	2010      	movs	r0, #16
 800167e:	f001 fcd2 	bl	8003026 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	2039      	movs	r0, #57	@ 0x39
 8001688:	f001 fcb1 	bl	8002fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800168c:	2039      	movs	r0, #57	@ 0x39
 800168e:	f001 fcca 	bl	8003026 <HAL_NVIC_EnableIRQ>

}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	2300      	movs	r3, #0
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <MX_GPIO_Init+0x4c>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ae:	4a0f      	ldr	r2, [pc, #60]	@ (80016ec <MX_GPIO_Init+0x4c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b6:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <MX_GPIO_Init+0x4c>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	4b09      	ldr	r3, [pc, #36]	@ (80016ec <MX_GPIO_Init+0x4c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	4a08      	ldr	r2, [pc, #32]	@ (80016ec <MX_GPIO_Init+0x4c>)
 80016cc:	f043 0304 	orr.w	r3, r3, #4
 80016d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d2:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <MX_GPIO_Init+0x4c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <Read_Pressure_Data>:

/* USER CODE BEGIN 4 */
void Read_Pressure_Data(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80016f6:	463b      	mov	r3, r7
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]

    for (int i = 0; i < NUM_SENSORS; i++) {
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	e06a      	b.n	80017de <Read_Pressure_Data+0xee>
        // ADC 채널을 각 센서 핀에 맞게 설정 (IN0, IN1, IN4, IN5)
        switch(i) {
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	2b03      	cmp	r3, #3
 800170c:	d816      	bhi.n	800173c <Read_Pressure_Data+0x4c>
 800170e:	a201      	add	r2, pc, #4	@ (adr r2, 8001714 <Read_Pressure_Data+0x24>)
 8001710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001714:	08001725 	.word	0x08001725
 8001718:	0800172b 	.word	0x0800172b
 800171c:	08001731 	.word	0x08001731
 8001720:	08001737 	.word	0x08001737
            case 0: sConfig.Channel = ADC_CHANNEL_0; break; // IN0
 8001724:	2300      	movs	r3, #0
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	e008      	b.n	800173c <Read_Pressure_Data+0x4c>
            case 1: sConfig.Channel = ADC_CHANNEL_1; break; // IN1
 800172a:	2301      	movs	r3, #1
 800172c:	603b      	str	r3, [r7, #0]
 800172e:	e005      	b.n	800173c <Read_Pressure_Data+0x4c>
            case 2: sConfig.Channel = ADC_CHANNEL_4; break; // IN4
 8001730:	2304      	movs	r3, #4
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	e002      	b.n	800173c <Read_Pressure_Data+0x4c>
            case 3: sConfig.Channel = ADC_CHANNEL_5; break; // IN5
 8001736:	2305      	movs	r3, #5
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	bf00      	nop
        }

        sConfig.Rank = 1;
 800173c:	2301      	movs	r3, #1
 800173e:	607b      	str	r3, [r7, #4]
        sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001740:	2301      	movs	r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
        if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001744:	463b      	mov	r3, r7
 8001746:	4619      	mov	r1, r3
 8001748:	4829      	ldr	r0, [pc, #164]	@ (80017f0 <Read_Pressure_Data+0x100>)
 800174a:	f001 f94d 	bl	80029e8 <HAL_ADC_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <Read_Pressure_Data+0x68>
            Error_Handler();
 8001754:	f000 fa54 	bl	8001c00 <Error_Handler>
        }

        if (HAL_ADC_Start(&hadc1) == HAL_OK) {
 8001758:	4825      	ldr	r0, [pc, #148]	@ (80017f0 <Read_Pressure_Data+0x100>)
 800175a:	f000 fe97 	bl	800248c <HAL_ADC_Start>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d137      	bne.n	80017d4 <Read_Pressure_Data+0xe4>
            if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 8001764:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001768:	4821      	ldr	r0, [pc, #132]	@ (80017f0 <Read_Pressure_Data+0x100>)
 800176a:	f000 ff76 	bl	800265a <HAL_ADC_PollForConversion>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d11f      	bne.n	80017b4 <Read_Pressure_Data+0xc4>
            	double rawValue = HAL_ADC_GetValue(&hadc1);
 8001774:	481e      	ldr	r0, [pc, #120]	@ (80017f0 <Read_Pressure_Data+0x100>)
 8001776:	f001 f90b 	bl	8002990 <HAL_ADC_GetValue>
 800177a:	4603      	mov	r3, r0
 800177c:	4618      	mov	r0, r3
 800177e:	f7fe fec9 	bl	8000514 <__aeabi_ui2d>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	e9c7 2304 	strd	r2, r3, [r7, #16]
            	sensorValues[i] = ApplyLowPassFilter(rawValue, &prevSensorValues[i]);
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4a19      	ldr	r2, [pc, #100]	@ (80017f4 <Read_Pressure_Data+0x104>)
 8001790:	4413      	add	r3, r2
 8001792:	4618      	mov	r0, r3
 8001794:	ed97 0b04 	vldr	d0, [r7, #16]
 8001798:	f000 f9f4 	bl	8001b84 <ApplyLowPassFilter>
 800179c:	ec53 2b10 	vmov	r2, r3, d0
 80017a0:	4610      	mov	r0, r2
 80017a2:	4619      	mov	r1, r3
 80017a4:	f7ff fa08 	bl	8000bb8 <__aeabi_d2uiz>
 80017a8:	4602      	mov	r2, r0
 80017aa:	4913      	ldr	r1, [pc, #76]	@ (80017f8 <Read_Pressure_Data+0x108>)
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80017b2:	e00b      	b.n	80017cc <Read_Pressure_Data+0xdc>
            } else if (i == 0){
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d106      	bne.n	80017c8 <Read_Pressure_Data+0xd8>
            	sensorValues[0] -= 2000;
 80017ba:	4b0f      	ldr	r3, [pc, #60]	@ (80017f8 <Read_Pressure_Data+0x108>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80017c2:	4a0d      	ldr	r2, [pc, #52]	@ (80017f8 <Read_Pressure_Data+0x108>)
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	e001      	b.n	80017cc <Read_Pressure_Data+0xdc>
            } else {
                Error_Handler();
 80017c8:	f000 fa1a 	bl	8001c00 <Error_Handler>
            }
            HAL_ADC_Stop(&hadc1);
 80017cc:	4808      	ldr	r0, [pc, #32]	@ (80017f0 <Read_Pressure_Data+0x100>)
 80017ce:	f000 ff11 	bl	80025f4 <HAL_ADC_Stop>
 80017d2:	e001      	b.n	80017d8 <Read_Pressure_Data+0xe8>
        } else {
            Error_Handler();
 80017d4:	f000 fa14 	bl	8001c00 <Error_Handler>
    for (int i = 0; i < NUM_SENSORS; i++) {
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	3301      	adds	r3, #1
 80017dc:	61fb      	str	r3, [r7, #28]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	dd91      	ble.n	8001708 <Read_Pressure_Data+0x18>
        }
    }
}
 80017e4:	bf00      	nop
 80017e6:	bf00      	nop
 80017e8:	3720      	adds	r7, #32
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200002f0 	.word	0x200002f0
 80017f4:	20000660 	.word	0x20000660
 80017f8:	20000578 	.word	0x20000578

080017fc <parse_IMU_data>:

void parse_IMU_data(UART_HandleTypeDef* huart, uint8_t* IMUarray, double* roll, double* pitch, double* yaw, double* accelX, double* accelY, double* accelZ, double* gyroX, double* gyroY, double* gyroZ){
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b095      	sub	sp, #84	@ 0x54
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
    int cnt0 = 0, cnt1 = 0, cnt2 = 0, cnt3 = 0, cnt4 = 0, cnt5 = 0, cnt6 = 0;
 800180a:	2300      	movs	r3, #0
 800180c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800180e:	2300      	movs	r3, #0
 8001810:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001812:	2300      	movs	r3, #0
 8001814:	647b      	str	r3, [r7, #68]	@ 0x44
 8001816:	2300      	movs	r3, #0
 8001818:	643b      	str	r3, [r7, #64]	@ 0x40
 800181a:	2300      	movs	r3, #0
 800181c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800181e:	2300      	movs	r3, #0
 8001820:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001822:	2300      	movs	r3, #0
 8001824:	637b      	str	r3, [r7, #52]	@ 0x34
    char* pos;

	 for (int i = 1; i < IMU_DATA_SIZE; i++) {
 8001826:	2301      	movs	r3, #1
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
 800182a:	e0b1      	b.n	8001990 <parse_IMU_data+0x194>
			if (IMUarray[i] == ',') {
 800182c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	4413      	add	r3, r2
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b2c      	cmp	r3, #44	@ 0x2c
 8001836:	d125      	bne.n	8001884 <parse_IMU_data+0x88>
				if (cnt0 == 0) cnt1 = i + 1;
 8001838:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800183a:	2b00      	cmp	r3, #0
 800183c:	d103      	bne.n	8001846 <parse_IMU_data+0x4a>
 800183e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001840:	3301      	adds	r3, #1
 8001842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001844:	e01a      	b.n	800187c <parse_IMU_data+0x80>
				else if (cnt0 == 1) cnt2 = i + 1;
 8001846:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001848:	2b01      	cmp	r3, #1
 800184a:	d103      	bne.n	8001854 <parse_IMU_data+0x58>
 800184c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800184e:	3301      	adds	r3, #1
 8001850:	647b      	str	r3, [r7, #68]	@ 0x44
 8001852:	e013      	b.n	800187c <parse_IMU_data+0x80>
				else if (cnt0 == 2) cnt3 = i + 1;
 8001854:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001856:	2b02      	cmp	r3, #2
 8001858:	d103      	bne.n	8001862 <parse_IMU_data+0x66>
 800185a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800185c:	3301      	adds	r3, #1
 800185e:	643b      	str	r3, [r7, #64]	@ 0x40
 8001860:	e00c      	b.n	800187c <parse_IMU_data+0x80>
				else if (cnt0 == 3) cnt4 = i + 1;
 8001862:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001864:	2b03      	cmp	r3, #3
 8001866:	d103      	bne.n	8001870 <parse_IMU_data+0x74>
 8001868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800186a:	3301      	adds	r3, #1
 800186c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800186e:	e005      	b.n	800187c <parse_IMU_data+0x80>
				else if (cnt0 == 4) cnt5 = i + 1;
 8001870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001872:	2b04      	cmp	r3, #4
 8001874:	d102      	bne.n	800187c <parse_IMU_data+0x80>
 8001876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001878:	3301      	adds	r3, #1
 800187a:	63bb      	str	r3, [r7, #56]	@ 0x38
				cnt0++;
 800187c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800187e:	3301      	adds	r3, #1
 8001880:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001882:	e078      	b.n	8001976 <parse_IMU_data+0x17a>
			} else {
				switch (cnt0) {
 8001884:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001886:	2b06      	cmp	r3, #6
 8001888:	d875      	bhi.n	8001976 <parse_IMU_data+0x17a>
 800188a:	a201      	add	r2, pc, #4	@ (adr r2, 8001890 <parse_IMU_data+0x94>)
 800188c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001890:	080018ad 	.word	0x080018ad
 8001894:	080018bf 	.word	0x080018bf
 8001898:	080018d3 	.word	0x080018d3
 800189c:	080018e7 	.word	0x080018e7
 80018a0:	0800190b 	.word	0x0800190b
 80018a4:	0800192f 	.word	0x0800192f
 80018a8:	08001953 	.word	0x08001953
					case 0: alpha[i - 1] = IMUarray[i]; break;  // Roll
 80018ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	441a      	add	r2, r3
 80018b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018b4:	3b01      	subs	r3, #1
 80018b6:	7811      	ldrb	r1, [r2, #0]
 80018b8:	4aae      	ldr	r2, [pc, #696]	@ (8001b74 <parse_IMU_data+0x378>)
 80018ba:	54d1      	strb	r1, [r2, r3]
 80018bc:	e05b      	b.n	8001976 <parse_IMU_data+0x17a>
					case 1: beta[i - cnt1] = IMUarray[i]; break;  // Pitch
 80018be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	441a      	add	r2, r3
 80018c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018c8:	1acb      	subs	r3, r1, r3
 80018ca:	7811      	ldrb	r1, [r2, #0]
 80018cc:	4aaa      	ldr	r2, [pc, #680]	@ (8001b78 <parse_IMU_data+0x37c>)
 80018ce:	54d1      	strb	r1, [r2, r3]
 80018d0:	e051      	b.n	8001976 <parse_IMU_data+0x17a>
					case 2: gamm[i - cnt2] = IMUarray[i]; break;  // Yaw
 80018d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	441a      	add	r2, r3
 80018d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80018da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018dc:	1acb      	subs	r3, r1, r3
 80018de:	7811      	ldrb	r1, [r2, #0]
 80018e0:	4aa6      	ldr	r2, [pc, #664]	@ (8001b7c <parse_IMU_data+0x380>)
 80018e2:	54d1      	strb	r1, [r2, r3]
 80018e4:	e047      	b.n	8001976 <parse_IMU_data+0x17a>
					case 3: accelX[i - cnt3] = IMUarray[i]; break;  // Accel X
 80018e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018e8:	68ba      	ldr	r2, [r7, #8]
 80018ea:	4413      	add	r3, r2
 80018ec:	7819      	ldrb	r1, [r3, #0]
 80018ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80018f8:	18d4      	adds	r4, r2, r3
 80018fa:	4608      	mov	r0, r1
 80018fc:	f7fe fe0a 	bl	8000514 <__aeabi_ui2d>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	e9c4 2300 	strd	r2, r3, [r4]
 8001908:	e035      	b.n	8001976 <parse_IMU_data+0x17a>
					case 4: accelY[i - cnt4] = IMUarray[i]; break;  // Accel Y
 800190a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	4413      	add	r3, r2
 8001910:	7819      	ldrb	r1, [r3, #0]
 8001912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800191c:	18d4      	adds	r4, r2, r3
 800191e:	4608      	mov	r0, r1
 8001920:	f7fe fdf8 	bl	8000514 <__aeabi_ui2d>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	e9c4 2300 	strd	r2, r3, [r4]
 800192c:	e023      	b.n	8001976 <parse_IMU_data+0x17a>
					case 5: accelZ[i - cnt5] = IMUarray[i]; break;  // Accel Z
 800192e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	4413      	add	r3, r2
 8001934:	7819      	ldrb	r1, [r3, #0]
 8001936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001940:	18d4      	adds	r4, r2, r3
 8001942:	4608      	mov	r0, r1
 8001944:	f7fe fde6 	bl	8000514 <__aeabi_ui2d>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	e9c4 2300 	strd	r2, r3, [r4]
 8001950:	e011      	b.n	8001976 <parse_IMU_data+0x17a>
					case 6: gyroX[i - cnt6] = IMUarray[i]; break;  // Gyro X
 8001952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	4413      	add	r3, r2
 8001958:	7819      	ldrb	r1, [r3, #0]
 800195a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800195c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001964:	18d4      	adds	r4, r2, r3
 8001966:	4608      	mov	r0, r1
 8001968:	f7fe fdd4 	bl	8000514 <__aeabi_ui2d>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	e9c4 2300 	strd	r2, r3, [r4]
 8001974:	bf00      	nop
				}
			}
			if (IMUarray[i] == '\r') {
 8001976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	4413      	add	r3, r2
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b0d      	cmp	r3, #13
 8001980:	d103      	bne.n	800198a <parse_IMU_data+0x18e>
				cnt6 = i + 1;
 8001982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001984:	3301      	adds	r3, #1
 8001986:	637b      	str	r3, [r7, #52]	@ 0x34
				break;
 8001988:	e006      	b.n	8001998 <parse_IMU_data+0x19c>
	 for (int i = 1; i < IMU_DATA_SIZE; i++) {
 800198a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800198c:	3301      	adds	r3, #1
 800198e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001992:	2b36      	cmp	r3, #54	@ 0x36
 8001994:	f77f af4a 	ble.w	800182c <parse_IMU_data+0x30>
			}
		}
	    // 문자열이 짧은 경우 0으로 채움
	       for (int j = cnt1 - 2; j < 7; j++) alpha[j] = '0';
 8001998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800199a:	3b02      	subs	r3, #2
 800199c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800199e:	e007      	b.n	80019b0 <parse_IMU_data+0x1b4>
 80019a0:	4a74      	ldr	r2, [pc, #464]	@ (8001b74 <parse_IMU_data+0x378>)
 80019a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019a4:	4413      	add	r3, r2
 80019a6:	2230      	movs	r2, #48	@ 0x30
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ac:	3301      	adds	r3, #1
 80019ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b2:	2b06      	cmp	r3, #6
 80019b4:	ddf4      	ble.n	80019a0 <parse_IMU_data+0x1a4>
	       for (int k = cnt2 - (cnt1); k < 8; k++) beta[k - 1] = '0';
 80019b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80019b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019be:	e007      	b.n	80019d0 <parse_IMU_data+0x1d4>
 80019c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c2:	3b01      	subs	r3, #1
 80019c4:	4a6c      	ldr	r2, [pc, #432]	@ (8001b78 <parse_IMU_data+0x37c>)
 80019c6:	2130      	movs	r1, #48	@ 0x30
 80019c8:	54d1      	strb	r1, [r2, r3]
 80019ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019cc:	3301      	adds	r3, #1
 80019ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d2:	2b07      	cmp	r3, #7
 80019d4:	ddf4      	ble.n	80019c0 <parse_IMU_data+0x1c4>
	       for (int l = cnt3 - (cnt2); l < 8; l++) gamm[l - 1] = '0';
 80019d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80019d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019de:	e007      	b.n	80019f0 <parse_IMU_data+0x1f4>
 80019e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e2:	3b01      	subs	r3, #1
 80019e4:	4a65      	ldr	r2, [pc, #404]	@ (8001b7c <parse_IMU_data+0x380>)
 80019e6:	2130      	movs	r1, #48	@ 0x30
 80019e8:	54d1      	strb	r1, [r2, r3]
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	3301      	adds	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	2b07      	cmp	r3, #7
 80019f4:	ddf4      	ble.n	80019e0 <parse_IMU_data+0x1e4>
	       for (int m = cnt4 - (cnt3); m < 8; m++) accelX[m - 1] = '0';
 80019f6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80019f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	623b      	str	r3, [r7, #32]
 80019fe:	e00e      	b.n	8001a1e <parse_IMU_data+0x222>
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001a06:	3b01      	subs	r3, #1
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001a0c:	18d1      	adds	r1, r2, r3
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	4b5b      	ldr	r3, [pc, #364]	@ (8001b80 <parse_IMU_data+0x384>)
 8001a14:	e9c1 2300 	strd	r2, r3, [r1]
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	623b      	str	r3, [r7, #32]
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	2b07      	cmp	r3, #7
 8001a22:	dded      	ble.n	8001a00 <parse_IMU_data+0x204>
	       for (int n = cnt5 - (cnt4); n < 8; n++) accelY[n - 1] = '0';
 8001a24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	e00e      	b.n	8001a4c <parse_IMU_data+0x250>
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001a34:	3b01      	subs	r3, #1
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001a3a:	18d1      	adds	r1, r2, r3
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	4b4f      	ldr	r3, [pc, #316]	@ (8001b80 <parse_IMU_data+0x384>)
 8001a42:	e9c1 2300 	strd	r2, r3, [r1]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b07      	cmp	r3, #7
 8001a50:	dded      	ble.n	8001a2e <parse_IMU_data+0x232>
	       for (int o = cnt6 - (cnt5); o < 8; o++) accelZ[o - 1] = '0';
 8001a52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	61bb      	str	r3, [r7, #24]
 8001a5a:	e00e      	b.n	8001a7a <parse_IMU_data+0x27e>
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8001a62:	3b01      	subs	r3, #1
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001a68:	18d1      	adds	r1, r2, r3
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	4b44      	ldr	r3, [pc, #272]	@ (8001b80 <parse_IMU_data+0x384>)
 8001a70:	e9c1 2300 	strd	r2, r3, [r1]
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	3301      	adds	r3, #1
 8001a78:	61bb      	str	r3, [r7, #24]
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b07      	cmp	r3, #7
 8001a7e:	dded      	ble.n	8001a5c <parse_IMU_data+0x260>

	       // 문자열을 double로 변환
	       *roll = strtod(alpha, &pos);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	483b      	ldr	r0, [pc, #236]	@ (8001b74 <parse_IMU_data+0x378>)
 8001a88:	f00a fa9c 	bl	800bfc4 <strtod>
 8001a8c:	eeb0 7a40 	vmov.f32	s14, s0
 8001a90:	eef0 7a60 	vmov.f32	s15, s1
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	ed83 7b00 	vstr	d7, [r3]
	       *pitch = strtod(beta, &pos);
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4835      	ldr	r0, [pc, #212]	@ (8001b78 <parse_IMU_data+0x37c>)
 8001aa2:	f00a fa8f 	bl	800bfc4 <strtod>
 8001aa6:	eeb0 7a40 	vmov.f32	s14, s0
 8001aaa:	eef0 7a60 	vmov.f32	s15, s1
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	ed83 7b00 	vstr	d7, [r3]
	       *yaw = strtod(gamm, &pos);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4830      	ldr	r0, [pc, #192]	@ (8001b7c <parse_IMU_data+0x380>)
 8001abc:	f00a fa82 	bl	800bfc4 <strtod>
 8001ac0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ac4:	eef0 7a60 	vmov.f32	s15, s1
 8001ac8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001aca:	ed83 7b00 	vstr	d7, [r3]
	       *accelX = strtod(accelX, &pos);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8001ad6:	f00a fa75 	bl	800bfc4 <strtod>
 8001ada:	eeb0 7a40 	vmov.f32	s14, s0
 8001ade:	eef0 7a60 	vmov.f32	s15, s1
 8001ae2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ae4:	ed83 7b00 	vstr	d7, [r3]
	       *accelY = strtod(accelY, &pos);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001af0:	f00a fa68 	bl	800bfc4 <strtod>
 8001af4:	eeb0 7a40 	vmov.f32	s14, s0
 8001af8:	eef0 7a60 	vmov.f32	s15, s1
 8001afc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001afe:	ed83 7b00 	vstr	d7, [r3]
	       *accelZ = strtod(accelZ, &pos);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001b0a:	f00a fa5b 	bl	800bfc4 <strtod>
 8001b0e:	eeb0 7a40 	vmov.f32	s14, s0
 8001b12:	eef0 7a60 	vmov.f32	s15, s1
 8001b16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b18:	ed83 7b00 	vstr	d7, [r3]
	       *gyroX = strtod(gyroX, &pos);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001b24:	f00a fa4e 	bl	800bfc4 <strtod>
 8001b28:	eeb0 7a40 	vmov.f32	s14, s0
 8001b2c:	eef0 7a60 	vmov.f32	s15, s1
 8001b30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b32:	ed83 7b00 	vstr	d7, [r3]
	       *gyroY = strtod(gyroY, &pos);
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001b3e:	f00a fa41 	bl	800bfc4 <strtod>
 8001b42:	eeb0 7a40 	vmov.f32	s14, s0
 8001b46:	eef0 7a60 	vmov.f32	s15, s1
 8001b4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001b4c:	ed83 7b00 	vstr	d7, [r3]
	       *gyroZ = strtod(gyroZ, &pos);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8001b58:	f00a fa34 	bl	800bfc4 <strtod>
 8001b5c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b60:	eef0 7a60 	vmov.f32	s15, s1
 8001b64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b66:	ed83 7b00 	vstr	d7, [r3]
}
 8001b6a:	bf00      	nop
 8001b6c:	3754      	adds	r7, #84	@ 0x54
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd90      	pop	{r4, r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000630 	.word	0x20000630
 8001b78:	20000638 	.word	0x20000638
 8001b7c:	20000640 	.word	0x20000640
 8001b80:	40480000 	.word	0x40480000

08001b84 <ApplyLowPassFilter>:


double ApplyLowPassFilter(double currentValue, double *prevValue){
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	ed87 0b02 	vstr	d0, [r7, #8]
 8001b8e:	6078      	str	r0, [r7, #4]
	*prevValue = alpha_value * currentValue + (1.0 - alpha_value) * (*prevValue);
 8001b90:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <ApplyLowPassFilter+0x74>)
 8001b92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b9a:	f7fe fd35 	bl	8000608 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4614      	mov	r4, r2
 8001ba4:	461d      	mov	r5, r3
 8001ba6:	4b14      	ldr	r3, [pc, #80]	@ (8001bf8 <ApplyLowPassFilter+0x74>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f04f 0000 	mov.w	r0, #0
 8001bb0:	4912      	ldr	r1, [pc, #72]	@ (8001bfc <ApplyLowPassFilter+0x78>)
 8001bb2:	f7fe fb71 	bl	8000298 <__aeabi_dsub>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4610      	mov	r0, r2
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fd20 	bl	8000608 <__aeabi_dmul>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4629      	mov	r1, r5
 8001bd0:	f7fe fb64 	bl	800029c <__adddf3>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	e9c1 2300 	strd	r2, r3, [r1]
	return *prevValue;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001be8:	eeb0 0a47 	vmov.f32	s0, s14
 8001bec:	eef0 0a67 	vmov.f32	s1, s15
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	3ff00000 	.word	0x3ff00000

08001c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c04:	b672      	cpsid	i
}
 8001c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <Error_Handler+0x8>

08001c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <HAL_MspInit+0x4c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c58 <HAL_MspInit+0x4c>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c22:	4b0d      	ldr	r3, [pc, #52]	@ (8001c58 <HAL_MspInit+0x4c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c2a:	607b      	str	r3, [r7, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <HAL_MspInit+0x4c>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	4a08      	ldr	r2, [pc, #32]	@ (8001c58 <HAL_MspInit+0x4c>)
 8001c38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_MspInit+0x4c>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800

08001c5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	@ 0x28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a17      	ldr	r2, [pc, #92]	@ (8001cd8 <HAL_ADC_MspInit+0x7c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d127      	bne.n	8001cce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
 8001c82:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <HAL_ADC_MspInit+0x80>)
 8001c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c86:	4a15      	ldr	r2, [pc, #84]	@ (8001cdc <HAL_ADC_MspInit+0x80>)
 8001c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <HAL_ADC_MspInit+0x80>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cdc <HAL_ADC_MspInit+0x80>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8001cdc <HAL_ADC_MspInit+0x80>)
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b0c      	ldr	r3, [pc, #48]	@ (8001cdc <HAL_ADC_MspInit+0x80>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001cb6:	2333      	movs	r3, #51	@ 0x33
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc2:	f107 0314 	add.w	r3, r7, #20
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <HAL_ADC_MspInit+0x84>)
 8001cca:	f001 fdc9 	bl	8003860 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	@ 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40012000 	.word	0x40012000
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8001d20 <HAL_TIM_Base_MspInit+0x3c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d10d      	bne.n	8001d12 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <HAL_TIM_Base_MspInit+0x40>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfe:	4a09      	ldr	r2, [pc, #36]	@ (8001d24 <HAL_TIM_Base_MspInit+0x40>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d06:	4b07      	ldr	r3, [pc, #28]	@ (8001d24 <HAL_TIM_Base_MspInit+0x40>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40014000 	.word	0x40014000
 8001d24:	40023800 	.word	0x40023800

08001d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08e      	sub	sp, #56	@ 0x38
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a92      	ldr	r2, [pc, #584]	@ (8001f90 <HAL_UART_MspInit+0x268>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d15c      	bne.n	8001e04 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
 8001d4e:	4b91      	ldr	r3, [pc, #580]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	4a90      	ldr	r2, [pc, #576]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001d54:	f043 0310 	orr.w	r3, r3, #16
 8001d58:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d5a:	4b8e      	ldr	r3, [pc, #568]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	f003 0310 	and.w	r3, r3, #16
 8001d62:	623b      	str	r3, [r7, #32]
 8001d64:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	4b8a      	ldr	r3, [pc, #552]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a89      	ldr	r2, [pc, #548]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001d70:	f043 0301 	orr.w	r3, r3, #1
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b87      	ldr	r3, [pc, #540]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d82:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d90:	2303      	movs	r3, #3
 8001d92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d94:	2307      	movs	r3, #7
 8001d96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	487e      	ldr	r0, [pc, #504]	@ (8001f98 <HAL_UART_MspInit+0x270>)
 8001da0:	f001 fd5e 	bl	8003860 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001da4:	4b7d      	ldr	r3, [pc, #500]	@ (8001f9c <HAL_UART_MspInit+0x274>)
 8001da6:	4a7e      	ldr	r2, [pc, #504]	@ (8001fa0 <HAL_UART_MspInit+0x278>)
 8001da8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001daa:	4b7c      	ldr	r3, [pc, #496]	@ (8001f9c <HAL_UART_MspInit+0x274>)
 8001dac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001db0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001db2:	4b7a      	ldr	r3, [pc, #488]	@ (8001f9c <HAL_UART_MspInit+0x274>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001db8:	4b78      	ldr	r3, [pc, #480]	@ (8001f9c <HAL_UART_MspInit+0x274>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dbe:	4b77      	ldr	r3, [pc, #476]	@ (8001f9c <HAL_UART_MspInit+0x274>)
 8001dc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dc4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001dc6:	4b75      	ldr	r3, [pc, #468]	@ (8001f9c <HAL_UART_MspInit+0x274>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dcc:	4b73      	ldr	r3, [pc, #460]	@ (8001f9c <HAL_UART_MspInit+0x274>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001dd2:	4b72      	ldr	r3, [pc, #456]	@ (8001f9c <HAL_UART_MspInit+0x274>)
 8001dd4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001dd8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dda:	4b70      	ldr	r3, [pc, #448]	@ (8001f9c <HAL_UART_MspInit+0x274>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001de0:	4b6e      	ldr	r3, [pc, #440]	@ (8001f9c <HAL_UART_MspInit+0x274>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001de6:	486d      	ldr	r0, [pc, #436]	@ (8001f9c <HAL_UART_MspInit+0x274>)
 8001de8:	f001 f938 	bl	800305c <HAL_DMA_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001df2:	f7ff ff05 	bl	8001c00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a68      	ldr	r2, [pc, #416]	@ (8001f9c <HAL_UART_MspInit+0x274>)
 8001dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001dfc:	4a67      	ldr	r2, [pc, #412]	@ (8001f9c <HAL_UART_MspInit+0x274>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001e02:	e0c0      	b.n	8001f86 <HAL_UART_MspInit+0x25e>
  else if(huart->Instance==USART2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a66      	ldr	r2, [pc, #408]	@ (8001fa4 <HAL_UART_MspInit+0x27c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d15b      	bne.n	8001ec6 <HAL_UART_MspInit+0x19e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61bb      	str	r3, [r7, #24]
 8001e12:	4b60      	ldr	r3, [pc, #384]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	4a5f      	ldr	r2, [pc, #380]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	617b      	str	r3, [r7, #20]
 8001e2e:	4b59      	ldr	r3, [pc, #356]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	4a58      	ldr	r2, [pc, #352]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3a:	4b56      	ldr	r3, [pc, #344]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e46:	230c      	movs	r3, #12
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e56:	2307      	movs	r3, #7
 8001e58:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e5e:	4619      	mov	r1, r3
 8001e60:	484d      	ldr	r0, [pc, #308]	@ (8001f98 <HAL_UART_MspInit+0x270>)
 8001e62:	f001 fcfd 	bl	8003860 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e66:	4b50      	ldr	r3, [pc, #320]	@ (8001fa8 <HAL_UART_MspInit+0x280>)
 8001e68:	4a50      	ldr	r2, [pc, #320]	@ (8001fac <HAL_UART_MspInit+0x284>)
 8001e6a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e6c:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa8 <HAL_UART_MspInit+0x280>)
 8001e6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e72:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e74:	4b4c      	ldr	r3, [pc, #304]	@ (8001fa8 <HAL_UART_MspInit+0x280>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7a:	4b4b      	ldr	r3, [pc, #300]	@ (8001fa8 <HAL_UART_MspInit+0x280>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e80:	4b49      	ldr	r3, [pc, #292]	@ (8001fa8 <HAL_UART_MspInit+0x280>)
 8001e82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e86:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e88:	4b47      	ldr	r3, [pc, #284]	@ (8001fa8 <HAL_UART_MspInit+0x280>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e8e:	4b46      	ldr	r3, [pc, #280]	@ (8001fa8 <HAL_UART_MspInit+0x280>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e94:	4b44      	ldr	r3, [pc, #272]	@ (8001fa8 <HAL_UART_MspInit+0x280>)
 8001e96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e9a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e9c:	4b42      	ldr	r3, [pc, #264]	@ (8001fa8 <HAL_UART_MspInit+0x280>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea2:	4b41      	ldr	r3, [pc, #260]	@ (8001fa8 <HAL_UART_MspInit+0x280>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001ea8:	483f      	ldr	r0, [pc, #252]	@ (8001fa8 <HAL_UART_MspInit+0x280>)
 8001eaa:	f001 f8d7 	bl	800305c <HAL_DMA_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <HAL_UART_MspInit+0x190>
      Error_Handler();
 8001eb4:	f7ff fea4 	bl	8001c00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a3b      	ldr	r2, [pc, #236]	@ (8001fa8 <HAL_UART_MspInit+0x280>)
 8001ebc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ebe:	4a3a      	ldr	r2, [pc, #232]	@ (8001fa8 <HAL_UART_MspInit+0x280>)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001ec4:	e05f      	b.n	8001f86 <HAL_UART_MspInit+0x25e>
  else if(huart->Instance==USART6)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a39      	ldr	r2, [pc, #228]	@ (8001fb0 <HAL_UART_MspInit+0x288>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d15a      	bne.n	8001f86 <HAL_UART_MspInit+0x25e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001eda:	f043 0320 	orr.w	r3, r3, #32
 8001ede:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	4b28      	ldr	r3, [pc, #160]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef4:	4a27      	ldr	r2, [pc, #156]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efc:	4b25      	ldr	r3, [pc, #148]	@ (8001f94 <HAL_UART_MspInit+0x26c>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f08:	23c0      	movs	r3, #192	@ 0xc0
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f18:	2308      	movs	r3, #8
 8001f1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f20:	4619      	mov	r1, r3
 8001f22:	4824      	ldr	r0, [pc, #144]	@ (8001fb4 <HAL_UART_MspInit+0x28c>)
 8001f24:	f001 fc9c 	bl	8003860 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001f28:	4b23      	ldr	r3, [pc, #140]	@ (8001fb8 <HAL_UART_MspInit+0x290>)
 8001f2a:	4a24      	ldr	r2, [pc, #144]	@ (8001fbc <HAL_UART_MspInit+0x294>)
 8001f2c:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001f2e:	4b22      	ldr	r3, [pc, #136]	@ (8001fb8 <HAL_UART_MspInit+0x290>)
 8001f30:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001f34:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f36:	4b20      	ldr	r3, [pc, #128]	@ (8001fb8 <HAL_UART_MspInit+0x290>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <HAL_UART_MspInit+0x290>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f42:	4b1d      	ldr	r3, [pc, #116]	@ (8001fb8 <HAL_UART_MspInit+0x290>)
 8001f44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f48:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb8 <HAL_UART_MspInit+0x290>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f50:	4b19      	ldr	r3, [pc, #100]	@ (8001fb8 <HAL_UART_MspInit+0x290>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001f56:	4b18      	ldr	r3, [pc, #96]	@ (8001fb8 <HAL_UART_MspInit+0x290>)
 8001f58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f5c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f5e:	4b16      	ldr	r3, [pc, #88]	@ (8001fb8 <HAL_UART_MspInit+0x290>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f64:	4b14      	ldr	r3, [pc, #80]	@ (8001fb8 <HAL_UART_MspInit+0x290>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001f6a:	4813      	ldr	r0, [pc, #76]	@ (8001fb8 <HAL_UART_MspInit+0x290>)
 8001f6c:	f001 f876 	bl	800305c <HAL_DMA_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_UART_MspInit+0x252>
      Error_Handler();
 8001f76:	f7ff fe43 	bl	8001c00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb8 <HAL_UART_MspInit+0x290>)
 8001f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f80:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <HAL_UART_MspInit+0x290>)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001f86:	bf00      	nop
 8001f88:	3738      	adds	r7, #56	@ 0x38
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40011000 	.word	0x40011000
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	20000458 	.word	0x20000458
 8001fa0:	40026440 	.word	0x40026440
 8001fa4:	40004400 	.word	0x40004400
 8001fa8:	200004b8 	.word	0x200004b8
 8001fac:	40026088 	.word	0x40026088
 8001fb0:	40011400 	.word	0x40011400
 8001fb4:	40020800 	.word	0x40020800
 8001fb8:	20000518 	.word	0x20000518
 8001fbc:	40026428 	.word	0x40026428

08001fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <NMI_Handler+0x4>

08001fc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <HardFault_Handler+0x4>

08001fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <MemManage_Handler+0x4>

08001fd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <BusFault_Handler+0x4>

08001fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <UsageFault_Handler+0x4>

08001fe8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002016:	f000 f9b1 	bl	800237c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002024:	4802      	ldr	r0, [pc, #8]	@ (8002030 <DMA1_Stream5_IRQHandler+0x10>)
 8002026:	f001 f9b1 	bl	800338c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200004b8 	.word	0x200004b8

08002034 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002038:	4802      	ldr	r0, [pc, #8]	@ (8002044 <ADC_IRQHandler+0x10>)
 800203a:	f000 fb99 	bl	8002770 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200002f0 	.word	0x200002f0

08002048 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800204c:	4802      	ldr	r0, [pc, #8]	@ (8002058 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800204e:	f003 fce7 	bl	8005a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000338 	.word	0x20000338

0800205c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002060:	4802      	ldr	r0, [pc, #8]	@ (800206c <USART1_IRQHandler+0x10>)
 8002062:	f004 f8f7 	bl	8006254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000380 	.word	0x20000380

08002070 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002074:	4802      	ldr	r0, [pc, #8]	@ (8002080 <USART2_IRQHandler+0x10>)
 8002076:	f004 f8ed 	bl	8006254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200003c8 	.word	0x200003c8

08002084 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002088:	4802      	ldr	r0, [pc, #8]	@ (8002094 <DMA2_Stream1_IRQHandler+0x10>)
 800208a:	f001 f97f 	bl	800338c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000518 	.word	0x20000518

08002098 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800209c:	4802      	ldr	r0, [pc, #8]	@ (80020a8 <DMA2_Stream2_IRQHandler+0x10>)
 800209e:	f001 f975 	bl	800338c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000458 	.word	0x20000458

080020ac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020b0:	4802      	ldr	r0, [pc, #8]	@ (80020bc <OTG_FS_IRQHandler+0x10>)
 80020b2:	f001 fe9d 	bl	8003df0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20001be8 	.word	0x20001be8

080020c0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80020c4:	4802      	ldr	r0, [pc, #8]	@ (80020d0 <USART6_IRQHandler+0x10>)
 80020c6:	f004 f8c5 	bl	8006254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000410 	.word	0x20000410

080020d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return 1;
 80020d8:	2301      	movs	r3, #1
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <_kill>:

int _kill(int pid, int sig)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ee:	f00a ff6b 	bl	800cfc8 <__errno>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2216      	movs	r2, #22
 80020f6:	601a      	str	r2, [r3, #0]
  return -1;
 80020f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <_exit>:

void _exit (int status)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800210c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ffe7 	bl	80020e4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002116:	bf00      	nop
 8002118:	e7fd      	b.n	8002116 <_exit+0x12>

0800211a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b086      	sub	sp, #24
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002126:	2300      	movs	r3, #0
 8002128:	617b      	str	r3, [r7, #20]
 800212a:	e00a      	b.n	8002142 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800212c:	f3af 8000 	nop.w
 8002130:	4601      	mov	r1, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	60ba      	str	r2, [r7, #8]
 8002138:	b2ca      	uxtb	r2, r1
 800213a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	3301      	adds	r3, #1
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	429a      	cmp	r2, r3
 8002148:	dbf0      	blt.n	800212c <_read+0x12>
  }

  return len;
 800214a:	687b      	ldr	r3, [r7, #4]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
 8002164:	e009      	b.n	800217a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	60ba      	str	r2, [r7, #8]
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	3301      	adds	r3, #1
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	429a      	cmp	r2, r3
 8002180:	dbf1      	blt.n	8002166 <_write+0x12>
  }
  return len;
 8002182:	687b      	ldr	r3, [r7, #4]
}
 8002184:	4618      	mov	r0, r3
 8002186:	3718      	adds	r7, #24
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_close>:

int _close(int file)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002194:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021b4:	605a      	str	r2, [r3, #4]
  return 0;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <_isatty>:

int _isatty(int file)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021cc:	2301      	movs	r3, #1
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021da:	b480      	push	{r7}
 80021dc:	b085      	sub	sp, #20
 80021de:	af00      	add	r7, sp, #0
 80021e0:	60f8      	str	r0, [r7, #12]
 80021e2:	60b9      	str	r1, [r7, #8]
 80021e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021fc:	4a14      	ldr	r2, [pc, #80]	@ (8002250 <_sbrk+0x5c>)
 80021fe:	4b15      	ldr	r3, [pc, #84]	@ (8002254 <_sbrk+0x60>)
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002208:	4b13      	ldr	r3, [pc, #76]	@ (8002258 <_sbrk+0x64>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002210:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <_sbrk+0x64>)
 8002212:	4a12      	ldr	r2, [pc, #72]	@ (800225c <_sbrk+0x68>)
 8002214:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002216:	4b10      	ldr	r3, [pc, #64]	@ (8002258 <_sbrk+0x64>)
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	429a      	cmp	r2, r3
 8002222:	d207      	bcs.n	8002234 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002224:	f00a fed0 	bl	800cfc8 <__errno>
 8002228:	4603      	mov	r3, r0
 800222a:	220c      	movs	r2, #12
 800222c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800222e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002232:	e009      	b.n	8002248 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002234:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800223a:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <_sbrk+0x64>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4413      	add	r3, r2
 8002242:	4a05      	ldr	r2, [pc, #20]	@ (8002258 <_sbrk+0x64>)
 8002244:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002246:	68fb      	ldr	r3, [r7, #12]
}
 8002248:	4618      	mov	r0, r3
 800224a:	3718      	adds	r7, #24
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20018000 	.word	0x20018000
 8002254:	00000400 	.word	0x00000400
 8002258:	20000700 	.word	0x20000700
 800225c:	20002438 	.word	0x20002438

08002260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002264:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <SystemInit+0x20>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	4a05      	ldr	r2, [pc, #20]	@ (8002280 <SystemInit+0x20>)
 800226c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002270:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002284:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002288:	f7ff ffea 	bl	8002260 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800228c:	480c      	ldr	r0, [pc, #48]	@ (80022c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800228e:	490d      	ldr	r1, [pc, #52]	@ (80022c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002290:	4a0d      	ldr	r2, [pc, #52]	@ (80022c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002294:	e002      	b.n	800229c <LoopCopyDataInit>

08002296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229a:	3304      	adds	r3, #4

0800229c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800229c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a0:	d3f9      	bcc.n	8002296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a2:	4a0a      	ldr	r2, [pc, #40]	@ (80022cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022a4:	4c0a      	ldr	r4, [pc, #40]	@ (80022d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a8:	e001      	b.n	80022ae <LoopFillZerobss>

080022aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022ac:	3204      	adds	r2, #4

080022ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b0:	d3fb      	bcc.n	80022aa <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80022b2:	f00a fe8f 	bl	800cfd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022b6:	f7fe ffbd 	bl	8001234 <main>
  bx  lr    
 80022ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c4:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 80022c8:	0800ff60 	.word	0x0800ff60
  ldr r2, =_sbss
 80022cc:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 80022d0:	20002438 	.word	0x20002438

080022d4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d4:	e7fe      	b.n	80022d4 <DMA1_Stream0_IRQHandler>
	...

080022d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002318 <HAL_Init+0x40>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002318 <HAL_Init+0x40>)
 80022e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002318 <HAL_Init+0x40>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <HAL_Init+0x40>)
 80022ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f4:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <HAL_Init+0x40>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a07      	ldr	r2, [pc, #28]	@ (8002318 <HAL_Init+0x40>)
 80022fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002300:	2003      	movs	r0, #3
 8002302:	f000 fe69 	bl	8002fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002306:	200f      	movs	r0, #15
 8002308:	f000 f808 	bl	800231c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800230c:	f7ff fc7e 	bl	8001c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40023c00 	.word	0x40023c00

0800231c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002324:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <HAL_InitTick+0x54>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <HAL_InitTick+0x58>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002332:	fbb3 f3f1 	udiv	r3, r3, r1
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fe81 	bl	8003042 <HAL_SYSTICK_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e00e      	b.n	8002368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b0f      	cmp	r3, #15
 800234e:	d80a      	bhi.n	8002366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002350:	2200      	movs	r2, #0
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002358:	f000 fe49 	bl	8002fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800235c:	4a06      	ldr	r2, [pc, #24]	@ (8002378 <HAL_InitTick+0x5c>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e000      	b.n	8002368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000008 	.word	0x20000008
 8002374:	20000010 	.word	0x20000010
 8002378:	2000000c 	.word	0x2000000c

0800237c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002380:	4b06      	ldr	r3, [pc, #24]	@ (800239c <HAL_IncTick+0x20>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	461a      	mov	r2, r3
 8002386:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_IncTick+0x24>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4413      	add	r3, r2
 800238c:	4a04      	ldr	r2, [pc, #16]	@ (80023a0 <HAL_IncTick+0x24>)
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000010 	.word	0x20000010
 80023a0:	20000704 	.word	0x20000704

080023a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  return uwTick;
 80023a8:	4b03      	ldr	r3, [pc, #12]	@ (80023b8 <HAL_GetTick+0x14>)
 80023aa:	681b      	ldr	r3, [r3, #0]
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000704 	.word	0x20000704

080023bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c4:	f7ff ffee 	bl	80023a4 <HAL_GetTick>
 80023c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023d4:	d005      	beq.n	80023e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002400 <HAL_Delay+0x44>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4413      	add	r3, r2
 80023e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023e2:	bf00      	nop
 80023e4:	f7ff ffde 	bl	80023a4 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d8f7      	bhi.n	80023e4 <HAL_Delay+0x28>
  {
  }
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000010 	.word	0x20000010

08002404 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e033      	b.n	8002482 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	2b00      	cmp	r3, #0
 8002420:	d109      	bne.n	8002436 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff fc1a 	bl	8001c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f003 0310 	and.w	r3, r3, #16
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800244a:	f023 0302 	bic.w	r3, r3, #2
 800244e:	f043 0202 	orr.w	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 fbe8 	bl	8002c2c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	f023 0303 	bic.w	r3, r3, #3
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	641a      	str	r2, [r3, #64]	@ 0x40
 8002472:	e001      	b.n	8002478 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3710      	adds	r7, #16
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_Start+0x1a>
 80024a2:	2302      	movs	r3, #2
 80024a4:	e097      	b.n	80025d6 <HAL_ADC_Start+0x14a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2201      	movs	r2, #1
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d018      	beq.n	80024ee <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0201 	orr.w	r2, r2, #1
 80024ca:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024cc:	4b45      	ldr	r3, [pc, #276]	@ (80025e4 <HAL_ADC_Start+0x158>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a45      	ldr	r2, [pc, #276]	@ (80025e8 <HAL_ADC_Start+0x15c>)
 80024d2:	fba2 2303 	umull	r2, r3, r2, r3
 80024d6:	0c9a      	lsrs	r2, r3, #18
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80024e0:	e002      	b.n	80024e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f9      	bne.n	80024e2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d15f      	bne.n	80025bc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002500:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002526:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800253a:	d106      	bne.n	800254a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002540:	f023 0206 	bic.w	r2, r3, #6
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	645a      	str	r2, [r3, #68]	@ 0x44
 8002548:	e002      	b.n	8002550 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002558:	4b24      	ldr	r3, [pc, #144]	@ (80025ec <HAL_ADC_Start+0x160>)
 800255a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002564:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 031f 	and.w	r3, r3, #31
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10f      	bne.n	8002592 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d129      	bne.n	80025d4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	e020      	b.n	80025d4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a16      	ldr	r2, [pc, #88]	@ (80025f0 <HAL_ADC_Start+0x164>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d11b      	bne.n	80025d4 <HAL_ADC_Start+0x148>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d114      	bne.n	80025d4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	e00b      	b.n	80025d4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c0:	f043 0210 	orr.w	r2, r3, #16
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025cc:	f043 0201 	orr.w	r2, r3, #1
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000008 	.word	0x20000008
 80025e8:	431bde83 	.word	0x431bde83
 80025ec:	40012300 	.word	0x40012300
 80025f0:	40012000 	.word	0x40012000

080025f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002602:	2b01      	cmp	r3, #1
 8002604:	d101      	bne.n	800260a <HAL_ADC_Stop+0x16>
 8002606:	2302      	movs	r3, #2
 8002608:	e021      	b.n	800264e <HAL_ADC_Stop+0x5a>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2201      	movs	r2, #1
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0201 	bic.w	r2, r2, #1
 8002620:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b00      	cmp	r3, #0
 800262e:	d109      	bne.n	8002644 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002638:	f023 0301 	bic.w	r3, r3, #1
 800263c:	f043 0201 	orr.w	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002672:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002676:	d113      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002686:	d10b      	bne.n	80026a0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	f043 0220 	orr.w	r2, r3, #32
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e063      	b.n	8002768 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80026a0:	f7ff fe80 	bl	80023a4 <HAL_GetTick>
 80026a4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026a6:	e021      	b.n	80026ec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80026ae:	d01d      	beq.n	80026ec <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_ADC_PollForConversion+0x6c>
 80026b6:	f7ff fe75 	bl	80023a4 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d212      	bcs.n	80026ec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d00b      	beq.n	80026ec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d8:	f043 0204 	orr.w	r2, r3, #4
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e03d      	b.n	8002768 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d1d6      	bne.n	80026a8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f06f 0212 	mvn.w	r2, #18
 8002702:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002708:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d123      	bne.n	8002766 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002722:	2b00      	cmp	r3, #0
 8002724:	d11f      	bne.n	8002766 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800273e:	2b00      	cmp	r3, #0
 8002740:	d111      	bne.n	8002766 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002752:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d105      	bne.n	8002766 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275e:	f043 0201 	orr.w	r2, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	2300      	movs	r3, #0
 800277e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d049      	beq.n	800283a <HAL_ADC_IRQHandler+0xca>
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d046      	beq.n	800283a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b0:	f003 0310 	and.w	r3, r3, #16
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d105      	bne.n	80027c4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d12b      	bne.n	800282a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d127      	bne.n	800282a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d119      	bne.n	800282a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0220 	bic.w	r2, r2, #32
 8002804:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d105      	bne.n	800282a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	f043 0201 	orr.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f8bd 	bl	80029aa <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f06f 0212 	mvn.w	r2, #18
 8002838:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002848:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d057      	beq.n	8002900 <HAL_ADC_IRQHandler+0x190>
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d054      	beq.n	8002900 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285a:	f003 0310 	and.w	r3, r3, #16
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d139      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002882:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002886:	2b00      	cmp	r3, #0
 8002888:	d006      	beq.n	8002898 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002894:	2b00      	cmp	r3, #0
 8002896:	d12b      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d124      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d11d      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d119      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028ca:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	f043 0201 	orr.w	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 fa97 	bl	8002e24 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f06f 020c 	mvn.w	r2, #12
 80028fe:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800290e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d017      	beq.n	8002946 <HAL_ADC_IRQHandler+0x1d6>
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d014      	beq.n	8002946 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d10d      	bne.n	8002946 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f841 	bl	80029be <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f06f 0201 	mvn.w	r2, #1
 8002944:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002954:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d015      	beq.n	8002988 <HAL_ADC_IRQHandler+0x218>
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d012      	beq.n	8002988 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	f043 0202 	orr.w	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f06f 0220 	mvn.w	r2, #32
 8002976:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f82a 	bl	80029d2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f06f 0220 	mvn.w	r2, #32
 8002986:	601a      	str	r2, [r3, #0]
  }
}
 8002988:	bf00      	nop
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800299e:	4618      	mov	r0, r3
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b083      	sub	sp, #12
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d101      	bne.n	8002a04 <HAL_ADC_ConfigChannel+0x1c>
 8002a00:	2302      	movs	r3, #2
 8002a02:	e105      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x228>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b09      	cmp	r3, #9
 8002a12:	d925      	bls.n	8002a60 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68d9      	ldr	r1, [r3, #12]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	3b1e      	subs	r3, #30
 8002a2a:	2207      	movs	r2, #7
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43da      	mvns	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	400a      	ands	r2, r1
 8002a38:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68d9      	ldr	r1, [r3, #12]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	4403      	add	r3, r0
 8002a52:	3b1e      	subs	r3, #30
 8002a54:	409a      	lsls	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	e022      	b.n	8002aa6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6919      	ldr	r1, [r3, #16]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	4613      	mov	r3, r2
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4413      	add	r3, r2
 8002a74:	2207      	movs	r2, #7
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	400a      	ands	r2, r1
 8002a82:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6919      	ldr	r1, [r3, #16]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4618      	mov	r0, r3
 8002a96:	4603      	mov	r3, r0
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	4403      	add	r3, r0
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b06      	cmp	r3, #6
 8002aac:	d824      	bhi.n	8002af8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	3b05      	subs	r3, #5
 8002ac0:	221f      	movs	r2, #31
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	400a      	ands	r2, r1
 8002ace:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	4618      	mov	r0, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3b05      	subs	r3, #5
 8002aea:	fa00 f203 	lsl.w	r2, r0, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002af6:	e04c      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b0c      	cmp	r3, #12
 8002afe:	d824      	bhi.n	8002b4a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	3b23      	subs	r3, #35	@ 0x23
 8002b12:	221f      	movs	r2, #31
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43da      	mvns	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	400a      	ands	r2, r1
 8002b20:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	4618      	mov	r0, r3
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	3b23      	subs	r3, #35	@ 0x23
 8002b3c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b48:	e023      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	3b41      	subs	r3, #65	@ 0x41
 8002b5c:	221f      	movs	r2, #31
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43da      	mvns	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	400a      	ands	r2, r1
 8002b6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	4618      	mov	r0, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	3b41      	subs	r3, #65	@ 0x41
 8002b86:	fa00 f203 	lsl.w	r2, r0, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b92:	4b22      	ldr	r3, [pc, #136]	@ (8002c1c <HAL_ADC_ConfigChannel+0x234>)
 8002b94:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a21      	ldr	r2, [pc, #132]	@ (8002c20 <HAL_ADC_ConfigChannel+0x238>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d109      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x1cc>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2b12      	cmp	r3, #18
 8002ba6:	d105      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a19      	ldr	r2, [pc, #100]	@ (8002c20 <HAL_ADC_ConfigChannel+0x238>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d123      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x21e>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b10      	cmp	r3, #16
 8002bc4:	d003      	beq.n	8002bce <HAL_ADC_ConfigChannel+0x1e6>
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b11      	cmp	r3, #17
 8002bcc:	d11b      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d111      	bne.n	8002c06 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002be2:	4b10      	ldr	r3, [pc, #64]	@ (8002c24 <HAL_ADC_ConfigChannel+0x23c>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a10      	ldr	r2, [pc, #64]	@ (8002c28 <HAL_ADC_ConfigChannel+0x240>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	0c9a      	lsrs	r2, r3, #18
 8002bee:	4613      	mov	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bf8:	e002      	b.n	8002c00 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	3b01      	subs	r3, #1
 8002bfe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f9      	bne.n	8002bfa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	40012300 	.word	0x40012300
 8002c20:	40012000 	.word	0x40012000
 8002c24:	20000008 	.word	0x20000008
 8002c28:	431bde83 	.word	0x431bde83

08002c2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c34:	4b79      	ldr	r3, [pc, #484]	@ (8002e1c <ADC_Init+0x1f0>)
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	021a      	lsls	r2, r3, #8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6899      	ldr	r1, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cbe:	4a58      	ldr	r2, [pc, #352]	@ (8002e20 <ADC_Init+0x1f4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d022      	beq.n	8002d0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6899      	ldr	r1, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002cf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6899      	ldr	r1, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	e00f      	b.n	8002d2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d28:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0202 	bic.w	r2, r2, #2
 8002d38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6899      	ldr	r1, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7e1b      	ldrb	r3, [r3, #24]
 8002d44:	005a      	lsls	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01b      	beq.n	8002d90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d66:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d82:	3b01      	subs	r3, #1
 8002d84:	035a      	lsls	r2, r3, #13
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	e007      	b.n	8002da0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d9e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	051a      	lsls	r2, r3, #20
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002dd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6899      	ldr	r1, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002de2:	025a      	lsls	r2, r3, #9
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6899      	ldr	r1, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	029a      	lsls	r2, r3, #10
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40012300 	.word	0x40012300
 8002e20:	0f000001 	.word	0x0f000001

08002e24 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e48:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <__NVIC_SetPriorityGrouping+0x44>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e54:	4013      	ands	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e6a:	4a04      	ldr	r2, [pc, #16]	@ (8002e7c <__NVIC_SetPriorityGrouping+0x44>)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	60d3      	str	r3, [r2, #12]
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e84:	4b04      	ldr	r3, [pc, #16]	@ (8002e98 <__NVIC_GetPriorityGrouping+0x18>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	f003 0307 	and.w	r3, r3, #7
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	db0b      	blt.n	8002ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	f003 021f 	and.w	r2, r3, #31
 8002eb4:	4907      	ldr	r1, [pc, #28]	@ (8002ed4 <__NVIC_EnableIRQ+0x38>)
 8002eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8002ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000e100 	.word	0xe000e100

08002ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	db0a      	blt.n	8002f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	490c      	ldr	r1, [pc, #48]	@ (8002f24 <__NVIC_SetPriority+0x4c>)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	0112      	lsls	r2, r2, #4
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	440b      	add	r3, r1
 8002efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f00:	e00a      	b.n	8002f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	4908      	ldr	r1, [pc, #32]	@ (8002f28 <__NVIC_SetPriority+0x50>)
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	3b04      	subs	r3, #4
 8002f10:	0112      	lsls	r2, r2, #4
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	440b      	add	r3, r1
 8002f16:	761a      	strb	r2, [r3, #24]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000e100 	.word	0xe000e100
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	@ 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f1c3 0307 	rsb	r3, r3, #7
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	bf28      	it	cs
 8002f4a:	2304      	movcs	r3, #4
 8002f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3304      	adds	r3, #4
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d902      	bls.n	8002f5c <NVIC_EncodePriority+0x30>
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3b03      	subs	r3, #3
 8002f5a:	e000      	b.n	8002f5e <NVIC_EncodePriority+0x32>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	401a      	ands	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	43d9      	mvns	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	4313      	orrs	r3, r2
         );
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3724      	adds	r7, #36	@ 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fa4:	d301      	bcc.n	8002faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00f      	b.n	8002fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002faa:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd4 <SysTick_Config+0x40>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fb2:	210f      	movs	r1, #15
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fb8:	f7ff ff8e 	bl	8002ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fbc:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <SysTick_Config+0x40>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fc2:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <SysTick_Config+0x40>)
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	e000e010 	.word	0xe000e010

08002fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff29 	bl	8002e38 <__NVIC_SetPriorityGrouping>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003000:	f7ff ff3e 	bl	8002e80 <__NVIC_GetPriorityGrouping>
 8003004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	6978      	ldr	r0, [r7, #20]
 800300c:	f7ff ff8e 	bl	8002f2c <NVIC_EncodePriority>
 8003010:	4602      	mov	r2, r0
 8003012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff5d 	bl	8002ed8 <__NVIC_SetPriority>
}
 800301e:	bf00      	nop
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff31 	bl	8002e9c <__NVIC_EnableIRQ>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ffa2 	bl	8002f94 <SysTick_Config>
 8003050:	4603      	mov	r3, r0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003068:	f7ff f99c 	bl	80023a4 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d101      	bne.n	8003078 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e099      	b.n	80031ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003098:	e00f      	b.n	80030ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800309a:	f7ff f983 	bl	80023a4 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b05      	cmp	r3, #5
 80030a6:	d908      	bls.n	80030ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2203      	movs	r2, #3
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e078      	b.n	80031ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1e8      	bne.n	800309a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4b38      	ldr	r3, [pc, #224]	@ (80031b4 <HAL_DMA_Init+0x158>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80030f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80030fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003110:	2b04      	cmp	r3, #4
 8003112:	d107      	bne.n	8003124 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311c:	4313      	orrs	r3, r2
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f023 0307 	bic.w	r3, r3, #7
 800313a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314a:	2b04      	cmp	r3, #4
 800314c:	d117      	bne.n	800317e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00e      	beq.n	800317e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 fb01 	bl	8003768 <DMA_CheckFifoParam>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2240      	movs	r2, #64	@ 0x40
 8003170:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800317a:	2301      	movs	r3, #1
 800317c:	e016      	b.n	80031ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fab8 	bl	80036fc <DMA_CalcBaseAndBitshift>
 800318c:	4603      	mov	r3, r0
 800318e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003194:	223f      	movs	r2, #63	@ 0x3f
 8003196:	409a      	lsls	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	f010803f 	.word	0xf010803f

080031b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d101      	bne.n	80031de <HAL_DMA_Start_IT+0x26>
 80031da:	2302      	movs	r3, #2
 80031dc:	e040      	b.n	8003260 <HAL_DMA_Start_IT+0xa8>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d12f      	bne.n	8003252 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2202      	movs	r2, #2
 80031f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fa4a 	bl	80036a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003210:	223f      	movs	r2, #63	@ 0x3f
 8003212:	409a      	lsls	r2, r3
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0216 	orr.w	r2, r2, #22
 8003226:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0208 	orr.w	r2, r2, #8
 800323e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	e005      	b.n	800325e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800325a:	2302      	movs	r3, #2
 800325c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800325e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3718      	adds	r7, #24
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003274:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003276:	f7ff f895 	bl	80023a4 <HAL_GetTick>
 800327a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d008      	beq.n	800329a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2280      	movs	r2, #128	@ 0x80
 800328c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e052      	b.n	8003340 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0216 	bic.w	r2, r2, #22
 80032a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	695a      	ldr	r2, [r3, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <HAL_DMA_Abort+0x62>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0208 	bic.w	r2, r2, #8
 80032d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 0201 	bic.w	r2, r2, #1
 80032e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032ea:	e013      	b.n	8003314 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032ec:	f7ff f85a 	bl	80023a4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b05      	cmp	r3, #5
 80032f8:	d90c      	bls.n	8003314 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2203      	movs	r2, #3
 8003304:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e015      	b.n	8003340 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d1e4      	bne.n	80032ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003326:	223f      	movs	r2, #63	@ 0x3f
 8003328:	409a      	lsls	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3710      	adds	r7, #16
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}

08003348 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d004      	beq.n	8003366 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2280      	movs	r2, #128	@ 0x80
 8003360:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e00c      	b.n	8003380 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2205      	movs	r2, #5
 800336a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f022 0201 	bic.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003398:	4b8e      	ldr	r3, [pc, #568]	@ (80035d4 <HAL_DMA_IRQHandler+0x248>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a8e      	ldr	r2, [pc, #568]	@ (80035d8 <HAL_DMA_IRQHandler+0x24c>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	0a9b      	lsrs	r3, r3, #10
 80033a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b6:	2208      	movs	r2, #8
 80033b8:	409a      	lsls	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4013      	ands	r3, r2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01a      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d013      	beq.n	80033f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0204 	bic.w	r2, r2, #4
 80033de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e4:	2208      	movs	r2, #8
 80033e6:	409a      	lsls	r2, r3
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f0:	f043 0201 	orr.w	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033fc:	2201      	movs	r2, #1
 80033fe:	409a      	lsls	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d012      	beq.n	800342e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341a:	2201      	movs	r2, #1
 800341c:	409a      	lsls	r2, r3
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003426:	f043 0202 	orr.w	r2, r3, #2
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003432:	2204      	movs	r2, #4
 8003434:	409a      	lsls	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4013      	ands	r3, r2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d012      	beq.n	8003464 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00b      	beq.n	8003464 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003450:	2204      	movs	r2, #4
 8003452:	409a      	lsls	r2, r3
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345c:	f043 0204 	orr.w	r2, r3, #4
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003468:	2210      	movs	r2, #16
 800346a:	409a      	lsls	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4013      	ands	r3, r2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d043      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d03c      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003486:	2210      	movs	r2, #16
 8003488:	409a      	lsls	r2, r3
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d018      	beq.n	80034ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d108      	bne.n	80034bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d024      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	4798      	blx	r3
 80034ba:	e01f      	b.n	80034fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d01b      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	4798      	blx	r3
 80034cc:	e016      	b.n	80034fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d107      	bne.n	80034ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0208 	bic.w	r2, r2, #8
 80034ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003500:	2220      	movs	r2, #32
 8003502:	409a      	lsls	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 808f 	beq.w	800362c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 8087 	beq.w	800362c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003522:	2220      	movs	r2, #32
 8003524:	409a      	lsls	r2, r3
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b05      	cmp	r3, #5
 8003534:	d136      	bne.n	80035a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 0216 	bic.w	r2, r2, #22
 8003544:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695a      	ldr	r2, [r3, #20]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003554:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d103      	bne.n	8003566 <HAL_DMA_IRQHandler+0x1da>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003562:	2b00      	cmp	r3, #0
 8003564:	d007      	beq.n	8003576 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0208 	bic.w	r2, r2, #8
 8003574:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357a:	223f      	movs	r2, #63	@ 0x3f
 800357c:	409a      	lsls	r2, r3
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003596:	2b00      	cmp	r3, #0
 8003598:	d07e      	beq.n	8003698 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
        }
        return;
 80035a2:	e079      	b.n	8003698 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d01d      	beq.n	80035ee <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10d      	bne.n	80035dc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d031      	beq.n	800362c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
 80035d0:	e02c      	b.n	800362c <HAL_DMA_IRQHandler+0x2a0>
 80035d2:	bf00      	nop
 80035d4:	20000008 	.word	0x20000008
 80035d8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d023      	beq.n	800362c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	4798      	blx	r3
 80035ec:	e01e      	b.n	800362c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10f      	bne.n	800361c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0210 	bic.w	r2, r2, #16
 800360a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003630:	2b00      	cmp	r3, #0
 8003632:	d032      	beq.n	800369a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d022      	beq.n	8003686 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2205      	movs	r2, #5
 8003644:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	3301      	adds	r3, #1
 800365c:	60bb      	str	r3, [r7, #8]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	429a      	cmp	r2, r3
 8003662:	d307      	bcc.n	8003674 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f2      	bne.n	8003658 <HAL_DMA_IRQHandler+0x2cc>
 8003672:	e000      	b.n	8003676 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003674:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2201      	movs	r2, #1
 800367a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
 8003696:	e000      	b.n	800369a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003698:	bf00      	nop
    }
  }
}
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b40      	cmp	r3, #64	@ 0x40
 80036cc:	d108      	bne.n	80036e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036de:	e007      	b.n	80036f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	60da      	str	r2, [r3, #12]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	3b10      	subs	r3, #16
 800370c:	4a14      	ldr	r2, [pc, #80]	@ (8003760 <DMA_CalcBaseAndBitshift+0x64>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003716:	4a13      	ldr	r2, [pc, #76]	@ (8003764 <DMA_CalcBaseAndBitshift+0x68>)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4413      	add	r3, r2
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b03      	cmp	r3, #3
 8003728:	d909      	bls.n	800373e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003732:	f023 0303 	bic.w	r3, r3, #3
 8003736:	1d1a      	adds	r2, r3, #4
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	659a      	str	r2, [r3, #88]	@ 0x58
 800373c:	e007      	b.n	800374e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003746:	f023 0303 	bic.w	r3, r3, #3
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	aaaaaaab 	.word	0xaaaaaaab
 8003764:	0800fb18 	.word	0x0800fb18

08003768 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003778:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d11f      	bne.n	80037c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b03      	cmp	r3, #3
 8003786:	d856      	bhi.n	8003836 <DMA_CheckFifoParam+0xce>
 8003788:	a201      	add	r2, pc, #4	@ (adr r2, 8003790 <DMA_CheckFifoParam+0x28>)
 800378a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378e:	bf00      	nop
 8003790:	080037a1 	.word	0x080037a1
 8003794:	080037b3 	.word	0x080037b3
 8003798:	080037a1 	.word	0x080037a1
 800379c:	08003837 	.word	0x08003837
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d046      	beq.n	800383a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037b0:	e043      	b.n	800383a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037ba:	d140      	bne.n	800383e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c0:	e03d      	b.n	800383e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ca:	d121      	bne.n	8003810 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b03      	cmp	r3, #3
 80037d0:	d837      	bhi.n	8003842 <DMA_CheckFifoParam+0xda>
 80037d2:	a201      	add	r2, pc, #4	@ (adr r2, 80037d8 <DMA_CheckFifoParam+0x70>)
 80037d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d8:	080037e9 	.word	0x080037e9
 80037dc:	080037ef 	.word	0x080037ef
 80037e0:	080037e9 	.word	0x080037e9
 80037e4:	08003801 	.word	0x08003801
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	73fb      	strb	r3, [r7, #15]
      break;
 80037ec:	e030      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d025      	beq.n	8003846 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037fe:	e022      	b.n	8003846 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003808:	d11f      	bne.n	800384a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800380e:	e01c      	b.n	800384a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b02      	cmp	r3, #2
 8003814:	d903      	bls.n	800381e <DMA_CheckFifoParam+0xb6>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	2b03      	cmp	r3, #3
 800381a:	d003      	beq.n	8003824 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800381c:	e018      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
      break;
 8003822:	e015      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003828:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00e      	beq.n	800384e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      break;
 8003834:	e00b      	b.n	800384e <DMA_CheckFifoParam+0xe6>
      break;
 8003836:	bf00      	nop
 8003838:	e00a      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      break;
 800383a:	bf00      	nop
 800383c:	e008      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      break;
 800383e:	bf00      	nop
 8003840:	e006      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      break;
 8003842:	bf00      	nop
 8003844:	e004      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      break;
 8003846:	bf00      	nop
 8003848:	e002      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      break;   
 800384a:	bf00      	nop
 800384c:	e000      	b.n	8003850 <DMA_CheckFifoParam+0xe8>
      break;
 800384e:	bf00      	nop
    }
  } 
  
  return status; 
 8003850:	7bfb      	ldrb	r3, [r7, #15]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3714      	adds	r7, #20
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop

08003860 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003860:	b480      	push	{r7}
 8003862:	b089      	sub	sp, #36	@ 0x24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800386e:	2300      	movs	r3, #0
 8003870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003872:	2300      	movs	r3, #0
 8003874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	e159      	b.n	8003b30 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800387c:	2201      	movs	r2, #1
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	429a      	cmp	r2, r3
 8003896:	f040 8148 	bne.w	8003b2a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d005      	beq.n	80038b2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d130      	bne.n	8003914 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	2203      	movs	r2, #3
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68da      	ldr	r2, [r3, #12]
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038e8:	2201      	movs	r2, #1
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	f003 0201 	and.w	r2, r3, #1
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0303 	and.w	r3, r3, #3
 800391c:	2b03      	cmp	r3, #3
 800391e:	d017      	beq.n	8003950 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	2203      	movs	r2, #3
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f003 0303 	and.w	r3, r3, #3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d123      	bne.n	80039a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	08da      	lsrs	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3208      	adds	r2, #8
 8003964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	f003 0307 	and.w	r3, r3, #7
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	220f      	movs	r2, #15
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	4313      	orrs	r3, r2
 8003994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	08da      	lsrs	r2, r3, #3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3208      	adds	r2, #8
 800399e:	69b9      	ldr	r1, [r7, #24]
 80039a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	2203      	movs	r2, #3
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43db      	mvns	r3, r3
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	4013      	ands	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0203 	and.w	r2, r3, #3
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f000 80a2 	beq.w	8003b2a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	4b57      	ldr	r3, [pc, #348]	@ (8003b48 <HAL_GPIO_Init+0x2e8>)
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	4a56      	ldr	r2, [pc, #344]	@ (8003b48 <HAL_GPIO_Init+0x2e8>)
 80039f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039f6:	4b54      	ldr	r3, [pc, #336]	@ (8003b48 <HAL_GPIO_Init+0x2e8>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a02:	4a52      	ldr	r2, [pc, #328]	@ (8003b4c <HAL_GPIO_Init+0x2ec>)
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	089b      	lsrs	r3, r3, #2
 8003a08:	3302      	adds	r3, #2
 8003a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0303 	and.w	r3, r3, #3
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	220f      	movs	r2, #15
 8003a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a49      	ldr	r2, [pc, #292]	@ (8003b50 <HAL_GPIO_Init+0x2f0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d019      	beq.n	8003a62 <HAL_GPIO_Init+0x202>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a48      	ldr	r2, [pc, #288]	@ (8003b54 <HAL_GPIO_Init+0x2f4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d013      	beq.n	8003a5e <HAL_GPIO_Init+0x1fe>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a47      	ldr	r2, [pc, #284]	@ (8003b58 <HAL_GPIO_Init+0x2f8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00d      	beq.n	8003a5a <HAL_GPIO_Init+0x1fa>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a46      	ldr	r2, [pc, #280]	@ (8003b5c <HAL_GPIO_Init+0x2fc>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d007      	beq.n	8003a56 <HAL_GPIO_Init+0x1f6>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a45      	ldr	r2, [pc, #276]	@ (8003b60 <HAL_GPIO_Init+0x300>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d101      	bne.n	8003a52 <HAL_GPIO_Init+0x1f2>
 8003a4e:	2304      	movs	r3, #4
 8003a50:	e008      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a52:	2307      	movs	r3, #7
 8003a54:	e006      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a56:	2303      	movs	r3, #3
 8003a58:	e004      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e002      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_GPIO_Init+0x204>
 8003a62:	2300      	movs	r3, #0
 8003a64:	69fa      	ldr	r2, [r7, #28]
 8003a66:	f002 0203 	and.w	r2, r2, #3
 8003a6a:	0092      	lsls	r2, r2, #2
 8003a6c:	4093      	lsls	r3, r2
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a74:	4935      	ldr	r1, [pc, #212]	@ (8003b4c <HAL_GPIO_Init+0x2ec>)
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	089b      	lsrs	r3, r3, #2
 8003a7a:	3302      	adds	r3, #2
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a82:	4b38      	ldr	r3, [pc, #224]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	43db      	mvns	r3, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003aac:	4b2d      	ldr	r3, [pc, #180]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	69ba      	ldr	r2, [r7, #24]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ad0:	4a24      	ldr	r2, [pc, #144]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ad6:	4b23      	ldr	r3, [pc, #140]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003af2:	69ba      	ldr	r2, [r7, #24]
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003afa:	4a1a      	ldr	r2, [pc, #104]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b00:	4b18      	ldr	r3, [pc, #96]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b24:	4a0f      	ldr	r2, [pc, #60]	@ (8003b64 <HAL_GPIO_Init+0x304>)
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	61fb      	str	r3, [r7, #28]
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	2b0f      	cmp	r3, #15
 8003b34:	f67f aea2 	bls.w	800387c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	3724      	adds	r7, #36	@ 0x24
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
 8003b46:	bf00      	nop
 8003b48:	40023800 	.word	0x40023800
 8003b4c:	40013800 	.word	0x40013800
 8003b50:	40020000 	.word	0x40020000
 8003b54:	40020400 	.word	0x40020400
 8003b58:	40020800 	.word	0x40020800
 8003b5c:	40020c00 	.word	0x40020c00
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40013c00 	.word	0x40013c00

08003b68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e101      	b.n	8003d7e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d106      	bne.n	8003b9a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f007 f8ff 	bl	800ad98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ba8:	d102      	bne.n	8003bb0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f003 fd4c 	bl	8007652 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	7c1a      	ldrb	r2, [r3, #16]
 8003bc2:	f88d 2000 	strb.w	r2, [sp]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bca:	f003 fc2b 	bl	8007424 <USB_CoreInit>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0ce      	b.n	8003d7e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f003 fd44 	bl	8007674 <USB_SetCurrentMode>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e0bf      	b.n	8003d7e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73fb      	strb	r3, [r7, #15]
 8003c02:	e04a      	b.n	8003c9a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c04:	7bfa      	ldrb	r2, [r7, #15]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	4413      	add	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	3315      	adds	r3, #21
 8003c14:	2201      	movs	r2, #1
 8003c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	440b      	add	r3, r1
 8003c26:	3314      	adds	r3, #20
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c2c:	7bfa      	ldrb	r2, [r7, #15]
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	b298      	uxth	r0, r3
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4413      	add	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	332e      	adds	r3, #46	@ 0x2e
 8003c40:	4602      	mov	r2, r0
 8003c42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c44:	7bfa      	ldrb	r2, [r7, #15]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	3318      	adds	r3, #24
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c58:	7bfa      	ldrb	r2, [r7, #15]
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	331c      	adds	r3, #28
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c6c:	7bfa      	ldrb	r2, [r7, #15]
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	3320      	adds	r3, #32
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c80:	7bfa      	ldrb	r2, [r7, #15]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3324      	adds	r3, #36	@ 0x24
 8003c90:	2200      	movs	r2, #0
 8003c92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c94:	7bfb      	ldrb	r3, [r7, #15]
 8003c96:	3301      	adds	r3, #1
 8003c98:	73fb      	strb	r3, [r7, #15]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	791b      	ldrb	r3, [r3, #4]
 8003c9e:	7bfa      	ldrb	r2, [r7, #15]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d3af      	bcc.n	8003c04 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	73fb      	strb	r3, [r7, #15]
 8003ca8:	e044      	b.n	8003d34 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003caa:	7bfa      	ldrb	r2, [r7, #15]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	00db      	lsls	r3, r3, #3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cc0:	7bfa      	ldrb	r2, [r7, #15]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	00db      	lsls	r3, r3, #3
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003cd2:	7bfa      	ldrb	r2, [r7, #15]
 8003cd4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003cd6:	7bfa      	ldrb	r2, [r7, #15]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cec:	7bfa      	ldrb	r2, [r7, #15]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d02:	7bfa      	ldrb	r2, [r7, #15]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d18:	7bfa      	ldrb	r2, [r7, #15]
 8003d1a:	6879      	ldr	r1, [r7, #4]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	4413      	add	r3, r2
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	440b      	add	r3, r1
 8003d26:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
 8003d30:	3301      	adds	r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	791b      	ldrb	r3, [r3, #4]
 8003d38:	7bfa      	ldrb	r2, [r7, #15]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d3b5      	bcc.n	8003caa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	7c1a      	ldrb	r2, [r3, #16]
 8003d46:	f88d 2000 	strb.w	r2, [sp]
 8003d4a:	3304      	adds	r3, #4
 8003d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d4e:	f003 fcdd 	bl	800770c <USB_DevInit>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d005      	beq.n	8003d64 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e00c      	b.n	8003d7e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f004 fd27 	bl	80087ca <USB_DevDisconnect>

  return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b084      	sub	sp, #16
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_PCD_Start+0x1c>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e022      	b.n	8003de8 <HAL_PCD_Start+0x62>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d105      	bne.n	8003dca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f003 fc2e 	bl	8007630 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f004 fcd5 	bl	8008788 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003df0:	b590      	push	{r4, r7, lr}
 8003df2:	b08d      	sub	sp, #52	@ 0x34
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dfe:	6a3b      	ldr	r3, [r7, #32]
 8003e00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f004 fd93 	bl	8008932 <USB_GetMode>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 848c 	bne.w	800472c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f004 fcf7 	bl	800880c <USB_ReadInterrupts>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8482 	beq.w	800472a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	0a1b      	lsrs	r3, r3, #8
 8003e30:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f004 fce4 	bl	800880c <USB_ReadInterrupts>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d107      	bne.n	8003e5e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695a      	ldr	r2, [r3, #20]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f002 0202 	and.w	r2, r2, #2
 8003e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f004 fcd2 	bl	800880c <USB_ReadInterrupts>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b10      	cmp	r3, #16
 8003e70:	d161      	bne.n	8003f36 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699a      	ldr	r2, [r3, #24]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0210 	bic.w	r2, r2, #16
 8003e80:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	f003 020f 	and.w	r2, r3, #15
 8003e8e:	4613      	mov	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	0c5b      	lsrs	r3, r3, #17
 8003ea6:	f003 030f 	and.w	r3, r3, #15
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d124      	bne.n	8003ef8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d035      	beq.n	8003f26 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	091b      	lsrs	r3, r3, #4
 8003ec2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6a38      	ldr	r0, [r7, #32]
 8003ece:	f004 fb09 	bl	80084e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	091b      	lsrs	r3, r3, #4
 8003eda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ede:	441a      	add	r2, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	695a      	ldr	r2, [r3, #20]
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	091b      	lsrs	r3, r3, #4
 8003eec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ef0:	441a      	add	r2, r3
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	615a      	str	r2, [r3, #20]
 8003ef6:	e016      	b.n	8003f26 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	0c5b      	lsrs	r3, r3, #17
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	2b06      	cmp	r3, #6
 8003f02:	d110      	bne.n	8003f26 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f0a:	2208      	movs	r2, #8
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	6a38      	ldr	r0, [r7, #32]
 8003f10:	f004 fae8 	bl	80084e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	091b      	lsrs	r3, r3, #4
 8003f1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f20:	441a      	add	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699a      	ldr	r2, [r3, #24]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0210 	orr.w	r2, r2, #16
 8003f34:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f004 fc66 	bl	800880c <USB_ReadInterrupts>
 8003f40:	4603      	mov	r3, r0
 8003f42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f46:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003f4a:	f040 80a7 	bne.w	800409c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f004 fc6b 	bl	8008832 <USB_ReadDevAllOutEpInterrupt>
 8003f5c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003f5e:	e099      	b.n	8004094 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 808e 	beq.w	8004088 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f72:	b2d2      	uxtb	r2, r2
 8003f74:	4611      	mov	r1, r2
 8003f76:	4618      	mov	r0, r3
 8003f78:	f004 fc8f 	bl	800889a <USB_ReadDevOutEPInterrupt>
 8003f7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00c      	beq.n	8003fa2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8a:	015a      	lsls	r2, r3, #5
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f94:	461a      	mov	r2, r3
 8003f96:	2301      	movs	r3, #1
 8003f98:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fea3 	bl	8004ce8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00c      	beq.n	8003fc6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2308      	movs	r3, #8
 8003fbc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003fbe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 ff79 	bl	8004eb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fdc:	461a      	mov	r2, r3
 8003fde:	2310      	movs	r3, #16
 8003fe0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d030      	beq.n	800404e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	695b      	ldr	r3, [r3, #20]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	2b80      	cmp	r3, #128	@ 0x80
 8003ff6:	d109      	bne.n	800400c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	69fa      	ldr	r2, [r7, #28]
 8004002:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800400a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800400c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800400e:	4613      	mov	r3, r2
 8004010:	00db      	lsls	r3, r3, #3
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	4413      	add	r3, r2
 800401e:	3304      	adds	r3, #4
 8004020:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	78db      	ldrb	r3, [r3, #3]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d108      	bne.n	800403c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	2200      	movs	r2, #0
 800402e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004032:	b2db      	uxtb	r3, r3
 8004034:	4619      	mov	r1, r3
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f006 ffac 	bl	800af94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	4413      	add	r3, r2
 8004044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004048:	461a      	mov	r2, r3
 800404a:	2302      	movs	r3, #2
 800404c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f003 0320 	and.w	r3, r3, #32
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004064:	461a      	mov	r2, r3
 8004066:	2320      	movs	r3, #32
 8004068:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d009      	beq.n	8004088 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004080:	461a      	mov	r2, r3
 8004082:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004086:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	3301      	adds	r3, #1
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800408e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004090:	085b      	lsrs	r3, r3, #1
 8004092:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004096:	2b00      	cmp	r3, #0
 8004098:	f47f af62 	bne.w	8003f60 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f004 fbb3 	bl	800880c <USB_ReadInterrupts>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040b0:	f040 80db 	bne.w	800426a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f004 fbd4 	bl	8008866 <USB_ReadDevAllInEpInterrupt>
 80040be:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80040c4:	e0cd      	b.n	8004262 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80040c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 80c2 	beq.w	8004256 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f004 fbfa 	bl	80088d6 <USB_ReadDevInEPInterrupt>
 80040e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d057      	beq.n	800419e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80040ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	2201      	movs	r2, #1
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	43db      	mvns	r3, r3
 8004108:	69f9      	ldr	r1, [r7, #28]
 800410a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800410e:	4013      	ands	r3, r2
 8004110:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800411e:	461a      	mov	r2, r3
 8004120:	2301      	movs	r3, #1
 8004122:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	799b      	ldrb	r3, [r3, #6]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d132      	bne.n	8004192 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	4413      	add	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	3320      	adds	r3, #32
 800413c:	6819      	ldr	r1, [r3, #0]
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4403      	add	r3, r0
 800414c:	331c      	adds	r3, #28
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4419      	add	r1, r3
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004156:	4613      	mov	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4403      	add	r3, r0
 8004160:	3320      	adds	r3, #32
 8004162:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	2b00      	cmp	r3, #0
 8004168:	d113      	bne.n	8004192 <HAL_PCD_IRQHandler+0x3a2>
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800416e:	4613      	mov	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4413      	add	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	3324      	adds	r3, #36	@ 0x24
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d108      	bne.n	8004192 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6818      	ldr	r0, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800418a:	461a      	mov	r2, r3
 800418c:	2101      	movs	r1, #1
 800418e:	f004 fc01 	bl	8008994 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	b2db      	uxtb	r3, r3
 8004196:	4619      	mov	r1, r3
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f006 fe76 	bl	800ae8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041b4:	461a      	mov	r2, r3
 80041b6:	2308      	movs	r3, #8
 80041b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d0:	461a      	mov	r2, r3
 80041d2:	2310      	movs	r3, #16
 80041d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80041e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041ec:	461a      	mov	r2, r3
 80041ee:	2340      	movs	r3, #64	@ 0x40
 80041f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d023      	beq.n	8004244 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80041fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041fe:	6a38      	ldr	r0, [r7, #32]
 8004200:	f003 fbe8 	bl	80079d4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004206:	4613      	mov	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	4413      	add	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	3310      	adds	r3, #16
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	4413      	add	r3, r2
 8004214:	3304      	adds	r3, #4
 8004216:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	78db      	ldrb	r3, [r3, #3]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d108      	bne.n	8004232 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	2200      	movs	r2, #0
 8004224:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	b2db      	uxtb	r3, r3
 800422a:	4619      	mov	r1, r3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f006 fec3 	bl	800afb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800423e:	461a      	mov	r2, r3
 8004240:	2302      	movs	r3, #2
 8004242:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800424e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f000 fcbd 	bl	8004bd0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	3301      	adds	r3, #1
 800425a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800425c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800425e:	085b      	lsrs	r3, r3, #1
 8004260:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	f47f af2e 	bne.w	80040c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f004 facc 	bl	800880c <USB_ReadInterrupts>
 8004274:	4603      	mov	r3, r0
 8004276:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800427a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800427e:	d122      	bne.n	80042c6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800429a:	2b01      	cmp	r3, #1
 800429c:	d108      	bne.n	80042b0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042a6:	2100      	movs	r1, #0
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 fea3 	bl	8004ff4 <HAL_PCDEx_LPM_Callback>
 80042ae:	e002      	b.n	80042b6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f006 fe61 	bl	800af78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695a      	ldr	r2, [r3, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80042c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f004 fa9e 	bl	800880c <USB_ReadInterrupts>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80042d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80042da:	d112      	bne.n	8004302 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d102      	bne.n	80042f2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f006 fe1d 	bl	800af2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695a      	ldr	r2, [r3, #20]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004300:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f004 fa80 	bl	800880c <USB_ReadInterrupts>
 800430c:	4603      	mov	r3, r0
 800430e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004316:	f040 80b7 	bne.w	8004488 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	69fa      	ldr	r2, [r7, #28]
 8004324:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2110      	movs	r1, #16
 8004334:	4618      	mov	r0, r3
 8004336:	f003 fb4d 	bl	80079d4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800433a:	2300      	movs	r3, #0
 800433c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800433e:	e046      	b.n	80043ce <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800434c:	461a      	mov	r2, r3
 800434e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004352:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004364:	0151      	lsls	r1, r2, #5
 8004366:	69fa      	ldr	r2, [r7, #28]
 8004368:	440a      	add	r2, r1
 800436a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800436e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004372:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004376:	015a      	lsls	r2, r3, #5
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	4413      	add	r3, r2
 800437c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004380:	461a      	mov	r2, r3
 8004382:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004386:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004398:	0151      	lsls	r1, r2, #5
 800439a:	69fa      	ldr	r2, [r7, #28]
 800439c:	440a      	add	r2, r1
 800439e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043a2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80043a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043b8:	0151      	lsls	r1, r2, #5
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	440a      	add	r2, r1
 80043be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ca:	3301      	adds	r3, #1
 80043cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	791b      	ldrb	r3, [r3, #4]
 80043d2:	461a      	mov	r2, r3
 80043d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d3b2      	bcc.n	8004340 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	69fa      	ldr	r2, [r7, #28]
 80043e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80043e8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80043ec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	7bdb      	ldrb	r3, [r3, #15]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d016      	beq.n	8004424 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004406:	f043 030b 	orr.w	r3, r3, #11
 800440a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800441c:	f043 030b 	orr.w	r3, r3, #11
 8004420:	6453      	str	r3, [r2, #68]	@ 0x44
 8004422:	e015      	b.n	8004450 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004432:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004436:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800443a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	69fa      	ldr	r2, [r7, #28]
 8004446:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800444a:	f043 030b 	orr.w	r3, r3, #11
 800444e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69fa      	ldr	r2, [r7, #28]
 800445a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800445e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004462:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004472:	461a      	mov	r2, r3
 8004474:	f004 fa8e 	bl	8008994 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004486:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f004 f9bd 	bl	800880c <USB_ReadInterrupts>
 8004492:	4603      	mov	r3, r0
 8004494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004498:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800449c:	d123      	bne.n	80044e6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f004 fa53 	bl	800894e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f003 fb0a 	bl	8007ac6 <USB_GetDevSpeed>
 80044b2:	4603      	mov	r3, r0
 80044b4:	461a      	mov	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681c      	ldr	r4, [r3, #0]
 80044be:	f001 f9c9 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 80044c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044c8:	461a      	mov	r2, r3
 80044ca:	4620      	mov	r0, r4
 80044cc:	f003 f80e 	bl	80074ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f006 fd02 	bl	800aeda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695a      	ldr	r2, [r3, #20]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80044e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f004 f98e 	bl	800880c <USB_ReadInterrupts>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b08      	cmp	r3, #8
 80044f8:	d10a      	bne.n	8004510 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f006 fcdf 	bl	800aebe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695a      	ldr	r2, [r3, #20]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f002 0208 	and.w	r2, r2, #8
 800450e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4618      	mov	r0, r3
 8004516:	f004 f979 	bl	800880c <USB_ReadInterrupts>
 800451a:	4603      	mov	r3, r0
 800451c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004520:	2b80      	cmp	r3, #128	@ 0x80
 8004522:	d123      	bne.n	800456c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800452c:	6a3b      	ldr	r3, [r7, #32]
 800452e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004530:	2301      	movs	r3, #1
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
 8004534:	e014      	b.n	8004560 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004536:	6879      	ldr	r1, [r7, #4]
 8004538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800453a:	4613      	mov	r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	4413      	add	r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d105      	bne.n	800455a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	b2db      	uxtb	r3, r3
 8004552:	4619      	mov	r1, r3
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f000 fb0a 	bl	8004b6e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	3301      	adds	r3, #1
 800455e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	791b      	ldrb	r3, [r3, #4]
 8004564:	461a      	mov	r2, r3
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	4293      	cmp	r3, r2
 800456a:	d3e4      	bcc.n	8004536 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f004 f94b 	bl	800880c <USB_ReadInterrupts>
 8004576:	4603      	mov	r3, r0
 8004578:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800457c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004580:	d13c      	bne.n	80045fc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004582:	2301      	movs	r3, #1
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
 8004586:	e02b      	b.n	80045e0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800459c:	4613      	mov	r3, r2
 800459e:	00db      	lsls	r3, r3, #3
 80045a0:	4413      	add	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	440b      	add	r3, r1
 80045a6:	3318      	adds	r3, #24
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d115      	bne.n	80045da <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80045ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	da12      	bge.n	80045da <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	3317      	adds	r3, #23
 80045c4:	2201      	movs	r2, #1
 80045c6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	4619      	mov	r1, r3
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 faca 	bl	8004b6e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	3301      	adds	r3, #1
 80045de:	627b      	str	r3, [r7, #36]	@ 0x24
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	791b      	ldrb	r3, [r3, #4]
 80045e4:	461a      	mov	r2, r3
 80045e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d3cd      	bcc.n	8004588 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80045fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f004 f903 	bl	800880c <USB_ReadInterrupts>
 8004606:	4603      	mov	r3, r0
 8004608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800460c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004610:	d156      	bne.n	80046c0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004612:	2301      	movs	r3, #1
 8004614:	627b      	str	r3, [r7, #36]	@ 0x24
 8004616:	e045      	b.n	80046a4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800462c:	4613      	mov	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d12e      	bne.n	800469e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004640:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004642:	2b00      	cmp	r3, #0
 8004644:	da2b      	bge.n	800469e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004652:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004656:	429a      	cmp	r2, r3
 8004658:	d121      	bne.n	800469e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800465e:	4613      	mov	r3, r2
 8004660:	00db      	lsls	r3, r3, #3
 8004662:	4413      	add	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800466c:	2201      	movs	r2, #1
 800466e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004670:	6a3b      	ldr	r3, [r7, #32]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10a      	bne.n	800469e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004696:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800469a:	6053      	str	r3, [r2, #4]
            break;
 800469c:	e008      	b.n	80046b0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	3301      	adds	r3, #1
 80046a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	791b      	ldrb	r3, [r3, #4]
 80046a8:	461a      	mov	r2, r3
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d3b3      	bcc.n	8004618 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80046be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f004 f8a1 	bl	800880c <USB_ReadInterrupts>
 80046ca:	4603      	mov	r3, r0
 80046cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80046d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046d4:	d10a      	bne.n	80046ec <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f006 fc80 	bl	800afdc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695a      	ldr	r2, [r3, #20]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80046ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f004 f88b 	bl	800880c <USB_ReadInterrupts>
 80046f6:	4603      	mov	r3, r0
 80046f8:	f003 0304 	and.w	r3, r3, #4
 80046fc:	2b04      	cmp	r3, #4
 80046fe:	d115      	bne.n	800472c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f006 fc70 	bl	800aff8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	430a      	orrs	r2, r1
 8004726:	605a      	str	r2, [r3, #4]
 8004728:	e000      	b.n	800472c <HAL_PCD_IRQHandler+0x93c>
      return;
 800472a:	bf00      	nop
    }
  }
}
 800472c:	3734      	adds	r7, #52	@ 0x34
 800472e:	46bd      	mov	sp, r7
 8004730:	bd90      	pop	{r4, r7, pc}

08004732 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b082      	sub	sp, #8
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	460b      	mov	r3, r1
 800473c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <HAL_PCD_SetAddress+0x1a>
 8004748:	2302      	movs	r3, #2
 800474a:	e012      	b.n	8004772 <HAL_PCD_SetAddress+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	78fa      	ldrb	r2, [r7, #3]
 8004760:	4611      	mov	r1, r2
 8004762:	4618      	mov	r0, r3
 8004764:	f003 ffea 	bl	800873c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b084      	sub	sp, #16
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	4608      	mov	r0, r1
 8004784:	4611      	mov	r1, r2
 8004786:	461a      	mov	r2, r3
 8004788:	4603      	mov	r3, r0
 800478a:	70fb      	strb	r3, [r7, #3]
 800478c:	460b      	mov	r3, r1
 800478e:	803b      	strh	r3, [r7, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004794:	2300      	movs	r3, #0
 8004796:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800479c:	2b00      	cmp	r3, #0
 800479e:	da0f      	bge.n	80047c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	f003 020f 	and.w	r2, r3, #15
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	3310      	adds	r3, #16
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	4413      	add	r3, r2
 80047b4:	3304      	adds	r3, #4
 80047b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2201      	movs	r2, #1
 80047bc:	705a      	strb	r2, [r3, #1]
 80047be:	e00f      	b.n	80047e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	f003 020f 	and.w	r2, r3, #15
 80047c6:	4613      	mov	r3, r2
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	4413      	add	r3, r2
 80047d6:	3304      	adds	r3, #4
 80047d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2200      	movs	r2, #0
 80047de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047e0:	78fb      	ldrb	r3, [r7, #3]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	b2da      	uxtb	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80047ec:	883b      	ldrh	r3, [r7, #0]
 80047ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	78ba      	ldrb	r2, [r7, #2]
 80047fa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	785b      	ldrb	r3, [r3, #1]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d004      	beq.n	800480e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800480e:	78bb      	ldrb	r3, [r7, #2]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d102      	bne.n	800481a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_PCD_EP_Open+0xae>
 8004824:	2302      	movs	r3, #2
 8004826:	e00e      	b.n	8004846 <HAL_PCD_EP_Open+0xcc>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68f9      	ldr	r1, [r7, #12]
 8004836:	4618      	mov	r0, r3
 8004838:	f003 f96a 	bl	8007b10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004844:	7afb      	ldrb	r3, [r7, #11]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b084      	sub	sp, #16
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	460b      	mov	r3, r1
 8004858:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800485a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800485e:	2b00      	cmp	r3, #0
 8004860:	da0f      	bge.n	8004882 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004862:	78fb      	ldrb	r3, [r7, #3]
 8004864:	f003 020f 	and.w	r2, r3, #15
 8004868:	4613      	mov	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	3310      	adds	r3, #16
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4413      	add	r3, r2
 8004876:	3304      	adds	r3, #4
 8004878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2201      	movs	r2, #1
 800487e:	705a      	strb	r2, [r3, #1]
 8004880:	e00f      	b.n	80048a2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004882:	78fb      	ldrb	r3, [r7, #3]
 8004884:	f003 020f 	and.w	r2, r3, #15
 8004888:	4613      	mov	r3, r2
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	4413      	add	r3, r2
 8004898:	3304      	adds	r3, #4
 800489a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80048a2:	78fb      	ldrb	r3, [r7, #3]
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	b2da      	uxtb	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_PCD_EP_Close+0x6e>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e00e      	b.n	80048da <HAL_PCD_EP_Close+0x8c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68f9      	ldr	r1, [r7, #12]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f003 f9a8 	bl	8007c20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}

080048e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b086      	sub	sp, #24
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	607a      	str	r2, [r7, #4]
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	460b      	mov	r3, r1
 80048f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048f2:	7afb      	ldrb	r3, [r7, #11]
 80048f4:	f003 020f 	and.w	r2, r3, #15
 80048f8:	4613      	mov	r3, r2
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	3304      	adds	r3, #4
 800490a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	2200      	movs	r2, #0
 800491c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	2200      	movs	r2, #0
 8004922:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004924:	7afb      	ldrb	r3, [r7, #11]
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	b2da      	uxtb	r2, r3
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	799b      	ldrb	r3, [r3, #6]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d102      	bne.n	800493e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6818      	ldr	r0, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	799b      	ldrb	r3, [r3, #6]
 8004946:	461a      	mov	r2, r3
 8004948:	6979      	ldr	r1, [r7, #20]
 800494a:	f003 fa45 	bl	8007dd8 <USB_EPStartXfer>

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3718      	adds	r7, #24
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	460b      	mov	r3, r1
 8004962:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004964:	78fb      	ldrb	r3, [r7, #3]
 8004966:	f003 020f 	and.w	r2, r3, #15
 800496a:	6879      	ldr	r1, [r7, #4]
 800496c:	4613      	mov	r3, r2
 800496e:	00db      	lsls	r3, r3, #3
 8004970:	4413      	add	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	440b      	add	r3, r1
 8004976:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800497a:	681b      	ldr	r3, [r3, #0]
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	460b      	mov	r3, r1
 8004996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004998:	7afb      	ldrb	r3, [r7, #11]
 800499a:	f003 020f 	and.w	r2, r3, #15
 800499e:	4613      	mov	r3, r2
 80049a0:	00db      	lsls	r3, r3, #3
 80049a2:	4413      	add	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	3310      	adds	r3, #16
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	3304      	adds	r3, #4
 80049ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2200      	movs	r2, #0
 80049c0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2201      	movs	r2, #1
 80049c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049c8:	7afb      	ldrb	r3, [r7, #11]
 80049ca:	f003 030f 	and.w	r3, r3, #15
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	799b      	ldrb	r3, [r3, #6]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d102      	bne.n	80049e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	799b      	ldrb	r3, [r3, #6]
 80049ea:	461a      	mov	r2, r3
 80049ec:	6979      	ldr	r1, [r7, #20]
 80049ee:	f003 f9f3 	bl	8007dd8 <USB_EPStartXfer>

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	7912      	ldrb	r2, [r2, #4]
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e04f      	b.n	8004aba <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	da0f      	bge.n	8004a42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	f003 020f 	and.w	r2, r3, #15
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	3310      	adds	r3, #16
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4413      	add	r3, r2
 8004a36:	3304      	adds	r3, #4
 8004a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	705a      	strb	r2, [r3, #1]
 8004a40:	e00d      	b.n	8004a5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	4613      	mov	r3, r2
 8004a46:	00db      	lsls	r3, r3, #3
 8004a48:	4413      	add	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	4413      	add	r3, r2
 8004a54:	3304      	adds	r3, #4
 8004a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_PCD_EP_SetStall+0x82>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e01d      	b.n	8004aba <HAL_PCD_EP_SetStall+0xbe>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68f9      	ldr	r1, [r7, #12]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f003 fd81 	bl	8008594 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a92:	78fb      	ldrb	r3, [r7, #3]
 8004a94:	f003 030f 	and.w	r3, r3, #15
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d109      	bne.n	8004ab0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	7999      	ldrb	r1, [r3, #6]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f003 ff72 	bl	8008994 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b084      	sub	sp, #16
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	460b      	mov	r3, r1
 8004acc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	7912      	ldrb	r2, [r2, #4]
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e042      	b.n	8004b66 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ae0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	da0f      	bge.n	8004b08 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	f003 020f 	and.w	r2, r3, #15
 8004aee:	4613      	mov	r3, r2
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	3310      	adds	r3, #16
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	4413      	add	r3, r2
 8004afc:	3304      	adds	r3, #4
 8004afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2201      	movs	r2, #1
 8004b04:	705a      	strb	r2, [r3, #1]
 8004b06:	e00f      	b.n	8004b28 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	f003 020f 	and.w	r2, r3, #15
 8004b0e:	4613      	mov	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	3304      	adds	r3, #4
 8004b20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	f003 030f 	and.w	r3, r3, #15
 8004b34:	b2da      	uxtb	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_PCD_EP_ClrStall+0x86>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e00e      	b.n	8004b66 <HAL_PCD_EP_ClrStall+0xa4>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68f9      	ldr	r1, [r7, #12]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f003 fd8a 	bl	8008670 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
 8004b76:	460b      	mov	r3, r1
 8004b78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	da0c      	bge.n	8004b9c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b82:	78fb      	ldrb	r3, [r7, #3]
 8004b84:	f003 020f 	and.w	r2, r3, #15
 8004b88:	4613      	mov	r3, r2
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	3310      	adds	r3, #16
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	4413      	add	r3, r2
 8004b96:	3304      	adds	r3, #4
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	e00c      	b.n	8004bb6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b9c:	78fb      	ldrb	r3, [r7, #3]
 8004b9e:	f003 020f 	and.w	r2, r3, #15
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68f9      	ldr	r1, [r7, #12]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f003 fba9 	bl	8008314 <USB_EPStopXfer>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004bc6:	7afb      	ldrb	r3, [r7, #11]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	@ 0x28
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	4613      	mov	r3, r2
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	3310      	adds	r3, #16
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	695a      	ldr	r2, [r3, #20]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d901      	bls.n	8004c08 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e06b      	b.n	8004ce0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d902      	bls.n	8004c24 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	3303      	adds	r3, #3
 8004c28:	089b      	lsrs	r3, r3, #2
 8004c2a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c2c:	e02a      	b.n	8004c84 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	69fa      	ldr	r2, [r7, #28]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d902      	bls.n	8004c4a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	3303      	adds	r3, #3
 8004c4e:	089b      	lsrs	r3, r3, #2
 8004c50:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68d9      	ldr	r1, [r3, #12]
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004c62:	9300      	str	r3, [sp, #0]
 8004c64:	4603      	mov	r3, r0
 8004c66:	6978      	ldr	r0, [r7, #20]
 8004c68:	f003 fbfe 	bl	8008468 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68da      	ldr	r2, [r3, #12]
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	441a      	add	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	441a      	add	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d809      	bhi.n	8004cae <PCD_WriteEmptyTxFifo+0xde>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d203      	bcs.n	8004cae <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1bf      	bne.n	8004c2e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d811      	bhi.n	8004cde <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	6939      	ldr	r1, [r7, #16]
 8004cd6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004cda:	4013      	ands	r3, r2
 8004cdc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3720      	adds	r7, #32
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	333c      	adds	r3, #60	@ 0x3c
 8004d00:	3304      	adds	r3, #4
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	015a      	lsls	r2, r3, #5
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	799b      	ldrb	r3, [r3, #6]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d17b      	bne.n	8004e16 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f003 0308 	and.w	r3, r3, #8
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d015      	beq.n	8004d54 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	4a61      	ldr	r2, [pc, #388]	@ (8004eb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	f240 80b9 	bls.w	8004ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80b3 	beq.w	8004ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	015a      	lsls	r2, r3, #5
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	4413      	add	r3, r2
 8004d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d50:	6093      	str	r3, [r2, #8]
 8004d52:	e0a7      	b.n	8004ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d009      	beq.n	8004d72 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	2320      	movs	r3, #32
 8004d6e:	6093      	str	r3, [r2, #8]
 8004d70:	e098      	b.n	8004ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f040 8093 	bne.w	8004ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	4a4b      	ldr	r2, [pc, #300]	@ (8004eb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d90f      	bls.n	8004da6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004da2:	6093      	str	r3, [r2, #8]
 8004da4:	e07e      	b.n	8004ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	4413      	add	r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	4413      	add	r3, r2
 8004db8:	3304      	adds	r3, #4
 8004dba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a1a      	ldr	r2, [r3, #32]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	0159      	lsls	r1, r3, #5
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	440b      	add	r3, r1
 8004dc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dd2:	1ad2      	subs	r2, r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d114      	bne.n	8004e08 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d109      	bne.n	8004dfa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6818      	ldr	r0, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004df0:	461a      	mov	r2, r3
 8004df2:	2101      	movs	r1, #1
 8004df4:	f003 fdce 	bl	8008994 <USB_EP0_OutStart>
 8004df8:	e006      	b.n	8004e08 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	441a      	add	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f006 f820 	bl	800ae54 <HAL_PCD_DataOutStageCallback>
 8004e14:	e046      	b.n	8004ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	4a26      	ldr	r2, [pc, #152]	@ (8004eb4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d124      	bne.n	8004e68 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e34:	461a      	mov	r2, r3
 8004e36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e3a:	6093      	str	r3, [r2, #8]
 8004e3c:	e032      	b.n	8004ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f003 0320 	and.w	r3, r3, #32
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d008      	beq.n	8004e5a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	015a      	lsls	r2, r3, #5
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	4413      	add	r3, r2
 8004e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e54:	461a      	mov	r2, r3
 8004e56:	2320      	movs	r3, #32
 8004e58:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	4619      	mov	r1, r3
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f005 fff7 	bl	800ae54 <HAL_PCD_DataOutStageCallback>
 8004e66:	e01d      	b.n	8004ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d114      	bne.n	8004e98 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	4613      	mov	r3, r2
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d108      	bne.n	8004e98 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6818      	ldr	r0, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004e90:	461a      	mov	r2, r3
 8004e92:	2100      	movs	r1, #0
 8004e94:	f003 fd7e 	bl	8008994 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f005 ffd8 	bl	800ae54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	4f54300a 	.word	0x4f54300a
 8004eb4:	4f54310a 	.word	0x4f54310a

08004eb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	333c      	adds	r3, #60	@ 0x3c
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4a15      	ldr	r2, [pc, #84]	@ (8004f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d90e      	bls.n	8004f0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d009      	beq.n	8004f0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f04:	461a      	mov	r2, r3
 8004f06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f005 ff8f 	bl	800ae30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	4a0a      	ldr	r2, [pc, #40]	@ (8004f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d90c      	bls.n	8004f34 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	799b      	ldrb	r3, [r3, #6]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d108      	bne.n	8004f34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	2101      	movs	r1, #1
 8004f30:	f003 fd30 	bl	8008994 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	4f54300a 	.word	0x4f54300a

08004f44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	70fb      	strb	r3, [r7, #3]
 8004f50:	4613      	mov	r3, r2
 8004f52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f5c:	78fb      	ldrb	r3, [r7, #3]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d107      	bne.n	8004f72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f62:	883b      	ldrh	r3, [r7, #0]
 8004f64:	0419      	lsls	r1, r3, #16
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f70:	e028      	b.n	8004fc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f78:	0c1b      	lsrs	r3, r3, #16
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f80:	2300      	movs	r3, #0
 8004f82:	73fb      	strb	r3, [r7, #15]
 8004f84:	e00d      	b.n	8004fa2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	3340      	adds	r3, #64	@ 0x40
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	4413      	add	r3, r2
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	0c1b      	lsrs	r3, r3, #16
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	4413      	add	r3, r2
 8004f9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	73fb      	strb	r3, [r7, #15]
 8004fa2:	7bfa      	ldrb	r2, [r7, #15]
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d3ec      	bcc.n	8004f86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004fac:	883b      	ldrh	r3, [r7, #0]
 8004fae:	0418      	lsls	r0, r3, #16
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6819      	ldr	r1, [r3, #0]
 8004fb4:	78fb      	ldrb	r3, [r7, #3]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	4302      	orrs	r2, r0
 8004fbc:	3340      	adds	r3, #64	@ 0x40
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	440b      	add	r3, r1
 8004fc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	887a      	ldrh	r2, [r7, #2]
 8004fe4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e267      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b00      	cmp	r3, #0
 8005028:	d075      	beq.n	8005116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800502a:	4b88      	ldr	r3, [pc, #544]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
 8005032:	2b04      	cmp	r3, #4
 8005034:	d00c      	beq.n	8005050 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005036:	4b85      	ldr	r3, [pc, #532]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800503e:	2b08      	cmp	r3, #8
 8005040:	d112      	bne.n	8005068 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005042:	4b82      	ldr	r3, [pc, #520]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800504a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800504e:	d10b      	bne.n	8005068 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005050:	4b7e      	ldr	r3, [pc, #504]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d05b      	beq.n	8005114 <HAL_RCC_OscConfig+0x108>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d157      	bne.n	8005114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e242      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005070:	d106      	bne.n	8005080 <HAL_RCC_OscConfig+0x74>
 8005072:	4b76      	ldr	r3, [pc, #472]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a75      	ldr	r2, [pc, #468]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	e01d      	b.n	80050bc <HAL_RCC_OscConfig+0xb0>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005088:	d10c      	bne.n	80050a4 <HAL_RCC_OscConfig+0x98>
 800508a:	4b70      	ldr	r3, [pc, #448]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a6f      	ldr	r2, [pc, #444]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005090:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	4b6d      	ldr	r3, [pc, #436]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a6c      	ldr	r2, [pc, #432]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050a0:	6013      	str	r3, [r2, #0]
 80050a2:	e00b      	b.n	80050bc <HAL_RCC_OscConfig+0xb0>
 80050a4:	4b69      	ldr	r3, [pc, #420]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a68      	ldr	r2, [pc, #416]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	4b66      	ldr	r3, [pc, #408]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a65      	ldr	r2, [pc, #404]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d013      	beq.n	80050ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c4:	f7fd f96e 	bl	80023a4 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050cc:	f7fd f96a 	bl	80023a4 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b64      	cmp	r3, #100	@ 0x64
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e207      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050de:	4b5b      	ldr	r3, [pc, #364]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d0f0      	beq.n	80050cc <HAL_RCC_OscConfig+0xc0>
 80050ea:	e014      	b.n	8005116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ec:	f7fd f95a 	bl	80023a4 <HAL_GetTick>
 80050f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050f2:	e008      	b.n	8005106 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050f4:	f7fd f956 	bl	80023a4 <HAL_GetTick>
 80050f8:	4602      	mov	r2, r0
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	2b64      	cmp	r3, #100	@ 0x64
 8005100:	d901      	bls.n	8005106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e1f3      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005106:	4b51      	ldr	r3, [pc, #324]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f0      	bne.n	80050f4 <HAL_RCC_OscConfig+0xe8>
 8005112:	e000      	b.n	8005116 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d063      	beq.n	80051ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005122:	4b4a      	ldr	r3, [pc, #296]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800512e:	4b47      	ldr	r3, [pc, #284]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005136:	2b08      	cmp	r3, #8
 8005138:	d11c      	bne.n	8005174 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800513a:	4b44      	ldr	r3, [pc, #272]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d116      	bne.n	8005174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005146:	4b41      	ldr	r3, [pc, #260]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_RCC_OscConfig+0x152>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d001      	beq.n	800515e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e1c7      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800515e:	4b3b      	ldr	r3, [pc, #236]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4937      	ldr	r1, [pc, #220]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005172:	e03a      	b.n	80051ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d020      	beq.n	80051be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800517c:	4b34      	ldr	r3, [pc, #208]	@ (8005250 <HAL_RCC_OscConfig+0x244>)
 800517e:	2201      	movs	r2, #1
 8005180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005182:	f7fd f90f 	bl	80023a4 <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800518a:	f7fd f90b 	bl	80023a4 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e1a8      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800519c:	4b2b      	ldr	r3, [pc, #172]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0f0      	beq.n	800518a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a8:	4b28      	ldr	r3, [pc, #160]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	4925      	ldr	r1, [pc, #148]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	600b      	str	r3, [r1, #0]
 80051bc:	e015      	b.n	80051ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051be:	4b24      	ldr	r3, [pc, #144]	@ (8005250 <HAL_RCC_OscConfig+0x244>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c4:	f7fd f8ee 	bl	80023a4 <HAL_GetTick>
 80051c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ca:	e008      	b.n	80051de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051cc:	f7fd f8ea 	bl	80023a4 <HAL_GetTick>
 80051d0:	4602      	mov	r2, r0
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d901      	bls.n	80051de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e187      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051de:	4b1b      	ldr	r3, [pc, #108]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1f0      	bne.n	80051cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0308 	and.w	r3, r3, #8
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d036      	beq.n	8005264 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d016      	beq.n	800522c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051fe:	4b15      	ldr	r3, [pc, #84]	@ (8005254 <HAL_RCC_OscConfig+0x248>)
 8005200:	2201      	movs	r2, #1
 8005202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005204:	f7fd f8ce 	bl	80023a4 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800520a:	e008      	b.n	800521e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800520c:	f7fd f8ca 	bl	80023a4 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	2b02      	cmp	r3, #2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e167      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800521e:	4b0b      	ldr	r3, [pc, #44]	@ (800524c <HAL_RCC_OscConfig+0x240>)
 8005220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0f0      	beq.n	800520c <HAL_RCC_OscConfig+0x200>
 800522a:	e01b      	b.n	8005264 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800522c:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <HAL_RCC_OscConfig+0x248>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005232:	f7fd f8b7 	bl	80023a4 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005238:	e00e      	b.n	8005258 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800523a:	f7fd f8b3 	bl	80023a4 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d907      	bls.n	8005258 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e150      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
 800524c:	40023800 	.word	0x40023800
 8005250:	42470000 	.word	0x42470000
 8005254:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005258:	4b88      	ldr	r3, [pc, #544]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800525a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1ea      	bne.n	800523a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 8097 	beq.w	80053a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005272:	2300      	movs	r3, #0
 8005274:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005276:	4b81      	ldr	r3, [pc, #516]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10f      	bne.n	80052a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
 8005286:	4b7d      	ldr	r3, [pc, #500]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	4a7c      	ldr	r2, [pc, #496]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800528c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005290:	6413      	str	r3, [r2, #64]	@ 0x40
 8005292:	4b7a      	ldr	r3, [pc, #488]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005296:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800529a:	60bb      	str	r3, [r7, #8]
 800529c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800529e:	2301      	movs	r3, #1
 80052a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a2:	4b77      	ldr	r3, [pc, #476]	@ (8005480 <HAL_RCC_OscConfig+0x474>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d118      	bne.n	80052e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052ae:	4b74      	ldr	r3, [pc, #464]	@ (8005480 <HAL_RCC_OscConfig+0x474>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a73      	ldr	r2, [pc, #460]	@ (8005480 <HAL_RCC_OscConfig+0x474>)
 80052b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ba:	f7fd f873 	bl	80023a4 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c2:	f7fd f86f 	bl	80023a4 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e10c      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052d4:	4b6a      	ldr	r3, [pc, #424]	@ (8005480 <HAL_RCC_OscConfig+0x474>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0f0      	beq.n	80052c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d106      	bne.n	80052f6 <HAL_RCC_OscConfig+0x2ea>
 80052e8:	4b64      	ldr	r3, [pc, #400]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 80052ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ec:	4a63      	ldr	r2, [pc, #396]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 80052ee:	f043 0301 	orr.w	r3, r3, #1
 80052f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052f4:	e01c      	b.n	8005330 <HAL_RCC_OscConfig+0x324>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d10c      	bne.n	8005318 <HAL_RCC_OscConfig+0x30c>
 80052fe:	4b5f      	ldr	r3, [pc, #380]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005302:	4a5e      	ldr	r2, [pc, #376]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005304:	f043 0304 	orr.w	r3, r3, #4
 8005308:	6713      	str	r3, [r2, #112]	@ 0x70
 800530a:	4b5c      	ldr	r3, [pc, #368]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800530c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800530e:	4a5b      	ldr	r2, [pc, #364]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005310:	f043 0301 	orr.w	r3, r3, #1
 8005314:	6713      	str	r3, [r2, #112]	@ 0x70
 8005316:	e00b      	b.n	8005330 <HAL_RCC_OscConfig+0x324>
 8005318:	4b58      	ldr	r3, [pc, #352]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800531a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531c:	4a57      	ldr	r2, [pc, #348]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800531e:	f023 0301 	bic.w	r3, r3, #1
 8005322:	6713      	str	r3, [r2, #112]	@ 0x70
 8005324:	4b55      	ldr	r3, [pc, #340]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005328:	4a54      	ldr	r2, [pc, #336]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800532a:	f023 0304 	bic.w	r3, r3, #4
 800532e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d015      	beq.n	8005364 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005338:	f7fd f834 	bl	80023a4 <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800533e:	e00a      	b.n	8005356 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005340:	f7fd f830 	bl	80023a4 <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e0cb      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005356:	4b49      	ldr	r3, [pc, #292]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0ee      	beq.n	8005340 <HAL_RCC_OscConfig+0x334>
 8005362:	e014      	b.n	800538e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005364:	f7fd f81e 	bl	80023a4 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800536a:	e00a      	b.n	8005382 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800536c:	f7fd f81a 	bl	80023a4 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800537a:	4293      	cmp	r3, r2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e0b5      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005382:	4b3e      	ldr	r3, [pc, #248]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1ee      	bne.n	800536c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800538e:	7dfb      	ldrb	r3, [r7, #23]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d105      	bne.n	80053a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005394:	4b39      	ldr	r3, [pc, #228]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005398:	4a38      	ldr	r2, [pc, #224]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 800539a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800539e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80a1 	beq.w	80054ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053aa:	4b34      	ldr	r3, [pc, #208]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d05c      	beq.n	8005470 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d141      	bne.n	8005442 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053be:	4b31      	ldr	r3, [pc, #196]	@ (8005484 <HAL_RCC_OscConfig+0x478>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c4:	f7fc ffee 	bl	80023a4 <HAL_GetTick>
 80053c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ca:	e008      	b.n	80053de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053cc:	f7fc ffea 	bl	80023a4 <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e087      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053de:	4b27      	ldr	r3, [pc, #156]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f0      	bne.n	80053cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	431a      	orrs	r2, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f8:	019b      	lsls	r3, r3, #6
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005400:	085b      	lsrs	r3, r3, #1
 8005402:	3b01      	subs	r3, #1
 8005404:	041b      	lsls	r3, r3, #16
 8005406:	431a      	orrs	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540c:	061b      	lsls	r3, r3, #24
 800540e:	491b      	ldr	r1, [pc, #108]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005410:	4313      	orrs	r3, r2
 8005412:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005414:	4b1b      	ldr	r3, [pc, #108]	@ (8005484 <HAL_RCC_OscConfig+0x478>)
 8005416:	2201      	movs	r2, #1
 8005418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800541a:	f7fc ffc3 	bl	80023a4 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005420:	e008      	b.n	8005434 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005422:	f7fc ffbf 	bl	80023a4 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d901      	bls.n	8005434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e05c      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005434:	4b11      	ldr	r3, [pc, #68]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d0f0      	beq.n	8005422 <HAL_RCC_OscConfig+0x416>
 8005440:	e054      	b.n	80054ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005442:	4b10      	ldr	r3, [pc, #64]	@ (8005484 <HAL_RCC_OscConfig+0x478>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005448:	f7fc ffac 	bl	80023a4 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005450:	f7fc ffa8 	bl	80023a4 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e045      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005462:	4b06      	ldr	r3, [pc, #24]	@ (800547c <HAL_RCC_OscConfig+0x470>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <HAL_RCC_OscConfig+0x444>
 800546e:	e03d      	b.n	80054ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	699b      	ldr	r3, [r3, #24]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d107      	bne.n	8005488 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e038      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
 800547c:	40023800 	.word	0x40023800
 8005480:	40007000 	.word	0x40007000
 8005484:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005488:	4b1b      	ldr	r3, [pc, #108]	@ (80054f8 <HAL_RCC_OscConfig+0x4ec>)
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d028      	beq.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d121      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d11a      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054b8:	4013      	ands	r3, r2
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d111      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ce:	085b      	lsrs	r3, r3, #1
 80054d0:	3b01      	subs	r3, #1
 80054d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d107      	bne.n	80054e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e000      	b.n	80054ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	40023800 	.word	0x40023800

080054fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e0cc      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005510:	4b68      	ldr	r3, [pc, #416]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d90c      	bls.n	8005538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800551e:	4b65      	ldr	r3, [pc, #404]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005520:	683a      	ldr	r2, [r7, #0]
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005526:	4b63      	ldr	r3, [pc, #396]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	d001      	beq.n	8005538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e0b8      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d020      	beq.n	8005586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005550:	4b59      	ldr	r3, [pc, #356]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	4a58      	ldr	r2, [pc, #352]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005556:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800555a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005568:	4b53      	ldr	r3, [pc, #332]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	4a52      	ldr	r2, [pc, #328]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800556e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005574:	4b50      	ldr	r3, [pc, #320]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	494d      	ldr	r1, [pc, #308]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	4313      	orrs	r3, r2
 8005584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d044      	beq.n	800561c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d107      	bne.n	80055aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800559a:	4b47      	ldr	r3, [pc, #284]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d119      	bne.n	80055da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e07f      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d003      	beq.n	80055ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d107      	bne.n	80055ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ba:	4b3f      	ldr	r3, [pc, #252]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e06f      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055ca:	4b3b      	ldr	r3, [pc, #236]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e067      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055da:	4b37      	ldr	r3, [pc, #220]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f023 0203 	bic.w	r2, r3, #3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	4934      	ldr	r1, [pc, #208]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055ec:	f7fc feda 	bl	80023a4 <HAL_GetTick>
 80055f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f2:	e00a      	b.n	800560a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055f4:	f7fc fed6 	bl	80023a4 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	1ad3      	subs	r3, r2, r3
 80055fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005602:	4293      	cmp	r3, r2
 8005604:	d901      	bls.n	800560a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e04f      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800560a:	4b2b      	ldr	r3, [pc, #172]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 020c 	and.w	r2, r3, #12
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	429a      	cmp	r2, r3
 800561a:	d1eb      	bne.n	80055f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800561c:	4b25      	ldr	r3, [pc, #148]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d20c      	bcs.n	8005644 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562a:	4b22      	ldr	r3, [pc, #136]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 800562c:	683a      	ldr	r2, [r7, #0]
 800562e:	b2d2      	uxtb	r2, r2
 8005630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005632:	4b20      	ldr	r3, [pc, #128]	@ (80056b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d001      	beq.n	8005644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e032      	b.n	80056aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005650:	4b19      	ldr	r3, [pc, #100]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4916      	ldr	r1, [pc, #88]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800565e:	4313      	orrs	r3, r2
 8005660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800566e:	4b12      	ldr	r3, [pc, #72]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	490e      	ldr	r1, [pc, #56]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	4313      	orrs	r3, r2
 8005680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005682:	f000 f821 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8005686:	4602      	mov	r2, r0
 8005688:	4b0b      	ldr	r3, [pc, #44]	@ (80056b8 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	091b      	lsrs	r3, r3, #4
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	490a      	ldr	r1, [pc, #40]	@ (80056bc <HAL_RCC_ClockConfig+0x1c0>)
 8005694:	5ccb      	ldrb	r3, [r1, r3]
 8005696:	fa22 f303 	lsr.w	r3, r2, r3
 800569a:	4a09      	ldr	r2, [pc, #36]	@ (80056c0 <HAL_RCC_ClockConfig+0x1c4>)
 800569c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800569e:	4b09      	ldr	r3, [pc, #36]	@ (80056c4 <HAL_RCC_ClockConfig+0x1c8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fc fe3a 	bl	800231c <HAL_InitTick>

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40023c00 	.word	0x40023c00
 80056b8:	40023800 	.word	0x40023800
 80056bc:	0800fb00 	.word	0x0800fb00
 80056c0:	20000008 	.word	0x20000008
 80056c4:	2000000c 	.word	0x2000000c

080056c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056cc:	b090      	sub	sp, #64	@ 0x40
 80056ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80056d4:	2300      	movs	r3, #0
 80056d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80056d8:	2300      	movs	r3, #0
 80056da:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056e0:	4b59      	ldr	r3, [pc, #356]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x180>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 030c 	and.w	r3, r3, #12
 80056e8:	2b08      	cmp	r3, #8
 80056ea:	d00d      	beq.n	8005708 <HAL_RCC_GetSysClockFreq+0x40>
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	f200 80a1 	bhi.w	8005834 <HAL_RCC_GetSysClockFreq+0x16c>
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d002      	beq.n	80056fc <HAL_RCC_GetSysClockFreq+0x34>
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	d003      	beq.n	8005702 <HAL_RCC_GetSysClockFreq+0x3a>
 80056fa:	e09b      	b.n	8005834 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056fc:	4b53      	ldr	r3, [pc, #332]	@ (800584c <HAL_RCC_GetSysClockFreq+0x184>)
 80056fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005700:	e09b      	b.n	800583a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005702:	4b53      	ldr	r3, [pc, #332]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x188>)
 8005704:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005706:	e098      	b.n	800583a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005708:	4b4f      	ldr	r3, [pc, #316]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x180>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005710:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005712:	4b4d      	ldr	r3, [pc, #308]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x180>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d028      	beq.n	8005770 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800571e:	4b4a      	ldr	r3, [pc, #296]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x180>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	099b      	lsrs	r3, r3, #6
 8005724:	2200      	movs	r2, #0
 8005726:	623b      	str	r3, [r7, #32]
 8005728:	627a      	str	r2, [r7, #36]	@ 0x24
 800572a:	6a3b      	ldr	r3, [r7, #32]
 800572c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005730:	2100      	movs	r1, #0
 8005732:	4b47      	ldr	r3, [pc, #284]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x188>)
 8005734:	fb03 f201 	mul.w	r2, r3, r1
 8005738:	2300      	movs	r3, #0
 800573a:	fb00 f303 	mul.w	r3, r0, r3
 800573e:	4413      	add	r3, r2
 8005740:	4a43      	ldr	r2, [pc, #268]	@ (8005850 <HAL_RCC_GetSysClockFreq+0x188>)
 8005742:	fba0 1202 	umull	r1, r2, r0, r2
 8005746:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005748:	460a      	mov	r2, r1
 800574a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800574c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800574e:	4413      	add	r3, r2
 8005750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005754:	2200      	movs	r2, #0
 8005756:	61bb      	str	r3, [r7, #24]
 8005758:	61fa      	str	r2, [r7, #28]
 800575a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800575e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005762:	f7fb fa99 	bl	8000c98 <__aeabi_uldivmod>
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	4613      	mov	r3, r2
 800576c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800576e:	e053      	b.n	8005818 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005770:	4b35      	ldr	r3, [pc, #212]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x180>)
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	099b      	lsrs	r3, r3, #6
 8005776:	2200      	movs	r2, #0
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	617a      	str	r2, [r7, #20]
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005782:	f04f 0b00 	mov.w	fp, #0
 8005786:	4652      	mov	r2, sl
 8005788:	465b      	mov	r3, fp
 800578a:	f04f 0000 	mov.w	r0, #0
 800578e:	f04f 0100 	mov.w	r1, #0
 8005792:	0159      	lsls	r1, r3, #5
 8005794:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005798:	0150      	lsls	r0, r2, #5
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	ebb2 080a 	subs.w	r8, r2, sl
 80057a2:	eb63 090b 	sbc.w	r9, r3, fp
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057ba:	ebb2 0408 	subs.w	r4, r2, r8
 80057be:	eb63 0509 	sbc.w	r5, r3, r9
 80057c2:	f04f 0200 	mov.w	r2, #0
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	00eb      	lsls	r3, r5, #3
 80057cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057d0:	00e2      	lsls	r2, r4, #3
 80057d2:	4614      	mov	r4, r2
 80057d4:	461d      	mov	r5, r3
 80057d6:	eb14 030a 	adds.w	r3, r4, sl
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	eb45 030b 	adc.w	r3, r5, fp
 80057e0:	607b      	str	r3, [r7, #4]
 80057e2:	f04f 0200 	mov.w	r2, #0
 80057e6:	f04f 0300 	mov.w	r3, #0
 80057ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80057ee:	4629      	mov	r1, r5
 80057f0:	028b      	lsls	r3, r1, #10
 80057f2:	4621      	mov	r1, r4
 80057f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80057f8:	4621      	mov	r1, r4
 80057fa:	028a      	lsls	r2, r1, #10
 80057fc:	4610      	mov	r0, r2
 80057fe:	4619      	mov	r1, r3
 8005800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005802:	2200      	movs	r2, #0
 8005804:	60bb      	str	r3, [r7, #8]
 8005806:	60fa      	str	r2, [r7, #12]
 8005808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800580c:	f7fb fa44 	bl	8000c98 <__aeabi_uldivmod>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	4613      	mov	r3, r2
 8005816:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005818:	4b0b      	ldr	r3, [pc, #44]	@ (8005848 <HAL_RCC_GetSysClockFreq+0x180>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	0c1b      	lsrs	r3, r3, #16
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	3301      	adds	r3, #1
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005828:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800582a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800582c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005830:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005832:	e002      	b.n	800583a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005834:	4b05      	ldr	r3, [pc, #20]	@ (800584c <HAL_RCC_GetSysClockFreq+0x184>)
 8005836:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005838:	bf00      	nop
    }
  }
  return sysclockfreq;
 800583a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800583c:	4618      	mov	r0, r3
 800583e:	3740      	adds	r7, #64	@ 0x40
 8005840:	46bd      	mov	sp, r7
 8005842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005846:	bf00      	nop
 8005848:	40023800 	.word	0x40023800
 800584c:	00f42400 	.word	0x00f42400
 8005850:	017d7840 	.word	0x017d7840

08005854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005854:	b480      	push	{r7}
 8005856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005858:	4b03      	ldr	r3, [pc, #12]	@ (8005868 <HAL_RCC_GetHCLKFreq+0x14>)
 800585a:	681b      	ldr	r3, [r3, #0]
}
 800585c:	4618      	mov	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	20000008 	.word	0x20000008

0800586c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005870:	f7ff fff0 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 8005874:	4602      	mov	r2, r0
 8005876:	4b05      	ldr	r3, [pc, #20]	@ (800588c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	0a9b      	lsrs	r3, r3, #10
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	4903      	ldr	r1, [pc, #12]	@ (8005890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005882:	5ccb      	ldrb	r3, [r1, r3]
 8005884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005888:	4618      	mov	r0, r3
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40023800 	.word	0x40023800
 8005890:	0800fb10 	.word	0x0800fb10

08005894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005898:	f7ff ffdc 	bl	8005854 <HAL_RCC_GetHCLKFreq>
 800589c:	4602      	mov	r2, r0
 800589e:	4b05      	ldr	r3, [pc, #20]	@ (80058b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	0b5b      	lsrs	r3, r3, #13
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	4903      	ldr	r1, [pc, #12]	@ (80058b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058aa:	5ccb      	ldrb	r3, [r1, r3]
 80058ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	40023800 	.word	0x40023800
 80058b8:	0800fb10 	.word	0x0800fb10

080058bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e041      	b.n	8005952 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fc f9fe 	bl	8001ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	4619      	mov	r1, r3
 80058fa:	4610      	mov	r0, r2
 80058fc:	f000 fa70 	bl	8005de0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
	...

0800595c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b01      	cmp	r3, #1
 800596e:	d001      	beq.n	8005974 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e044      	b.n	80059fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2202      	movs	r2, #2
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 0201 	orr.w	r2, r2, #1
 800598a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a1e      	ldr	r2, [pc, #120]	@ (8005a0c <HAL_TIM_Base_Start_IT+0xb0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d018      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x6c>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800599e:	d013      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x6c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005a10 <HAL_TIM_Base_Start_IT+0xb4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00e      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x6c>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a19      	ldr	r2, [pc, #100]	@ (8005a14 <HAL_TIM_Base_Start_IT+0xb8>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d009      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x6c>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a17      	ldr	r2, [pc, #92]	@ (8005a18 <HAL_TIM_Base_Start_IT+0xbc>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <HAL_TIM_Base_Start_IT+0x6c>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a16      	ldr	r2, [pc, #88]	@ (8005a1c <HAL_TIM_Base_Start_IT+0xc0>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d111      	bne.n	80059ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b06      	cmp	r3, #6
 80059d8:	d010      	beq.n	80059fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f042 0201 	orr.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ea:	e007      	b.n	80059fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0201 	orr.w	r2, r2, #1
 80059fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40010000 	.word	0x40010000
 8005a10:	40000400 	.word	0x40000400
 8005a14:	40000800 	.word	0x40000800
 8005a18:	40000c00 	.word	0x40000c00
 8005a1c:	40014000 	.word	0x40014000

08005a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d020      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 0302 	and.w	r3, r3, #2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01b      	beq.n	8005a84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0202 	mvn.w	r2, #2
 8005a54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f999 	bl	8005da2 <HAL_TIM_IC_CaptureCallback>
 8005a70:	e005      	b.n	8005a7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f98b 	bl	8005d8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f99c 	bl	8005db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 0304 	and.w	r3, r3, #4
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d020      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01b      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0204 	mvn.w	r2, #4
 8005aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f973 	bl	8005da2 <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f965 	bl	8005d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f976 	bl	8005db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d020      	beq.n	8005b1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d01b      	beq.n	8005b1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0208 	mvn.w	r2, #8
 8005aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2204      	movs	r2, #4
 8005af2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	f003 0303 	and.w	r3, r3, #3
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d003      	beq.n	8005b0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 f94d 	bl	8005da2 <HAL_TIM_IC_CaptureCallback>
 8005b08:	e005      	b.n	8005b16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f93f 	bl	8005d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 f950 	bl	8005db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	f003 0310 	and.w	r3, r3, #16
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d020      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d01b      	beq.n	8005b68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0210 	mvn.w	r2, #16
 8005b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f927 	bl	8005da2 <HAL_TIM_IC_CaptureCallback>
 8005b54:	e005      	b.n	8005b62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f919 	bl	8005d8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f92a 	bl	8005db6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	f003 0301 	and.w	r3, r3, #1
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00c      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d007      	beq.n	8005b8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f06f 0201 	mvn.w	r2, #1
 8005b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fb fa34 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00c      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d007      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fa48 	bl	8006040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00c      	beq.n	8005bd4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f8fb 	bl	8005dca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f003 0320 	and.w	r3, r3, #32
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00c      	beq.n	8005bf8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f003 0320 	and.w	r3, r3, #32
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d007      	beq.n	8005bf8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f06f 0220 	mvn.w	r2, #32
 8005bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 fa1a 	bl	800602c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bf8:	bf00      	nop
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_TIM_ConfigClockSource+0x1c>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e0b4      	b.n	8005d86 <HAL_TIM_ConfigClockSource+0x186>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c54:	d03e      	beq.n	8005cd4 <HAL_TIM_ConfigClockSource+0xd4>
 8005c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5a:	f200 8087 	bhi.w	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c62:	f000 8086 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x172>
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6a:	d87f      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c6c:	2b70      	cmp	r3, #112	@ 0x70
 8005c6e:	d01a      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0xa6>
 8005c70:	2b70      	cmp	r3, #112	@ 0x70
 8005c72:	d87b      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c74:	2b60      	cmp	r3, #96	@ 0x60
 8005c76:	d050      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x11a>
 8005c78:	2b60      	cmp	r3, #96	@ 0x60
 8005c7a:	d877      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c7c:	2b50      	cmp	r3, #80	@ 0x50
 8005c7e:	d03c      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0xfa>
 8005c80:	2b50      	cmp	r3, #80	@ 0x50
 8005c82:	d873      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b40      	cmp	r3, #64	@ 0x40
 8005c86:	d058      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x13a>
 8005c88:	2b40      	cmp	r3, #64	@ 0x40
 8005c8a:	d86f      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b30      	cmp	r3, #48	@ 0x30
 8005c8e:	d064      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x15a>
 8005c90:	2b30      	cmp	r3, #48	@ 0x30
 8005c92:	d86b      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d060      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x15a>
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d867      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d05c      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x15a>
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d05a      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x15a>
 8005ca4:	e062      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cb6:	f000 f999 	bl	8005fec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	609a      	str	r2, [r3, #8]
      break;
 8005cd2:	e04f      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ce4:	f000 f982 	bl	8005fec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cf6:	609a      	str	r2, [r3, #8]
      break;
 8005cf8:	e03c      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d06:	461a      	mov	r2, r3
 8005d08:	f000 f8f6 	bl	8005ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2150      	movs	r1, #80	@ 0x50
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 f94f 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 8005d18:	e02c      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d26:	461a      	mov	r2, r3
 8005d28:	f000 f915 	bl	8005f56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2160      	movs	r1, #96	@ 0x60
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f93f 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 8005d38:	e01c      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d46:	461a      	mov	r2, r3
 8005d48:	f000 f8d6 	bl	8005ef8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2140      	movs	r1, #64	@ 0x40
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f92f 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 8005d58:	e00c      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4619      	mov	r1, r3
 8005d64:	4610      	mov	r0, r2
 8005d66:	f000 f926 	bl	8005fb6 <TIM_ITRx_SetConfig>
      break;
 8005d6a:	e003      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d70:	e000      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dbe:	bf00      	nop
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
	...

08005de0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a3a      	ldr	r2, [pc, #232]	@ (8005edc <TIM_Base_SetConfig+0xfc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00f      	beq.n	8005e18 <TIM_Base_SetConfig+0x38>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dfe:	d00b      	beq.n	8005e18 <TIM_Base_SetConfig+0x38>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a37      	ldr	r2, [pc, #220]	@ (8005ee0 <TIM_Base_SetConfig+0x100>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d007      	beq.n	8005e18 <TIM_Base_SetConfig+0x38>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a36      	ldr	r2, [pc, #216]	@ (8005ee4 <TIM_Base_SetConfig+0x104>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d003      	beq.n	8005e18 <TIM_Base_SetConfig+0x38>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a35      	ldr	r2, [pc, #212]	@ (8005ee8 <TIM_Base_SetConfig+0x108>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d108      	bne.n	8005e2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8005edc <TIM_Base_SetConfig+0xfc>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d01b      	beq.n	8005e6a <TIM_Base_SetConfig+0x8a>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e38:	d017      	beq.n	8005e6a <TIM_Base_SetConfig+0x8a>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a28      	ldr	r2, [pc, #160]	@ (8005ee0 <TIM_Base_SetConfig+0x100>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d013      	beq.n	8005e6a <TIM_Base_SetConfig+0x8a>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a27      	ldr	r2, [pc, #156]	@ (8005ee4 <TIM_Base_SetConfig+0x104>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d00f      	beq.n	8005e6a <TIM_Base_SetConfig+0x8a>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a26      	ldr	r2, [pc, #152]	@ (8005ee8 <TIM_Base_SetConfig+0x108>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00b      	beq.n	8005e6a <TIM_Base_SetConfig+0x8a>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a25      	ldr	r2, [pc, #148]	@ (8005eec <TIM_Base_SetConfig+0x10c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d007      	beq.n	8005e6a <TIM_Base_SetConfig+0x8a>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a24      	ldr	r2, [pc, #144]	@ (8005ef0 <TIM_Base_SetConfig+0x110>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d003      	beq.n	8005e6a <TIM_Base_SetConfig+0x8a>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a23      	ldr	r2, [pc, #140]	@ (8005ef4 <TIM_Base_SetConfig+0x114>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d108      	bne.n	8005e7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8005edc <TIM_Base_SetConfig+0xfc>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d103      	bne.n	8005eb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d105      	bne.n	8005ece <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f023 0201 	bic.w	r2, r3, #1
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	611a      	str	r2, [r3, #16]
  }
}
 8005ece:	bf00      	nop
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40010000 	.word	0x40010000
 8005ee0:	40000400 	.word	0x40000400
 8005ee4:	40000800 	.word	0x40000800
 8005ee8:	40000c00 	.word	0x40000c00
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40014400 	.word	0x40014400
 8005ef4:	40014800 	.word	0x40014800

08005ef8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	f023 0201 	bic.w	r2, r3, #1
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	f023 030a 	bic.w	r3, r3, #10
 8005f34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	621a      	str	r2, [r3, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b087      	sub	sp, #28
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	60f8      	str	r0, [r7, #12]
 8005f5e:	60b9      	str	r1, [r7, #8]
 8005f60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	f023 0210 	bic.w	r2, r3, #16
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	031b      	lsls	r3, r3, #12
 8005f86:	693a      	ldr	r2, [r7, #16]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	621a      	str	r2, [r3, #32]
}
 8005faa:	bf00      	nop
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
 8005fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fce:	683a      	ldr	r2, [r7, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f043 0307 	orr.w	r3, r3, #7
 8005fd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68fa      	ldr	r2, [r7, #12]
 8005fde:	609a      	str	r2, [r3, #8]
}
 8005fe0:	bf00      	nop
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
 8005ff8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006006:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	021a      	lsls	r2, r3, #8
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	431a      	orrs	r2, r3
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	4313      	orrs	r3, r2
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	609a      	str	r2, [r3, #8]
}
 8006020:	bf00      	nop
 8006022:	371c      	adds	r7, #28
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e042      	b.n	80060ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d106      	bne.n	8006080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fb fe54 	bl	8001d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2224      	movs	r2, #36	@ 0x24
 8006084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 ff4f 	bl	8006f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695a      	ldr	r2, [r3, #20]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80060cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3708      	adds	r7, #8
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bd80      	pop	{r7, pc}

080060f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b08a      	sub	sp, #40	@ 0x28
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b20      	cmp	r3, #32
 8006112:	d175      	bne.n	8006200 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d002      	beq.n	8006120 <HAL_UART_Transmit+0x2c>
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e06e      	b.n	8006202 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2200      	movs	r2, #0
 8006128:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2221      	movs	r2, #33	@ 0x21
 800612e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006132:	f7fc f937 	bl	80023a4 <HAL_GetTick>
 8006136:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	88fa      	ldrh	r2, [r7, #6]
 800613c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	88fa      	ldrh	r2, [r7, #6]
 8006142:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800614c:	d108      	bne.n	8006160 <HAL_UART_Transmit+0x6c>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006156:	2300      	movs	r3, #0
 8006158:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	61bb      	str	r3, [r7, #24]
 800615e:	e003      	b.n	8006168 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006164:	2300      	movs	r3, #0
 8006166:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006168:	e02e      	b.n	80061c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2200      	movs	r2, #0
 8006172:	2180      	movs	r1, #128	@ 0x80
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 fc27 	bl	80069c8 <UART_WaitOnFlagUntilTimeout>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d005      	beq.n	800618c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e03a      	b.n	8006202 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d10b      	bne.n	80061aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	461a      	mov	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	3302      	adds	r3, #2
 80061a6:	61bb      	str	r3, [r7, #24]
 80061a8:	e007      	b.n	80061ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	781a      	ldrb	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	3301      	adds	r3, #1
 80061b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061be:	b29b      	uxth	r3, r3
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1cb      	bne.n	800616a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2200      	movs	r2, #0
 80061da:	2140      	movs	r1, #64	@ 0x40
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 fbf3 	bl	80069c8 <UART_WaitOnFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d005      	beq.n	80061f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e006      	b.n	8006202 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2220      	movs	r2, #32
 80061f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	e000      	b.n	8006202 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006200:	2302      	movs	r3, #2
  }
}
 8006202:	4618      	mov	r0, r3
 8006204:	3720      	adds	r7, #32
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b084      	sub	sp, #16
 800620e:	af00      	add	r7, sp, #0
 8006210:	60f8      	str	r0, [r7, #12]
 8006212:	60b9      	str	r1, [r7, #8]
 8006214:	4613      	mov	r3, r2
 8006216:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b20      	cmp	r3, #32
 8006222:	d112      	bne.n	800624a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_UART_Receive_DMA+0x26>
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e00b      	b.n	800624c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800623a:	88fb      	ldrh	r3, [r7, #6]
 800623c:	461a      	mov	r2, r3
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 fc1b 	bl	8006a7c <UART_Start_Receive_DMA>
 8006246:	4603      	mov	r3, r0
 8006248:	e000      	b.n	800624c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800624a:	2302      	movs	r3, #2
  }
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b0ba      	sub	sp, #232	@ 0xe8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800627a:	2300      	movs	r3, #0
 800627c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006280:	2300      	movs	r3, #0
 8006282:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800628a:	f003 030f 	and.w	r3, r3, #15
 800628e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10f      	bne.n	80062ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800629a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d009      	beq.n	80062ba <HAL_UART_IRQHandler+0x66>
 80062a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fd83 	bl	8006dbe <UART_Receive_IT>
      return;
 80062b8:	e25b      	b.n	8006772 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 80de 	beq.w	8006480 <HAL_UART_IRQHandler+0x22c>
 80062c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062c8:	f003 0301 	and.w	r3, r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d106      	bne.n	80062de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 80d1 	beq.w	8006480 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e2:	f003 0301 	and.w	r3, r3, #1
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <HAL_UART_IRQHandler+0xae>
 80062ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d005      	beq.n	8006302 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062fa:	f043 0201 	orr.w	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006306:	f003 0304 	and.w	r3, r3, #4
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00b      	beq.n	8006326 <HAL_UART_IRQHandler+0xd2>
 800630e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800631e:	f043 0202 	orr.w	r2, r3, #2
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00b      	beq.n	800634a <HAL_UART_IRQHandler+0xf6>
 8006332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006342:	f043 0204 	orr.w	r2, r3, #4
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800634a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800634e:	f003 0308 	and.w	r3, r3, #8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d011      	beq.n	800637a <HAL_UART_IRQHandler+0x126>
 8006356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800635a:	f003 0320 	and.w	r3, r3, #32
 800635e:	2b00      	cmp	r3, #0
 8006360:	d105      	bne.n	800636e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d005      	beq.n	800637a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006372:	f043 0208 	orr.w	r2, r3, #8
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 81f2 	beq.w	8006768 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006388:	f003 0320 	and.w	r3, r3, #32
 800638c:	2b00      	cmp	r3, #0
 800638e:	d008      	beq.n	80063a2 <HAL_UART_IRQHandler+0x14e>
 8006390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 fd0e 	bl	8006dbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ac:	2b40      	cmp	r3, #64	@ 0x40
 80063ae:	bf0c      	ite	eq
 80063b0:	2301      	moveq	r3, #1
 80063b2:	2300      	movne	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063be:	f003 0308 	and.w	r3, r3, #8
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d103      	bne.n	80063ce <HAL_UART_IRQHandler+0x17a>
 80063c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d04f      	beq.n	800646e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fc16 	bl	8006c00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063de:	2b40      	cmp	r3, #64	@ 0x40
 80063e0:	d141      	bne.n	8006466 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	3314      	adds	r3, #20
 80063e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80063f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3314      	adds	r3, #20
 800640a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800640e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006412:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800641a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800641e:	e841 2300 	strex	r3, r2, [r1]
 8006422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1d9      	bne.n	80063e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d013      	beq.n	800645e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800643a:	4a7e      	ldr	r2, [pc, #504]	@ (8006634 <HAL_UART_IRQHandler+0x3e0>)
 800643c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006442:	4618      	mov	r0, r3
 8006444:	f7fc ff80 	bl	8003348 <HAL_DMA_Abort_IT>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d016      	beq.n	800647c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006458:	4610      	mov	r0, r2
 800645a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	e00e      	b.n	800647c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f99e 	bl	80067a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	e00a      	b.n	800647c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f99a 	bl	80067a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800646c:	e006      	b.n	800647c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f996 	bl	80067a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800647a:	e175      	b.n	8006768 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800647c:	bf00      	nop
    return;
 800647e:	e173      	b.n	8006768 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006484:	2b01      	cmp	r3, #1
 8006486:	f040 814f 	bne.w	8006728 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800648a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800648e:	f003 0310 	and.w	r3, r3, #16
 8006492:	2b00      	cmp	r3, #0
 8006494:	f000 8148 	beq.w	8006728 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800649c:	f003 0310 	and.w	r3, r3, #16
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 8141 	beq.w	8006728 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064a6:	2300      	movs	r3, #0
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	60bb      	str	r3, [r7, #8]
 80064ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c6:	2b40      	cmp	r3, #64	@ 0x40
 80064c8:	f040 80b6 	bne.w	8006638 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8145 	beq.w	800676c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80064e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064ea:	429a      	cmp	r2, r3
 80064ec:	f080 813e 	bcs.w	800676c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80064f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006502:	f000 8088 	beq.w	8006616 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	330c      	adds	r3, #12
 800650c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006510:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006514:	e853 3f00 	ldrex	r3, [r3]
 8006518:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800651c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006520:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006524:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006532:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006536:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800653a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800653e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006542:	e841 2300 	strex	r3, r2, [r1]
 8006546:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800654a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1d9      	bne.n	8006506 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	3314      	adds	r3, #20
 8006558:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800655a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800655c:	e853 3f00 	ldrex	r3, [r3]
 8006560:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006562:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006564:	f023 0301 	bic.w	r3, r3, #1
 8006568:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3314      	adds	r3, #20
 8006572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006576:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800657a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800657e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006588:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e1      	bne.n	8006552 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3314      	adds	r3, #20
 8006594:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800659e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3314      	adds	r3, #20
 80065ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065ba:	e841 2300 	strex	r3, r2, [r1]
 80065be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1e3      	bne.n	800658e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2220      	movs	r2, #32
 80065ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	330c      	adds	r3, #12
 80065da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065e6:	f023 0310 	bic.w	r3, r3, #16
 80065ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	330c      	adds	r3, #12
 80065f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80065f8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065fa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e3      	bne.n	80065d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006610:	4618      	mov	r0, r3
 8006612:	f7fc fe29 	bl	8003268 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2202      	movs	r2, #2
 800661a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006624:	b29b      	uxth	r3, r3
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	b29b      	uxth	r3, r3
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f8c1 	bl	80067b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006632:	e09b      	b.n	800676c <HAL_UART_IRQHandler+0x518>
 8006634:	08006cc7 	.word	0x08006cc7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006640:	b29b      	uxth	r3, r3
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	f000 808e 	beq.w	8006770 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006658:	2b00      	cmp	r3, #0
 800665a:	f000 8089 	beq.w	8006770 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	330c      	adds	r3, #12
 8006664:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800666e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006674:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	330c      	adds	r3, #12
 800667e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006682:	647a      	str	r2, [r7, #68]	@ 0x44
 8006684:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006686:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800668a:	e841 2300 	strex	r3, r2, [r1]
 800668e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006692:	2b00      	cmp	r3, #0
 8006694:	d1e3      	bne.n	800665e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	3314      	adds	r3, #20
 800669c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	e853 3f00 	ldrex	r3, [r3]
 80066a4:	623b      	str	r3, [r7, #32]
   return(result);
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	f023 0301 	bic.w	r3, r3, #1
 80066ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3314      	adds	r3, #20
 80066b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80066bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e3      	bne.n	8006696 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	330c      	adds	r3, #12
 80066e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	e853 3f00 	ldrex	r3, [r3]
 80066ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f023 0310 	bic.w	r3, r3, #16
 80066f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	330c      	adds	r3, #12
 80066fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006700:	61fa      	str	r2, [r7, #28]
 8006702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006704:	69b9      	ldr	r1, [r7, #24]
 8006706:	69fa      	ldr	r2, [r7, #28]
 8006708:	e841 2300 	strex	r3, r2, [r1]
 800670c:	617b      	str	r3, [r7, #20]
   return(result);
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1e3      	bne.n	80066dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800671a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f847 	bl	80067b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006726:	e023      	b.n	8006770 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800672c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006730:	2b00      	cmp	r3, #0
 8006732:	d009      	beq.n	8006748 <HAL_UART_IRQHandler+0x4f4>
 8006734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fad4 	bl	8006cee <UART_Transmit_IT>
    return;
 8006746:	e014      	b.n	8006772 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800674c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00e      	beq.n	8006772 <HAL_UART_IRQHandler+0x51e>
 8006754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800675c:	2b00      	cmp	r3, #0
 800675e:	d008      	beq.n	8006772 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 fb14 	bl	8006d8e <UART_EndTransmit_IT>
    return;
 8006766:	e004      	b.n	8006772 <HAL_UART_IRQHandler+0x51e>
    return;
 8006768:	bf00      	nop
 800676a:	e002      	b.n	8006772 <HAL_UART_IRQHandler+0x51e>
      return;
 800676c:	bf00      	nop
 800676e:	e000      	b.n	8006772 <HAL_UART_IRQHandler+0x51e>
      return;
 8006770:	bf00      	nop
  }
}
 8006772:	37e8      	adds	r7, #232	@ 0xe8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067a8:	bf00      	nop
 80067aa:	370c      	adds	r7, #12
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067c0:	bf00      	nop
 80067c2:	370c      	adds	r7, #12
 80067c4:	46bd      	mov	sp, r7
 80067c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ca:	4770      	bx	lr

080067cc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b09c      	sub	sp, #112	@ 0x70
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067d8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d172      	bne.n	80068ce <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80067e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067ea:	2200      	movs	r2, #0
 80067ec:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	330c      	adds	r3, #12
 80067f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006800:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006804:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006806:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	330c      	adds	r3, #12
 800680c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800680e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006810:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006814:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800681c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e5      	bne.n	80067ee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006822:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3314      	adds	r3, #20
 8006828:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	667b      	str	r3, [r7, #100]	@ 0x64
 800683a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	3314      	adds	r3, #20
 8006840:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006842:	647a      	str	r2, [r7, #68]	@ 0x44
 8006844:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006848:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3314      	adds	r3, #20
 800685c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006860:	e853 3f00 	ldrex	r3, [r3]
 8006864:	623b      	str	r3, [r7, #32]
   return(result);
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800686c:	663b      	str	r3, [r7, #96]	@ 0x60
 800686e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	3314      	adds	r3, #20
 8006874:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006876:	633a      	str	r2, [r7, #48]	@ 0x30
 8006878:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800687a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800687c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800687e:	e841 2300 	strex	r3, r2, [r1]
 8006882:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006886:	2b00      	cmp	r3, #0
 8006888:	d1e5      	bne.n	8006856 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800688a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800688c:	2220      	movs	r2, #32
 800688e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006892:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006896:	2b01      	cmp	r3, #1
 8006898:	d119      	bne.n	80068ce <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800689a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	330c      	adds	r3, #12
 80068a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f023 0310 	bic.w	r3, r3, #16
 80068b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80068b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	330c      	adds	r3, #12
 80068b8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80068ba:	61fa      	str	r2, [r7, #28]
 80068bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	69b9      	ldr	r1, [r7, #24]
 80068c0:	69fa      	ldr	r2, [r7, #28]
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	617b      	str	r3, [r7, #20]
   return(result);
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e5      	bne.n	800689a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068d0:	2200      	movs	r2, #0
 80068d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d106      	bne.n	80068ea <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80068de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068e0:	4619      	mov	r1, r3
 80068e2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80068e4:	f7ff ff66 	bl	80067b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068e8:	e002      	b.n	80068f0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80068ea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80068ec:	f7fa fbb0 	bl	8001050 <HAL_UART_RxCpltCallback>
}
 80068f0:	bf00      	nop
 80068f2:	3770      	adds	r7, #112	@ 0x70
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2201      	movs	r2, #1
 800690a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006910:	2b01      	cmp	r3, #1
 8006912:	d108      	bne.n	8006926 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006918:	085b      	lsrs	r3, r3, #1
 800691a:	b29b      	uxth	r3, r3
 800691c:	4619      	mov	r1, r3
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f7ff ff48 	bl	80067b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006924:	e002      	b.n	800692c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f7ff ff30 	bl	800678c <HAL_UART_RxHalfCpltCallback>
}
 800692c:	bf00      	nop
 800692e:	3710      	adds	r7, #16
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006944:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006950:	2b80      	cmp	r3, #128	@ 0x80
 8006952:	bf0c      	ite	eq
 8006954:	2301      	moveq	r3, #1
 8006956:	2300      	movne	r3, #0
 8006958:	b2db      	uxtb	r3, r3
 800695a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006962:	b2db      	uxtb	r3, r3
 8006964:	2b21      	cmp	r3, #33	@ 0x21
 8006966:	d108      	bne.n	800697a <UART_DMAError+0x46>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d005      	beq.n	800697a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2200      	movs	r2, #0
 8006972:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006974:	68b8      	ldr	r0, [r7, #8]
 8006976:	f000 f91b 	bl	8006bb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	695b      	ldr	r3, [r3, #20]
 8006980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006984:	2b40      	cmp	r3, #64	@ 0x40
 8006986:	bf0c      	ite	eq
 8006988:	2301      	moveq	r3, #1
 800698a:	2300      	movne	r3, #0
 800698c:	b2db      	uxtb	r3, r3
 800698e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b22      	cmp	r3, #34	@ 0x22
 800699a:	d108      	bne.n	80069ae <UART_DMAError+0x7a>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d005      	beq.n	80069ae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2200      	movs	r2, #0
 80069a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80069a8:	68b8      	ldr	r0, [r7, #8]
 80069aa:	f000 f929 	bl	8006c00 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069b2:	f043 0210 	orr.w	r2, r3, #16
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ba:	68b8      	ldr	r0, [r7, #8]
 80069bc:	f7ff fef0 	bl	80067a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069c0:	bf00      	nop
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	603b      	str	r3, [r7, #0]
 80069d4:	4613      	mov	r3, r2
 80069d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d8:	e03b      	b.n	8006a52 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069da:	6a3b      	ldr	r3, [r7, #32]
 80069dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069e0:	d037      	beq.n	8006a52 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e2:	f7fb fcdf 	bl	80023a4 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	6a3a      	ldr	r2, [r7, #32]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d302      	bcc.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e03a      	b.n	8006a72 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f003 0304 	and.w	r3, r3, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d023      	beq.n	8006a52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b80      	cmp	r3, #128	@ 0x80
 8006a0e:	d020      	beq.n	8006a52 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	2b40      	cmp	r3, #64	@ 0x40
 8006a14:	d01d      	beq.n	8006a52 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d116      	bne.n	8006a52 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	f000 f8e0 	bl	8006c00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2208      	movs	r2, #8
 8006a44:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e00f      	b.n	8006a72 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	68ba      	ldr	r2, [r7, #8]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	bf0c      	ite	eq
 8006a62:	2301      	moveq	r3, #1
 8006a64:	2300      	movne	r3, #0
 8006a66:	b2db      	uxtb	r3, r3
 8006a68:	461a      	mov	r2, r3
 8006a6a:	79fb      	ldrb	r3, [r7, #7]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d0b4      	beq.n	80069da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b098      	sub	sp, #96	@ 0x60
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	4613      	mov	r3, r2
 8006a88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	88fa      	ldrh	r2, [r7, #6]
 8006a94:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2222      	movs	r2, #34	@ 0x22
 8006aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa8:	4a3e      	ldr	r2, [pc, #248]	@ (8006ba4 <UART_Start_Receive_DMA+0x128>)
 8006aaa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab0:	4a3d      	ldr	r2, [pc, #244]	@ (8006ba8 <UART_Start_Receive_DMA+0x12c>)
 8006ab2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ab8:	4a3c      	ldr	r2, [pc, #240]	@ (8006bac <UART_Start_Receive_DMA+0x130>)
 8006aba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ac4:	f107 0308 	add.w	r3, r7, #8
 8006ac8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	88fb      	ldrh	r3, [r7, #6]
 8006adc:	f7fc fb6c 	bl	80031b8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	613b      	str	r3, [r7, #16]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	613b      	str	r3, [r7, #16]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d019      	beq.n	8006b32 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	330c      	adds	r3, #12
 8006b04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	330c      	adds	r3, #12
 8006b1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b1e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006b20:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006b24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e5      	bne.n	8006afe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	3314      	adds	r3, #20
 8006b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b44:	f043 0301 	orr.w	r3, r3, #1
 8006b48:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3314      	adds	r3, #20
 8006b50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b52:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006b54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006b58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e5      	bne.n	8006b32 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3314      	adds	r3, #20
 8006b6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	e853 3f00 	ldrex	r3, [r3]
 8006b74:	617b      	str	r3, [r7, #20]
   return(result);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3314      	adds	r3, #20
 8006b84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b86:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8a:	6a39      	ldr	r1, [r7, #32]
 8006b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b8e:	e841 2300 	strex	r3, r2, [r1]
 8006b92:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e5      	bne.n	8006b66 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3760      	adds	r7, #96	@ 0x60
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	080067cd 	.word	0x080067cd
 8006ba8:	080068f9 	.word	0x080068f9
 8006bac:	08006935 	.word	0x08006935

08006bb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b089      	sub	sp, #36	@ 0x24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	330c      	adds	r3, #12
 8006bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	330c      	adds	r3, #12
 8006bd6:	69fa      	ldr	r2, [r7, #28]
 8006bd8:	61ba      	str	r2, [r7, #24]
 8006bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6979      	ldr	r1, [r7, #20]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	613b      	str	r3, [r7, #16]
   return(result);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e5      	bne.n	8006bb8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006bf4:	bf00      	nop
 8006bf6:	3724      	adds	r7, #36	@ 0x24
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b095      	sub	sp, #84	@ 0x54
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	330c      	adds	r3, #12
 8006c0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	330c      	adds	r3, #12
 8006c26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c28:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e5      	bne.n	8006c08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3314      	adds	r3, #20
 8006c42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	e853 3f00 	ldrex	r3, [r3]
 8006c4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	f023 0301 	bic.w	r3, r3, #1
 8006c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3314      	adds	r3, #20
 8006c5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c64:	e841 2300 	strex	r3, r2, [r1]
 8006c68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e5      	bne.n	8006c3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d119      	bne.n	8006cac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	330c      	adds	r3, #12
 8006c7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	e853 3f00 	ldrex	r3, [r3]
 8006c86:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f023 0310 	bic.w	r3, r3, #16
 8006c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	330c      	adds	r3, #12
 8006c96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c98:	61ba      	str	r2, [r7, #24]
 8006c9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6979      	ldr	r1, [r7, #20]
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e5      	bne.n	8006c78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006cba:	bf00      	nop
 8006cbc:	3754      	adds	r7, #84	@ 0x54
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f7ff fd5d 	bl	80067a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}

08006cee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b085      	sub	sp, #20
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	2b21      	cmp	r3, #33	@ 0x21
 8006d00:	d13e      	bne.n	8006d80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d0a:	d114      	bne.n	8006d36 <UART_Transmit_IT+0x48>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	691b      	ldr	r3, [r3, #16]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d110      	bne.n	8006d36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	1c9a      	adds	r2, r3, #2
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	621a      	str	r2, [r3, #32]
 8006d34:	e008      	b.n	8006d48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	1c59      	adds	r1, r3, #1
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6211      	str	r1, [r2, #32]
 8006d40:	781a      	ldrb	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	687a      	ldr	r2, [r7, #4]
 8006d54:	4619      	mov	r1, r3
 8006d56:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10f      	bne.n	8006d7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68da      	ldr	r2, [r3, #12]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006d6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	e000      	b.n	8006d82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d80:	2302      	movs	r3, #2
  }
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b082      	sub	sp, #8
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68da      	ldr	r2, [r3, #12]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006da4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff fce2 	bl	8006778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b08c      	sub	sp, #48	@ 0x30
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b22      	cmp	r3, #34	@ 0x22
 8006dd0:	f040 80ae 	bne.w	8006f30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ddc:	d117      	bne.n	8006e0e <UART_Receive_IT+0x50>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d113      	bne.n	8006e0e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006de6:	2300      	movs	r3, #0
 8006de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e00:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e06:	1c9a      	adds	r2, r3, #2
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e0c:	e026      	b.n	8006e5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e20:	d007      	beq.n	8006e32 <UART_Receive_IT+0x74>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d10a      	bne.n	8006e40 <UART_Receive_IT+0x82>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	e008      	b.n	8006e52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d15d      	bne.n	8006f2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0220 	bic.w	r2, r2, #32
 8006e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	695a      	ldr	r2, [r3, #20]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f022 0201 	bic.w	r2, r2, #1
 8006e9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2220      	movs	r2, #32
 8006ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d135      	bne.n	8006f22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	330c      	adds	r3, #12
 8006ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	e853 3f00 	ldrex	r3, [r3]
 8006eca:	613b      	str	r3, [r7, #16]
   return(result);
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	f023 0310 	bic.w	r3, r3, #16
 8006ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	330c      	adds	r3, #12
 8006eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006edc:	623a      	str	r2, [r7, #32]
 8006ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee0:	69f9      	ldr	r1, [r7, #28]
 8006ee2:	6a3a      	ldr	r2, [r7, #32]
 8006ee4:	e841 2300 	strex	r3, r2, [r1]
 8006ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d1e5      	bne.n	8006ebc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0310 	and.w	r3, r3, #16
 8006efa:	2b10      	cmp	r3, #16
 8006efc:	d10a      	bne.n	8006f14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006efe:	2300      	movs	r3, #0
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60fb      	str	r3, [r7, #12]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	60fb      	str	r3, [r7, #12]
 8006f12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f18:	4619      	mov	r1, r3
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f7ff fc4a 	bl	80067b4 <HAL_UARTEx_RxEventCallback>
 8006f20:	e002      	b.n	8006f28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7fa f894 	bl	8001050 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e002      	b.n	8006f32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e000      	b.n	8006f32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f30:	2302      	movs	r3, #2
  }
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3730      	adds	r7, #48	@ 0x30
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f40:	b0c0      	sub	sp, #256	@ 0x100
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	691b      	ldr	r3, [r3, #16]
 8006f50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f58:	68d9      	ldr	r1, [r3, #12]
 8006f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	ea40 0301 	orr.w	r3, r0, r1
 8006f64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	431a      	orrs	r2, r3
 8006f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f80:	69db      	ldr	r3, [r3, #28]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006f94:	f021 010c 	bic.w	r1, r1, #12
 8006f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006fa2:	430b      	orrs	r3, r1
 8006fa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb6:	6999      	ldr	r1, [r3, #24]
 8006fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	ea40 0301 	orr.w	r3, r0, r1
 8006fc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	4b8f      	ldr	r3, [pc, #572]	@ (8007208 <UART_SetConfig+0x2cc>)
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d005      	beq.n	8006fdc <UART_SetConfig+0xa0>
 8006fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800720c <UART_SetConfig+0x2d0>)
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d104      	bne.n	8006fe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006fdc:	f7fe fc5a 	bl	8005894 <HAL_RCC_GetPCLK2Freq>
 8006fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006fe4:	e003      	b.n	8006fee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006fe6:	f7fe fc41 	bl	800586c <HAL_RCC_GetPCLK1Freq>
 8006fea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff2:	69db      	ldr	r3, [r3, #28]
 8006ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ff8:	f040 810c 	bne.w	8007214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007000:	2200      	movs	r2, #0
 8007002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007006:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800700a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800700e:	4622      	mov	r2, r4
 8007010:	462b      	mov	r3, r5
 8007012:	1891      	adds	r1, r2, r2
 8007014:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007016:	415b      	adcs	r3, r3
 8007018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800701a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800701e:	4621      	mov	r1, r4
 8007020:	eb12 0801 	adds.w	r8, r2, r1
 8007024:	4629      	mov	r1, r5
 8007026:	eb43 0901 	adc.w	r9, r3, r1
 800702a:	f04f 0200 	mov.w	r2, #0
 800702e:	f04f 0300 	mov.w	r3, #0
 8007032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800703a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800703e:	4690      	mov	r8, r2
 8007040:	4699      	mov	r9, r3
 8007042:	4623      	mov	r3, r4
 8007044:	eb18 0303 	adds.w	r3, r8, r3
 8007048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800704c:	462b      	mov	r3, r5
 800704e:	eb49 0303 	adc.w	r3, r9, r3
 8007052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007062:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800706a:	460b      	mov	r3, r1
 800706c:	18db      	adds	r3, r3, r3
 800706e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007070:	4613      	mov	r3, r2
 8007072:	eb42 0303 	adc.w	r3, r2, r3
 8007076:	657b      	str	r3, [r7, #84]	@ 0x54
 8007078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800707c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007080:	f7f9 fe0a 	bl	8000c98 <__aeabi_uldivmod>
 8007084:	4602      	mov	r2, r0
 8007086:	460b      	mov	r3, r1
 8007088:	4b61      	ldr	r3, [pc, #388]	@ (8007210 <UART_SetConfig+0x2d4>)
 800708a:	fba3 2302 	umull	r2, r3, r3, r2
 800708e:	095b      	lsrs	r3, r3, #5
 8007090:	011c      	lsls	r4, r3, #4
 8007092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007096:	2200      	movs	r2, #0
 8007098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800709c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80070a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80070a4:	4642      	mov	r2, r8
 80070a6:	464b      	mov	r3, r9
 80070a8:	1891      	adds	r1, r2, r2
 80070aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80070ac:	415b      	adcs	r3, r3
 80070ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80070b4:	4641      	mov	r1, r8
 80070b6:	eb12 0a01 	adds.w	sl, r2, r1
 80070ba:	4649      	mov	r1, r9
 80070bc:	eb43 0b01 	adc.w	fp, r3, r1
 80070c0:	f04f 0200 	mov.w	r2, #0
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80070cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80070d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070d4:	4692      	mov	sl, r2
 80070d6:	469b      	mov	fp, r3
 80070d8:	4643      	mov	r3, r8
 80070da:	eb1a 0303 	adds.w	r3, sl, r3
 80070de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80070e2:	464b      	mov	r3, r9
 80070e4:	eb4b 0303 	adc.w	r3, fp, r3
 80070e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80070ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80070f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80070fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007100:	460b      	mov	r3, r1
 8007102:	18db      	adds	r3, r3, r3
 8007104:	643b      	str	r3, [r7, #64]	@ 0x40
 8007106:	4613      	mov	r3, r2
 8007108:	eb42 0303 	adc.w	r3, r2, r3
 800710c:	647b      	str	r3, [r7, #68]	@ 0x44
 800710e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007116:	f7f9 fdbf 	bl	8000c98 <__aeabi_uldivmod>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4611      	mov	r1, r2
 8007120:	4b3b      	ldr	r3, [pc, #236]	@ (8007210 <UART_SetConfig+0x2d4>)
 8007122:	fba3 2301 	umull	r2, r3, r3, r1
 8007126:	095b      	lsrs	r3, r3, #5
 8007128:	2264      	movs	r2, #100	@ 0x64
 800712a:	fb02 f303 	mul.w	r3, r2, r3
 800712e:	1acb      	subs	r3, r1, r3
 8007130:	00db      	lsls	r3, r3, #3
 8007132:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007136:	4b36      	ldr	r3, [pc, #216]	@ (8007210 <UART_SetConfig+0x2d4>)
 8007138:	fba3 2302 	umull	r2, r3, r3, r2
 800713c:	095b      	lsrs	r3, r3, #5
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007144:	441c      	add	r4, r3
 8007146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800714a:	2200      	movs	r2, #0
 800714c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007150:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007158:	4642      	mov	r2, r8
 800715a:	464b      	mov	r3, r9
 800715c:	1891      	adds	r1, r2, r2
 800715e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007160:	415b      	adcs	r3, r3
 8007162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007168:	4641      	mov	r1, r8
 800716a:	1851      	adds	r1, r2, r1
 800716c:	6339      	str	r1, [r7, #48]	@ 0x30
 800716e:	4649      	mov	r1, r9
 8007170:	414b      	adcs	r3, r1
 8007172:	637b      	str	r3, [r7, #52]	@ 0x34
 8007174:	f04f 0200 	mov.w	r2, #0
 8007178:	f04f 0300 	mov.w	r3, #0
 800717c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007180:	4659      	mov	r1, fp
 8007182:	00cb      	lsls	r3, r1, #3
 8007184:	4651      	mov	r1, sl
 8007186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800718a:	4651      	mov	r1, sl
 800718c:	00ca      	lsls	r2, r1, #3
 800718e:	4610      	mov	r0, r2
 8007190:	4619      	mov	r1, r3
 8007192:	4603      	mov	r3, r0
 8007194:	4642      	mov	r2, r8
 8007196:	189b      	adds	r3, r3, r2
 8007198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800719c:	464b      	mov	r3, r9
 800719e:	460a      	mov	r2, r1
 80071a0:	eb42 0303 	adc.w	r3, r2, r3
 80071a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80071b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80071b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80071bc:	460b      	mov	r3, r1
 80071be:	18db      	adds	r3, r3, r3
 80071c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80071c2:	4613      	mov	r3, r2
 80071c4:	eb42 0303 	adc.w	r3, r2, r3
 80071c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80071ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80071d2:	f7f9 fd61 	bl	8000c98 <__aeabi_uldivmod>
 80071d6:	4602      	mov	r2, r0
 80071d8:	460b      	mov	r3, r1
 80071da:	4b0d      	ldr	r3, [pc, #52]	@ (8007210 <UART_SetConfig+0x2d4>)
 80071dc:	fba3 1302 	umull	r1, r3, r3, r2
 80071e0:	095b      	lsrs	r3, r3, #5
 80071e2:	2164      	movs	r1, #100	@ 0x64
 80071e4:	fb01 f303 	mul.w	r3, r1, r3
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	3332      	adds	r3, #50	@ 0x32
 80071ee:	4a08      	ldr	r2, [pc, #32]	@ (8007210 <UART_SetConfig+0x2d4>)
 80071f0:	fba2 2303 	umull	r2, r3, r2, r3
 80071f4:	095b      	lsrs	r3, r3, #5
 80071f6:	f003 0207 	and.w	r2, r3, #7
 80071fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4422      	add	r2, r4
 8007202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007204:	e106      	b.n	8007414 <UART_SetConfig+0x4d8>
 8007206:	bf00      	nop
 8007208:	40011000 	.word	0x40011000
 800720c:	40011400 	.word	0x40011400
 8007210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007218:	2200      	movs	r2, #0
 800721a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800721e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007226:	4642      	mov	r2, r8
 8007228:	464b      	mov	r3, r9
 800722a:	1891      	adds	r1, r2, r2
 800722c:	6239      	str	r1, [r7, #32]
 800722e:	415b      	adcs	r3, r3
 8007230:	627b      	str	r3, [r7, #36]	@ 0x24
 8007232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007236:	4641      	mov	r1, r8
 8007238:	1854      	adds	r4, r2, r1
 800723a:	4649      	mov	r1, r9
 800723c:	eb43 0501 	adc.w	r5, r3, r1
 8007240:	f04f 0200 	mov.w	r2, #0
 8007244:	f04f 0300 	mov.w	r3, #0
 8007248:	00eb      	lsls	r3, r5, #3
 800724a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800724e:	00e2      	lsls	r2, r4, #3
 8007250:	4614      	mov	r4, r2
 8007252:	461d      	mov	r5, r3
 8007254:	4643      	mov	r3, r8
 8007256:	18e3      	adds	r3, r4, r3
 8007258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800725c:	464b      	mov	r3, r9
 800725e:	eb45 0303 	adc.w	r3, r5, r3
 8007262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007272:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007282:	4629      	mov	r1, r5
 8007284:	008b      	lsls	r3, r1, #2
 8007286:	4621      	mov	r1, r4
 8007288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800728c:	4621      	mov	r1, r4
 800728e:	008a      	lsls	r2, r1, #2
 8007290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007294:	f7f9 fd00 	bl	8000c98 <__aeabi_uldivmod>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	4b60      	ldr	r3, [pc, #384]	@ (8007420 <UART_SetConfig+0x4e4>)
 800729e:	fba3 2302 	umull	r2, r3, r3, r2
 80072a2:	095b      	lsrs	r3, r3, #5
 80072a4:	011c      	lsls	r4, r3, #4
 80072a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072aa:	2200      	movs	r2, #0
 80072ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80072b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80072b8:	4642      	mov	r2, r8
 80072ba:	464b      	mov	r3, r9
 80072bc:	1891      	adds	r1, r2, r2
 80072be:	61b9      	str	r1, [r7, #24]
 80072c0:	415b      	adcs	r3, r3
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072c8:	4641      	mov	r1, r8
 80072ca:	1851      	adds	r1, r2, r1
 80072cc:	6139      	str	r1, [r7, #16]
 80072ce:	4649      	mov	r1, r9
 80072d0:	414b      	adcs	r3, r1
 80072d2:	617b      	str	r3, [r7, #20]
 80072d4:	f04f 0200 	mov.w	r2, #0
 80072d8:	f04f 0300 	mov.w	r3, #0
 80072dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80072e0:	4659      	mov	r1, fp
 80072e2:	00cb      	lsls	r3, r1, #3
 80072e4:	4651      	mov	r1, sl
 80072e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072ea:	4651      	mov	r1, sl
 80072ec:	00ca      	lsls	r2, r1, #3
 80072ee:	4610      	mov	r0, r2
 80072f0:	4619      	mov	r1, r3
 80072f2:	4603      	mov	r3, r0
 80072f4:	4642      	mov	r2, r8
 80072f6:	189b      	adds	r3, r3, r2
 80072f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072fc:	464b      	mov	r3, r9
 80072fe:	460a      	mov	r2, r1
 8007300:	eb42 0303 	adc.w	r3, r2, r3
 8007304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007312:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007314:	f04f 0200 	mov.w	r2, #0
 8007318:	f04f 0300 	mov.w	r3, #0
 800731c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007320:	4649      	mov	r1, r9
 8007322:	008b      	lsls	r3, r1, #2
 8007324:	4641      	mov	r1, r8
 8007326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800732a:	4641      	mov	r1, r8
 800732c:	008a      	lsls	r2, r1, #2
 800732e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007332:	f7f9 fcb1 	bl	8000c98 <__aeabi_uldivmod>
 8007336:	4602      	mov	r2, r0
 8007338:	460b      	mov	r3, r1
 800733a:	4611      	mov	r1, r2
 800733c:	4b38      	ldr	r3, [pc, #224]	@ (8007420 <UART_SetConfig+0x4e4>)
 800733e:	fba3 2301 	umull	r2, r3, r3, r1
 8007342:	095b      	lsrs	r3, r3, #5
 8007344:	2264      	movs	r2, #100	@ 0x64
 8007346:	fb02 f303 	mul.w	r3, r2, r3
 800734a:	1acb      	subs	r3, r1, r3
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	3332      	adds	r3, #50	@ 0x32
 8007350:	4a33      	ldr	r2, [pc, #204]	@ (8007420 <UART_SetConfig+0x4e4>)
 8007352:	fba2 2303 	umull	r2, r3, r2, r3
 8007356:	095b      	lsrs	r3, r3, #5
 8007358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800735c:	441c      	add	r4, r3
 800735e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007362:	2200      	movs	r2, #0
 8007364:	673b      	str	r3, [r7, #112]	@ 0x70
 8007366:	677a      	str	r2, [r7, #116]	@ 0x74
 8007368:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800736c:	4642      	mov	r2, r8
 800736e:	464b      	mov	r3, r9
 8007370:	1891      	adds	r1, r2, r2
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	415b      	adcs	r3, r3
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800737c:	4641      	mov	r1, r8
 800737e:	1851      	adds	r1, r2, r1
 8007380:	6039      	str	r1, [r7, #0]
 8007382:	4649      	mov	r1, r9
 8007384:	414b      	adcs	r3, r1
 8007386:	607b      	str	r3, [r7, #4]
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007394:	4659      	mov	r1, fp
 8007396:	00cb      	lsls	r3, r1, #3
 8007398:	4651      	mov	r1, sl
 800739a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800739e:	4651      	mov	r1, sl
 80073a0:	00ca      	lsls	r2, r1, #3
 80073a2:	4610      	mov	r0, r2
 80073a4:	4619      	mov	r1, r3
 80073a6:	4603      	mov	r3, r0
 80073a8:	4642      	mov	r2, r8
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80073ae:	464b      	mov	r3, r9
 80073b0:	460a      	mov	r2, r1
 80073b2:	eb42 0303 	adc.w	r3, r2, r3
 80073b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80073b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80073c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80073d0:	4649      	mov	r1, r9
 80073d2:	008b      	lsls	r3, r1, #2
 80073d4:	4641      	mov	r1, r8
 80073d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073da:	4641      	mov	r1, r8
 80073dc:	008a      	lsls	r2, r1, #2
 80073de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80073e2:	f7f9 fc59 	bl	8000c98 <__aeabi_uldivmod>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	4b0d      	ldr	r3, [pc, #52]	@ (8007420 <UART_SetConfig+0x4e4>)
 80073ec:	fba3 1302 	umull	r1, r3, r3, r2
 80073f0:	095b      	lsrs	r3, r3, #5
 80073f2:	2164      	movs	r1, #100	@ 0x64
 80073f4:	fb01 f303 	mul.w	r3, r1, r3
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	3332      	adds	r3, #50	@ 0x32
 80073fe:	4a08      	ldr	r2, [pc, #32]	@ (8007420 <UART_SetConfig+0x4e4>)
 8007400:	fba2 2303 	umull	r2, r3, r2, r3
 8007404:	095b      	lsrs	r3, r3, #5
 8007406:	f003 020f 	and.w	r2, r3, #15
 800740a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4422      	add	r2, r4
 8007412:	609a      	str	r2, [r3, #8]
}
 8007414:	bf00      	nop
 8007416:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800741a:	46bd      	mov	sp, r7
 800741c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007420:	51eb851f 	.word	0x51eb851f

08007424 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007424:	b084      	sub	sp, #16
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	f107 001c 	add.w	r0, r7, #28
 8007432:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007436:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800743a:	2b01      	cmp	r3, #1
 800743c:	d123      	bne.n	8007486 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007442:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007452:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007466:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800746a:	2b01      	cmp	r3, #1
 800746c:	d105      	bne.n	800747a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68db      	ldr	r3, [r3, #12]
 8007472:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f001 fae8 	bl	8008a50 <USB_CoreReset>
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]
 8007484:	e01b      	b.n	80074be <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f001 fadc 	bl	8008a50 <USB_CoreReset>
 8007498:	4603      	mov	r3, r0
 800749a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800749c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d106      	bne.n	80074b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80074b0:	e005      	b.n	80074be <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80074be:	7fbb      	ldrb	r3, [r7, #30]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d10b      	bne.n	80074dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	f043 0206 	orr.w	r2, r3, #6
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	f043 0220 	orr.w	r2, r3, #32
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074e8:	b004      	add	sp, #16
 80074ea:	4770      	bx	lr

080074ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4613      	mov	r3, r2
 80074f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80074fa:	79fb      	ldrb	r3, [r7, #7]
 80074fc:	2b02      	cmp	r3, #2
 80074fe:	d165      	bne.n	80075cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	4a41      	ldr	r2, [pc, #260]	@ (8007608 <USB_SetTurnaroundTime+0x11c>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d906      	bls.n	8007516 <USB_SetTurnaroundTime+0x2a>
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4a40      	ldr	r2, [pc, #256]	@ (800760c <USB_SetTurnaroundTime+0x120>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d202      	bcs.n	8007516 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007510:	230f      	movs	r3, #15
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	e062      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	4a3c      	ldr	r2, [pc, #240]	@ (800760c <USB_SetTurnaroundTime+0x120>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d306      	bcc.n	800752c <USB_SetTurnaroundTime+0x40>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	4a3b      	ldr	r2, [pc, #236]	@ (8007610 <USB_SetTurnaroundTime+0x124>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d202      	bcs.n	800752c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007526:	230e      	movs	r3, #14
 8007528:	617b      	str	r3, [r7, #20]
 800752a:	e057      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	4a38      	ldr	r2, [pc, #224]	@ (8007610 <USB_SetTurnaroundTime+0x124>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d306      	bcc.n	8007542 <USB_SetTurnaroundTime+0x56>
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	4a37      	ldr	r2, [pc, #220]	@ (8007614 <USB_SetTurnaroundTime+0x128>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d202      	bcs.n	8007542 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800753c:	230d      	movs	r3, #13
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	e04c      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	4a33      	ldr	r2, [pc, #204]	@ (8007614 <USB_SetTurnaroundTime+0x128>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d306      	bcc.n	8007558 <USB_SetTurnaroundTime+0x6c>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	4a32      	ldr	r2, [pc, #200]	@ (8007618 <USB_SetTurnaroundTime+0x12c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d802      	bhi.n	8007558 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007552:	230c      	movs	r3, #12
 8007554:	617b      	str	r3, [r7, #20]
 8007556:	e041      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	4a2f      	ldr	r2, [pc, #188]	@ (8007618 <USB_SetTurnaroundTime+0x12c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d906      	bls.n	800756e <USB_SetTurnaroundTime+0x82>
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	4a2e      	ldr	r2, [pc, #184]	@ (800761c <USB_SetTurnaroundTime+0x130>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d802      	bhi.n	800756e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007568:	230b      	movs	r3, #11
 800756a:	617b      	str	r3, [r7, #20]
 800756c:	e036      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	4a2a      	ldr	r2, [pc, #168]	@ (800761c <USB_SetTurnaroundTime+0x130>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d906      	bls.n	8007584 <USB_SetTurnaroundTime+0x98>
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	4a29      	ldr	r2, [pc, #164]	@ (8007620 <USB_SetTurnaroundTime+0x134>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d802      	bhi.n	8007584 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800757e:	230a      	movs	r3, #10
 8007580:	617b      	str	r3, [r7, #20]
 8007582:	e02b      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4a26      	ldr	r2, [pc, #152]	@ (8007620 <USB_SetTurnaroundTime+0x134>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d906      	bls.n	800759a <USB_SetTurnaroundTime+0xae>
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	4a25      	ldr	r2, [pc, #148]	@ (8007624 <USB_SetTurnaroundTime+0x138>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d202      	bcs.n	800759a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007594:	2309      	movs	r3, #9
 8007596:	617b      	str	r3, [r7, #20]
 8007598:	e020      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	4a21      	ldr	r2, [pc, #132]	@ (8007624 <USB_SetTurnaroundTime+0x138>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d306      	bcc.n	80075b0 <USB_SetTurnaroundTime+0xc4>
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	4a20      	ldr	r2, [pc, #128]	@ (8007628 <USB_SetTurnaroundTime+0x13c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d802      	bhi.n	80075b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80075aa:	2308      	movs	r3, #8
 80075ac:	617b      	str	r3, [r7, #20]
 80075ae:	e015      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007628 <USB_SetTurnaroundTime+0x13c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d906      	bls.n	80075c6 <USB_SetTurnaroundTime+0xda>
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	4a1c      	ldr	r2, [pc, #112]	@ (800762c <USB_SetTurnaroundTime+0x140>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d202      	bcs.n	80075c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80075c0:	2307      	movs	r3, #7
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	e00a      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80075c6:	2306      	movs	r3, #6
 80075c8:	617b      	str	r3, [r7, #20]
 80075ca:	e007      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80075cc:	79fb      	ldrb	r3, [r7, #7]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d102      	bne.n	80075d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80075d2:	2309      	movs	r3, #9
 80075d4:	617b      	str	r3, [r7, #20]
 80075d6:	e001      	b.n	80075dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80075d8:	2309      	movs	r3, #9
 80075da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	68da      	ldr	r2, [r3, #12]
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	029b      	lsls	r3, r3, #10
 80075f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80075f4:	431a      	orrs	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	371c      	adds	r7, #28
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	00d8acbf 	.word	0x00d8acbf
 800760c:	00e4e1c0 	.word	0x00e4e1c0
 8007610:	00f42400 	.word	0x00f42400
 8007614:	01067380 	.word	0x01067380
 8007618:	011a499f 	.word	0x011a499f
 800761c:	01312cff 	.word	0x01312cff
 8007620:	014ca43f 	.word	0x014ca43f
 8007624:	016e3600 	.word	0x016e3600
 8007628:	01a6ab1f 	.word	0x01a6ab1f
 800762c:	01e84800 	.word	0x01e84800

08007630 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f043 0201 	orr.w	r2, r3, #1
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f023 0201 	bic.w	r2, r3, #1
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007680:	2300      	movs	r3, #0
 8007682:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d115      	bne.n	80076c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80076a2:	200a      	movs	r0, #10
 80076a4:	f7fa fe8a 	bl	80023bc <HAL_Delay>
      ms += 10U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	330a      	adds	r3, #10
 80076ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 f93f 	bl	8008932 <USB_GetMode>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d01e      	beq.n	80076f8 <USB_SetCurrentMode+0x84>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2bc7      	cmp	r3, #199	@ 0xc7
 80076be:	d9f0      	bls.n	80076a2 <USB_SetCurrentMode+0x2e>
 80076c0:	e01a      	b.n	80076f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076c2:	78fb      	ldrb	r3, [r7, #3]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d115      	bne.n	80076f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80076d4:	200a      	movs	r0, #10
 80076d6:	f7fa fe71 	bl	80023bc <HAL_Delay>
      ms += 10U;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	330a      	adds	r3, #10
 80076de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f001 f926 	bl	8008932 <USB_GetMode>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d005      	beq.n	80076f8 <USB_SetCurrentMode+0x84>
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2bc7      	cmp	r3, #199	@ 0xc7
 80076f0:	d9f0      	bls.n	80076d4 <USB_SetCurrentMode+0x60>
 80076f2:	e001      	b.n	80076f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e005      	b.n	8007704 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2bc8      	cmp	r3, #200	@ 0xc8
 80076fc:	d101      	bne.n	8007702 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e000      	b.n	8007704 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800770c:	b084      	sub	sp, #16
 800770e:	b580      	push	{r7, lr}
 8007710:	b086      	sub	sp, #24
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800771a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007726:	2300      	movs	r3, #0
 8007728:	613b      	str	r3, [r7, #16]
 800772a:	e009      	b.n	8007740 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	3340      	adds	r3, #64	@ 0x40
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	2200      	movs	r2, #0
 8007738:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	3301      	adds	r3, #1
 800773e:	613b      	str	r3, [r7, #16]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	2b0e      	cmp	r3, #14
 8007744:	d9f2      	bls.n	800772c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007746:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800774a:	2b00      	cmp	r3, #0
 800774c:	d11c      	bne.n	8007788 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800775c:	f043 0302 	orr.w	r3, r3, #2
 8007760:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007766:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007772:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800777e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	639a      	str	r2, [r3, #56]	@ 0x38
 8007786:	e00b      	b.n	80077a0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007798:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80077a6:	461a      	mov	r2, r3
 80077a8:	2300      	movs	r3, #0
 80077aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80077ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d10d      	bne.n	80077d0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80077b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d104      	bne.n	80077c6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80077bc:	2100      	movs	r1, #0
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f968 	bl	8007a94 <USB_SetDevSpeed>
 80077c4:	e008      	b.n	80077d8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80077c6:	2101      	movs	r1, #1
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 f963 	bl	8007a94 <USB_SetDevSpeed>
 80077ce:	e003      	b.n	80077d8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077d0:	2103      	movs	r1, #3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f95e 	bl	8007a94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077d8:	2110      	movs	r1, #16
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f8fa 	bl	80079d4 <USB_FlushTxFifo>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f924 	bl	8007a38 <USB_FlushRxFifo>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007800:	461a      	mov	r2, r3
 8007802:	2300      	movs	r3, #0
 8007804:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800780c:	461a      	mov	r2, r3
 800780e:	2300      	movs	r3, #0
 8007810:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007818:	461a      	mov	r2, r3
 800781a:	2300      	movs	r3, #0
 800781c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800781e:	2300      	movs	r3, #0
 8007820:	613b      	str	r3, [r7, #16]
 8007822:	e043      	b.n	80078ac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007836:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800783a:	d118      	bne.n	800786e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d10a      	bne.n	8007858 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800784e:	461a      	mov	r2, r3
 8007850:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	e013      	b.n	8007880 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	015a      	lsls	r2, r3, #5
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4413      	add	r3, r2
 8007860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007864:	461a      	mov	r2, r3
 8007866:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	e008      	b.n	8007880 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	4413      	add	r3, r2
 8007876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800787a:	461a      	mov	r2, r3
 800787c:	2300      	movs	r3, #0
 800787e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	015a      	lsls	r2, r3, #5
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	4413      	add	r3, r2
 8007888:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800788c:	461a      	mov	r2, r3
 800788e:	2300      	movs	r3, #0
 8007890:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	015a      	lsls	r2, r3, #5
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4413      	add	r3, r2
 800789a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800789e:	461a      	mov	r2, r3
 80078a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80078a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	3301      	adds	r3, #1
 80078aa:	613b      	str	r3, [r7, #16]
 80078ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80078b0:	461a      	mov	r2, r3
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d3b5      	bcc.n	8007824 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078b8:	2300      	movs	r3, #0
 80078ba:	613b      	str	r3, [r7, #16]
 80078bc:	e043      	b.n	8007946 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078d4:	d118      	bne.n	8007908 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e8:	461a      	mov	r2, r3
 80078ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80078ee:	6013      	str	r3, [r2, #0]
 80078f0:	e013      	b.n	800791a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078fe:	461a      	mov	r2, r3
 8007900:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	e008      	b.n	800791a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007914:	461a      	mov	r2, r3
 8007916:	2300      	movs	r3, #0
 8007918:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4413      	add	r3, r2
 8007922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007926:	461a      	mov	r2, r3
 8007928:	2300      	movs	r3, #0
 800792a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007938:	461a      	mov	r2, r3
 800793a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800793e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	3301      	adds	r3, #1
 8007944:	613b      	str	r3, [r7, #16]
 8007946:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800794a:	461a      	mov	r2, r3
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	4293      	cmp	r3, r2
 8007950:	d3b5      	bcc.n	80078be <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007964:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007972:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007974:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007978:	2b00      	cmp	r3, #0
 800797a:	d105      	bne.n	8007988 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	f043 0210 	orr.w	r2, r3, #16
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	699a      	ldr	r2, [r3, #24]
 800798c:	4b10      	ldr	r3, [pc, #64]	@ (80079d0 <USB_DevInit+0x2c4>)
 800798e:	4313      	orrs	r3, r2
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007994:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007998:	2b00      	cmp	r3, #0
 800799a:	d005      	beq.n	80079a8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	f043 0208 	orr.w	r2, r3, #8
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80079a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d107      	bne.n	80079c0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079b8:	f043 0304 	orr.w	r3, r3, #4
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3718      	adds	r7, #24
 80079c6:	46bd      	mov	sp, r7
 80079c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079cc:	b004      	add	sp, #16
 80079ce:	4770      	bx	lr
 80079d0:	803c3800 	.word	0x803c3800

080079d4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b085      	sub	sp, #20
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
 80079dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079de:	2300      	movs	r3, #0
 80079e0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3301      	adds	r3, #1
 80079e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079ee:	d901      	bls.n	80079f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e01b      	b.n	8007a2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	daf2      	bge.n	80079e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	019b      	lsls	r3, r3, #6
 8007a04:	f043 0220 	orr.w	r2, r3, #32
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a18:	d901      	bls.n	8007a1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e006      	b.n	8007a2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f003 0320 	and.w	r3, r3, #32
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	d0f0      	beq.n	8007a0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3301      	adds	r3, #1
 8007a48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a50:	d901      	bls.n	8007a56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e018      	b.n	8007a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	daf2      	bge.n	8007a44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2210      	movs	r2, #16
 8007a66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a74:	d901      	bls.n	8007a7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e006      	b.n	8007a88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	f003 0310 	and.w	r3, r3, #16
 8007a82:	2b10      	cmp	r3, #16
 8007a84:	d0f0      	beq.n	8007a68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	78fb      	ldrb	r3, [r7, #3]
 8007aae:	68f9      	ldr	r1, [r7, #12]
 8007ab0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b087      	sub	sp, #28
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	f003 0306 	and.w	r3, r3, #6
 8007ade:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d102      	bne.n	8007aec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	75fb      	strb	r3, [r7, #23]
 8007aea:	e00a      	b.n	8007b02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d002      	beq.n	8007af8 <USB_GetDevSpeed+0x32>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b06      	cmp	r3, #6
 8007af6:	d102      	bne.n	8007afe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007af8:	2302      	movs	r3, #2
 8007afa:	75fb      	strb	r3, [r7, #23]
 8007afc:	e001      	b.n	8007b02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007afe:	230f      	movs	r3, #15
 8007b00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	371c      	adds	r7, #28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d13a      	bne.n	8007ba2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b32:	69da      	ldr	r2, [r3, #28]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	f003 030f 	and.w	r3, r3, #15
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	68f9      	ldr	r1, [r7, #12]
 8007b46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b4a:	4313      	orrs	r3, r2
 8007b4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d155      	bne.n	8007c10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	791b      	ldrb	r3, [r3, #4]
 8007b7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	059b      	lsls	r3, r3, #22
 8007b86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	0151      	lsls	r1, r2, #5
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	440a      	add	r2, r1
 8007b92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	e036      	b.n	8007c10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ba8:	69da      	ldr	r2, [r3, #28]
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	f003 030f 	and.w	r3, r3, #15
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007bb8:	041b      	lsls	r3, r3, #16
 8007bba:	68f9      	ldr	r1, [r7, #12]
 8007bbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d11a      	bne.n	8007c10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	791b      	ldrb	r3, [r3, #4]
 8007bf4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007bf6:	430b      	orrs	r3, r1
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	68ba      	ldr	r2, [r7, #8]
 8007bfc:	0151      	lsls	r1, r2, #5
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	440a      	add	r2, r1
 8007c02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007c06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
	...

08007c20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b085      	sub	sp, #20
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	785b      	ldrb	r3, [r3, #1]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d161      	bne.n	8007d00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c52:	d11f      	bne.n	8007c94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	015a      	lsls	r2, r3, #5
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68ba      	ldr	r2, [r7, #8]
 8007c64:	0151      	lsls	r1, r2, #5
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	440a      	add	r2, r1
 8007c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c6e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007c72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	015a      	lsls	r2, r3, #5
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68ba      	ldr	r2, [r7, #8]
 8007c84:	0151      	lsls	r1, r2, #5
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	440a      	add	r2, r1
 8007c8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	f003 030f 	and.w	r3, r3, #15
 8007ca4:	2101      	movs	r1, #1
 8007ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	43db      	mvns	r3, r3
 8007cae:	68f9      	ldr	r1, [r7, #12]
 8007cb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cbe:	69da      	ldr	r2, [r3, #28]
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	f003 030f 	and.w	r3, r3, #15
 8007cc8:	2101      	movs	r1, #1
 8007cca:	fa01 f303 	lsl.w	r3, r1, r3
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	43db      	mvns	r3, r3
 8007cd2:	68f9      	ldr	r1, [r7, #12]
 8007cd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cd8:	4013      	ands	r3, r2
 8007cda:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	0159      	lsls	r1, r3, #5
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	440b      	add	r3, r1
 8007cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4b35      	ldr	r3, [pc, #212]	@ (8007dd0 <USB_DeactivateEndpoint+0x1b0>)
 8007cfa:	4013      	ands	r3, r2
 8007cfc:	600b      	str	r3, [r1, #0]
 8007cfe:	e060      	b.n	8007dc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	015a      	lsls	r2, r3, #5
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	4413      	add	r3, r2
 8007d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d16:	d11f      	bne.n	8007d58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	0151      	lsls	r1, r2, #5
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	440a      	add	r2, r1
 8007d2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007d36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	015a      	lsls	r2, r3, #5
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	4413      	add	r3, r2
 8007d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	0151      	lsls	r1, r2, #5
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	440a      	add	r2, r1
 8007d4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007d52:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	f003 030f 	and.w	r3, r3, #15
 8007d68:	2101      	movs	r1, #1
 8007d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6e:	041b      	lsls	r3, r3, #16
 8007d70:	43db      	mvns	r3, r3
 8007d72:	68f9      	ldr	r1, [r7, #12]
 8007d74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d78:	4013      	ands	r3, r2
 8007d7a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d82:	69da      	ldr	r2, [r3, #28]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	f003 030f 	and.w	r3, r3, #15
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d92:	041b      	lsls	r3, r3, #16
 8007d94:	43db      	mvns	r3, r3
 8007d96:	68f9      	ldr	r1, [r7, #12]
 8007d98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	0159      	lsls	r1, r3, #5
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	440b      	add	r3, r1
 8007db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dba:	4619      	mov	r1, r3
 8007dbc:	4b05      	ldr	r3, [pc, #20]	@ (8007dd4 <USB_DeactivateEndpoint+0x1b4>)
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr
 8007dd0:	ec337800 	.word	0xec337800
 8007dd4:	eff37800 	.word	0xeff37800

08007dd8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b08a      	sub	sp, #40	@ 0x28
 8007ddc:	af02      	add	r7, sp, #8
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	4613      	mov	r3, r2
 8007de4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	781b      	ldrb	r3, [r3, #0]
 8007dee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	785b      	ldrb	r3, [r3, #1]
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	f040 817f 	bne.w	80080f8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d132      	bne.n	8007e68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	69fb      	ldr	r3, [r7, #28]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	69ba      	ldr	r2, [r7, #24]
 8007e12:	0151      	lsls	r1, r2, #5
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	440a      	add	r2, r1
 8007e18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e1c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007e20:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007e24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	0151      	lsls	r1, r2, #5
 8007e38:	69fa      	ldr	r2, [r7, #28]
 8007e3a:	440a      	add	r2, r1
 8007e3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e40:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e46:	69bb      	ldr	r3, [r7, #24]
 8007e48:	015a      	lsls	r2, r3, #5
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	69ba      	ldr	r2, [r7, #24]
 8007e56:	0151      	lsls	r1, r2, #5
 8007e58:	69fa      	ldr	r2, [r7, #28]
 8007e5a:	440a      	add	r2, r1
 8007e5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e60:	0cdb      	lsrs	r3, r3, #19
 8007e62:	04db      	lsls	r3, r3, #19
 8007e64:	6113      	str	r3, [r2, #16]
 8007e66:	e097      	b.n	8007f98 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	0151      	lsls	r1, r2, #5
 8007e7a:	69fa      	ldr	r2, [r7, #28]
 8007e7c:	440a      	add	r2, r1
 8007e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007e82:	0cdb      	lsrs	r3, r3, #19
 8007e84:	04db      	lsls	r3, r3, #19
 8007e86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	0151      	lsls	r1, r2, #5
 8007e9a:	69fa      	ldr	r2, [r7, #28]
 8007e9c:	440a      	add	r2, r1
 8007e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ea2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007ea6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007eaa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d11a      	bne.n	8007ee8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	691a      	ldr	r2, [r3, #16]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d903      	bls.n	8007ec6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	689a      	ldr	r2, [r3, #8]
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	69ba      	ldr	r2, [r7, #24]
 8007ed6:	0151      	lsls	r1, r2, #5
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	440a      	add	r2, r1
 8007edc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007ee0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ee4:	6113      	str	r3, [r2, #16]
 8007ee6:	e044      	b.n	8007f72 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	691a      	ldr	r2, [r3, #16]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	689b      	ldr	r3, [r3, #8]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	1e5a      	subs	r2, r3, #1
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f0a:	691a      	ldr	r2, [r3, #16]
 8007f0c:	8afb      	ldrh	r3, [r7, #22]
 8007f0e:	04d9      	lsls	r1, r3, #19
 8007f10:	4ba4      	ldr	r3, [pc, #656]	@ (80081a4 <USB_EPStartXfer+0x3cc>)
 8007f12:	400b      	ands	r3, r1
 8007f14:	69b9      	ldr	r1, [r7, #24]
 8007f16:	0148      	lsls	r0, r1, #5
 8007f18:	69f9      	ldr	r1, [r7, #28]
 8007f1a:	4401      	add	r1, r0
 8007f1c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007f20:	4313      	orrs	r3, r2
 8007f22:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	791b      	ldrb	r3, [r3, #4]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d122      	bne.n	8007f72 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	69ba      	ldr	r2, [r7, #24]
 8007f3c:	0151      	lsls	r1, r2, #5
 8007f3e:	69fa      	ldr	r2, [r7, #28]
 8007f40:	440a      	add	r2, r1
 8007f42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f46:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007f4a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007f4c:	69bb      	ldr	r3, [r7, #24]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f58:	691a      	ldr	r2, [r3, #16]
 8007f5a:	8afb      	ldrh	r3, [r7, #22]
 8007f5c:	075b      	lsls	r3, r3, #29
 8007f5e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007f62:	69b9      	ldr	r1, [r7, #24]
 8007f64:	0148      	lsls	r0, r1, #5
 8007f66:	69f9      	ldr	r1, [r7, #28]
 8007f68:	4401      	add	r1, r0
 8007f6a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	015a      	lsls	r2, r3, #5
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	4413      	add	r3, r2
 8007f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f7e:	691a      	ldr	r2, [r3, #16]
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f88:	69b9      	ldr	r1, [r7, #24]
 8007f8a:	0148      	lsls	r0, r1, #5
 8007f8c:	69f9      	ldr	r1, [r7, #28]
 8007f8e:	4401      	add	r1, r0
 8007f90:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007f94:	4313      	orrs	r3, r2
 8007f96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f98:	79fb      	ldrb	r3, [r7, #7]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d14b      	bne.n	8008036 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d009      	beq.n	8007fba <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	69db      	ldr	r3, [r3, #28]
 8007fb8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	791b      	ldrb	r3, [r3, #4]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d128      	bne.n	8008014 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d110      	bne.n	8007ff4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	69ba      	ldr	r2, [r7, #24]
 8007fe2:	0151      	lsls	r1, r2, #5
 8007fe4:	69fa      	ldr	r2, [r7, #28]
 8007fe6:	440a      	add	r2, r1
 8007fe8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007fec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ff0:	6013      	str	r3, [r2, #0]
 8007ff2:	e00f      	b.n	8008014 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	015a      	lsls	r2, r3, #5
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69ba      	ldr	r2, [r7, #24]
 8008004:	0151      	lsls	r1, r2, #5
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	440a      	add	r2, r1
 800800a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800800e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008012:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	015a      	lsls	r2, r3, #5
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	4413      	add	r3, r2
 800801c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69ba      	ldr	r2, [r7, #24]
 8008024:	0151      	lsls	r1, r2, #5
 8008026:	69fa      	ldr	r2, [r7, #28]
 8008028:	440a      	add	r2, r1
 800802a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800802e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008032:	6013      	str	r3, [r2, #0]
 8008034:	e166      	b.n	8008304 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	0151      	lsls	r1, r2, #5
 8008048:	69fa      	ldr	r2, [r7, #28]
 800804a:	440a      	add	r2, r1
 800804c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008050:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008054:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	791b      	ldrb	r3, [r3, #4]
 800805a:	2b01      	cmp	r3, #1
 800805c:	d015      	beq.n	800808a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 814e 	beq.w	8008304 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800806e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	f003 030f 	and.w	r3, r3, #15
 8008078:	2101      	movs	r1, #1
 800807a:	fa01 f303 	lsl.w	r3, r1, r3
 800807e:	69f9      	ldr	r1, [r7, #28]
 8008080:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008084:	4313      	orrs	r3, r2
 8008086:	634b      	str	r3, [r1, #52]	@ 0x34
 8008088:	e13c      	b.n	8008304 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008096:	2b00      	cmp	r3, #0
 8008098:	d110      	bne.n	80080bc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	015a      	lsls	r2, r3, #5
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	4413      	add	r3, r2
 80080a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	0151      	lsls	r1, r2, #5
 80080ac:	69fa      	ldr	r2, [r7, #28]
 80080ae:	440a      	add	r2, r1
 80080b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80080b8:	6013      	str	r3, [r2, #0]
 80080ba:	e00f      	b.n	80080dc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	0151      	lsls	r1, r2, #5
 80080ce:	69fa      	ldr	r2, [r7, #28]
 80080d0:	440a      	add	r2, r1
 80080d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80080d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80080da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	68d9      	ldr	r1, [r3, #12]
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	781a      	ldrb	r2, [r3, #0]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	b298      	uxth	r0, r3
 80080ea:	79fb      	ldrb	r3, [r7, #7]
 80080ec:	9300      	str	r3, [sp, #0]
 80080ee:	4603      	mov	r3, r0
 80080f0:	68f8      	ldr	r0, [r7, #12]
 80080f2:	f000 f9b9 	bl	8008468 <USB_WritePacket>
 80080f6:	e105      	b.n	8008304 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	69fb      	ldr	r3, [r7, #28]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	69ba      	ldr	r2, [r7, #24]
 8008108:	0151      	lsls	r1, r2, #5
 800810a:	69fa      	ldr	r2, [r7, #28]
 800810c:	440a      	add	r2, r1
 800810e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008112:	0cdb      	lsrs	r3, r3, #19
 8008114:	04db      	lsls	r3, r3, #19
 8008116:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	0151      	lsls	r1, r2, #5
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	440a      	add	r2, r1
 800812e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008132:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008136:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800813a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d132      	bne.n	80081a8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d003      	beq.n	8008152 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	689a      	ldr	r2, [r3, #8]
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	689a      	ldr	r2, [r3, #8]
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	4413      	add	r3, r2
 8008162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008166:	691a      	ldr	r2, [r3, #16]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	6a1b      	ldr	r3, [r3, #32]
 800816c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008170:	69b9      	ldr	r1, [r7, #24]
 8008172:	0148      	lsls	r0, r1, #5
 8008174:	69f9      	ldr	r1, [r7, #28]
 8008176:	4401      	add	r1, r0
 8008178:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800817c:	4313      	orrs	r3, r2
 800817e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	4413      	add	r3, r2
 8008188:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	0151      	lsls	r1, r2, #5
 8008192:	69fa      	ldr	r2, [r7, #28]
 8008194:	440a      	add	r2, r1
 8008196:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800819a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800819e:	6113      	str	r3, [r2, #16]
 80081a0:	e062      	b.n	8008268 <USB_EPStartXfer+0x490>
 80081a2:	bf00      	nop
 80081a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d123      	bne.n	80081f8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	015a      	lsls	r2, r3, #5
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	4413      	add	r3, r2
 80081b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081bc:	691a      	ldr	r2, [r3, #16]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081c6:	69b9      	ldr	r1, [r7, #24]
 80081c8:	0148      	lsls	r0, r1, #5
 80081ca:	69f9      	ldr	r1, [r7, #28]
 80081cc:	4401      	add	r1, r0
 80081ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80081d2:	4313      	orrs	r3, r2
 80081d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081e2:	691b      	ldr	r3, [r3, #16]
 80081e4:	69ba      	ldr	r2, [r7, #24]
 80081e6:	0151      	lsls	r1, r2, #5
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	440a      	add	r2, r1
 80081ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80081f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80081f4:	6113      	str	r3, [r2, #16]
 80081f6:	e037      	b.n	8008268 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	691a      	ldr	r2, [r3, #16]
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	4413      	add	r3, r2
 8008202:	1e5a      	subs	r2, r3, #1
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	fbb2 f3f3 	udiv	r3, r2, r3
 800820c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	8afa      	ldrh	r2, [r7, #22]
 8008214:	fb03 f202 	mul.w	r2, r3, r2
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	015a      	lsls	r2, r3, #5
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	4413      	add	r3, r2
 8008224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008228:	691a      	ldr	r2, [r3, #16]
 800822a:	8afb      	ldrh	r3, [r7, #22]
 800822c:	04d9      	lsls	r1, r3, #19
 800822e:	4b38      	ldr	r3, [pc, #224]	@ (8008310 <USB_EPStartXfer+0x538>)
 8008230:	400b      	ands	r3, r1
 8008232:	69b9      	ldr	r1, [r7, #24]
 8008234:	0148      	lsls	r0, r1, #5
 8008236:	69f9      	ldr	r1, [r7, #28]
 8008238:	4401      	add	r1, r0
 800823a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800823e:	4313      	orrs	r3, r2
 8008240:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	69fb      	ldr	r3, [r7, #28]
 8008248:	4413      	add	r3, r2
 800824a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800824e:	691a      	ldr	r2, [r3, #16]
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	6a1b      	ldr	r3, [r3, #32]
 8008254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008258:	69b9      	ldr	r1, [r7, #24]
 800825a:	0148      	lsls	r0, r1, #5
 800825c:	69f9      	ldr	r1, [r7, #28]
 800825e:	4401      	add	r1, r0
 8008260:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008264:	4313      	orrs	r3, r2
 8008266:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008268:	79fb      	ldrb	r3, [r7, #7]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d10d      	bne.n	800828a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d009      	beq.n	800828a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	68d9      	ldr	r1, [r3, #12]
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008286:	460a      	mov	r2, r1
 8008288:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	791b      	ldrb	r3, [r3, #4]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d128      	bne.n	80082e4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d110      	bne.n	80082c4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	69ba      	ldr	r2, [r7, #24]
 80082b2:	0151      	lsls	r1, r2, #5
 80082b4:	69fa      	ldr	r2, [r7, #28]
 80082b6:	440a      	add	r2, r1
 80082b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80082c0:	6013      	str	r3, [r2, #0]
 80082c2:	e00f      	b.n	80082e4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80082c4:	69bb      	ldr	r3, [r7, #24]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	69ba      	ldr	r2, [r7, #24]
 80082d4:	0151      	lsls	r1, r2, #5
 80082d6:	69fa      	ldr	r2, [r7, #28]
 80082d8:	440a      	add	r2, r1
 80082da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	0151      	lsls	r1, r2, #5
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	440a      	add	r2, r1
 80082fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80082fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008302:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008304:	2300      	movs	r3, #0
}
 8008306:	4618      	mov	r0, r3
 8008308:	3720      	adds	r7, #32
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	1ff80000 	.word	0x1ff80000

08008314 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800831e:	2300      	movs	r3, #0
 8008320:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	785b      	ldrb	r3, [r3, #1]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d14a      	bne.n	80083c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	015a      	lsls	r2, r3, #5
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	4413      	add	r3, r2
 800833c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008346:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800834a:	f040 8086 	bne.w	800845a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	015a      	lsls	r2, r3, #5
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	4413      	add	r3, r2
 8008358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	7812      	ldrb	r2, [r2, #0]
 8008362:	0151      	lsls	r1, r2, #5
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	440a      	add	r2, r1
 8008368:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800836c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008370:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	015a      	lsls	r2, r3, #5
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	4413      	add	r3, r2
 800837c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	7812      	ldrb	r2, [r2, #0]
 8008386:	0151      	lsls	r1, r2, #5
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	440a      	add	r2, r1
 800838c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008390:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008394:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3301      	adds	r3, #1
 800839a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d902      	bls.n	80083ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80083a6:	2301      	movs	r3, #1
 80083a8:	75fb      	strb	r3, [r7, #23]
          break;
 80083aa:	e056      	b.n	800845a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	015a      	lsls	r2, r3, #5
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	4413      	add	r3, r2
 80083b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083c4:	d0e7      	beq.n	8008396 <USB_EPStopXfer+0x82>
 80083c6:	e048      	b.n	800845a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083e0:	d13b      	bne.n	800845a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	7812      	ldrb	r2, [r2, #0]
 80083f6:	0151      	lsls	r1, r2, #5
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	440a      	add	r2, r1
 80083fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008400:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008404:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	781b      	ldrb	r3, [r3, #0]
 800840a:	015a      	lsls	r2, r3, #5
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	4413      	add	r3, r2
 8008410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	7812      	ldrb	r2, [r2, #0]
 800841a:	0151      	lsls	r1, r2, #5
 800841c:	693a      	ldr	r2, [r7, #16]
 800841e:	440a      	add	r2, r1
 8008420:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008424:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008428:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3301      	adds	r3, #1
 800842e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008436:	4293      	cmp	r3, r2
 8008438:	d902      	bls.n	8008440 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	75fb      	strb	r3, [r7, #23]
          break;
 800843e:	e00c      	b.n	800845a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	781b      	ldrb	r3, [r3, #0]
 8008444:	015a      	lsls	r2, r3, #5
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	4413      	add	r3, r2
 800844a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008454:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008458:	d0e7      	beq.n	800842a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800845a:	7dfb      	ldrb	r3, [r7, #23]
}
 800845c:	4618      	mov	r0, r3
 800845e:	371c      	adds	r7, #28
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008468:	b480      	push	{r7}
 800846a:	b089      	sub	sp, #36	@ 0x24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	4611      	mov	r1, r2
 8008474:	461a      	mov	r2, r3
 8008476:	460b      	mov	r3, r1
 8008478:	71fb      	strb	r3, [r7, #7]
 800847a:	4613      	mov	r3, r2
 800847c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008486:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800848a:	2b00      	cmp	r3, #0
 800848c:	d123      	bne.n	80084d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800848e:	88bb      	ldrh	r3, [r7, #4]
 8008490:	3303      	adds	r3, #3
 8008492:	089b      	lsrs	r3, r3, #2
 8008494:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008496:	2300      	movs	r3, #0
 8008498:	61bb      	str	r3, [r7, #24]
 800849a:	e018      	b.n	80084ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800849c:	79fb      	ldrb	r3, [r7, #7]
 800849e:	031a      	lsls	r2, r3, #12
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80084a8:	461a      	mov	r2, r3
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	3301      	adds	r3, #1
 80084b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	3301      	adds	r3, #1
 80084ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	3301      	adds	r3, #1
 80084c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	3301      	adds	r3, #1
 80084c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	3301      	adds	r3, #1
 80084cc:	61bb      	str	r3, [r7, #24]
 80084ce:	69ba      	ldr	r2, [r7, #24]
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d3e2      	bcc.n	800849c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80084d6:	2300      	movs	r3, #0
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3724      	adds	r7, #36	@ 0x24
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b08b      	sub	sp, #44	@ 0x2c
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	4613      	mov	r3, r2
 80084f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80084fa:	88fb      	ldrh	r3, [r7, #6]
 80084fc:	089b      	lsrs	r3, r3, #2
 80084fe:	b29b      	uxth	r3, r3
 8008500:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008502:	88fb      	ldrh	r3, [r7, #6]
 8008504:	f003 0303 	and.w	r3, r3, #3
 8008508:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800850a:	2300      	movs	r3, #0
 800850c:	623b      	str	r3, [r7, #32]
 800850e:	e014      	b.n	800853a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851a:	601a      	str	r2, [r3, #0]
    pDest++;
 800851c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800851e:	3301      	adds	r3, #1
 8008520:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008524:	3301      	adds	r3, #1
 8008526:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800852a:	3301      	adds	r3, #1
 800852c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800852e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008530:	3301      	adds	r3, #1
 8008532:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	3301      	adds	r3, #1
 8008538:	623b      	str	r3, [r7, #32]
 800853a:	6a3a      	ldr	r2, [r7, #32]
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	429a      	cmp	r2, r3
 8008540:	d3e6      	bcc.n	8008510 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008542:	8bfb      	ldrh	r3, [r7, #30]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d01e      	beq.n	8008586 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008548:	2300      	movs	r3, #0
 800854a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800854c:	69bb      	ldr	r3, [r7, #24]
 800854e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008552:	461a      	mov	r2, r3
 8008554:	f107 0310 	add.w	r3, r7, #16
 8008558:	6812      	ldr	r2, [r2, #0]
 800855a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800855c:	693a      	ldr	r2, [r7, #16]
 800855e:	6a3b      	ldr	r3, [r7, #32]
 8008560:	b2db      	uxtb	r3, r3
 8008562:	00db      	lsls	r3, r3, #3
 8008564:	fa22 f303 	lsr.w	r3, r2, r3
 8008568:	b2da      	uxtb	r2, r3
 800856a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856c:	701a      	strb	r2, [r3, #0]
      i++;
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	3301      	adds	r3, #1
 8008572:	623b      	str	r3, [r7, #32]
      pDest++;
 8008574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008576:	3301      	adds	r3, #1
 8008578:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800857a:	8bfb      	ldrh	r3, [r7, #30]
 800857c:	3b01      	subs	r3, #1
 800857e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008580:	8bfb      	ldrh	r3, [r7, #30]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1ea      	bne.n	800855c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008588:	4618      	mov	r0, r3
 800858a:	372c      	adds	r7, #44	@ 0x2c
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	785b      	ldrb	r3, [r3, #1]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d12c      	bne.n	800860a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	db12      	blt.n	80085e8 <USB_EPSetStall+0x54>
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00f      	beq.n	80085e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	015a      	lsls	r2, r3, #5
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4413      	add	r3, r2
 80085d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	0151      	lsls	r1, r2, #5
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	440a      	add	r2, r1
 80085de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80085e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	68ba      	ldr	r2, [r7, #8]
 80085f8:	0151      	lsls	r1, r2, #5
 80085fa:	68fa      	ldr	r2, [r7, #12]
 80085fc:	440a      	add	r2, r1
 80085fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008602:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008606:	6013      	str	r3, [r2, #0]
 8008608:	e02b      	b.n	8008662 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	015a      	lsls	r2, r3, #5
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	4413      	add	r3, r2
 8008612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	db12      	blt.n	8008642 <USB_EPSetStall+0xae>
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d00f      	beq.n	8008642 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	015a      	lsls	r2, r3, #5
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4413      	add	r3, r2
 800862a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	0151      	lsls	r1, r2, #5
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	440a      	add	r2, r1
 8008638:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800863c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008640:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	4413      	add	r3, r2
 800864a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	0151      	lsls	r1, r2, #5
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	440a      	add	r2, r1
 8008658:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800865c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008660:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	785b      	ldrb	r3, [r3, #1]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d128      	bne.n	80086de <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	0151      	lsls	r1, r2, #5
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	440a      	add	r2, r1
 80086a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80086aa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	791b      	ldrb	r3, [r3, #4]
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d003      	beq.n	80086bc <USB_EPClearStall+0x4c>
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	791b      	ldrb	r3, [r3, #4]
 80086b8:	2b02      	cmp	r3, #2
 80086ba:	d138      	bne.n	800872e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	0151      	lsls	r1, r2, #5
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	440a      	add	r2, r1
 80086d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80086d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086da:	6013      	str	r3, [r2, #0]
 80086dc:	e027      	b.n	800872e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	015a      	lsls	r2, r3, #5
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4413      	add	r3, r2
 80086e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	0151      	lsls	r1, r2, #5
 80086f0:	68fa      	ldr	r2, [r7, #12]
 80086f2:	440a      	add	r2, r1
 80086f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086f8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80086fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	791b      	ldrb	r3, [r3, #4]
 8008702:	2b03      	cmp	r3, #3
 8008704:	d003      	beq.n	800870e <USB_EPClearStall+0x9e>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	791b      	ldrb	r3, [r3, #4]
 800870a:	2b02      	cmp	r3, #2
 800870c:	d10f      	bne.n	800872e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	015a      	lsls	r2, r3, #5
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	4413      	add	r3, r2
 8008716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68ba      	ldr	r2, [r7, #8]
 800871e:	0151      	lsls	r1, r2, #5
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	440a      	add	r2, r1
 8008724:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008728:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800872c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800872e:	2300      	movs	r3, #0
}
 8008730:	4618      	mov	r0, r3
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	460b      	mov	r3, r1
 8008746:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800875a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800875e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	011b      	lsls	r3, r3, #4
 800876c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8008770:	68f9      	ldr	r1, [r7, #12]
 8008772:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008776:	4313      	orrs	r3, r2
 8008778:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800877a:	2300      	movs	r3, #0
}
 800877c:	4618      	mov	r0, r3
 800877e:	3714      	adds	r7, #20
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80087a2:	f023 0303 	bic.w	r3, r3, #3
 80087a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087b6:	f023 0302 	bic.w	r3, r3, #2
 80087ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b085      	sub	sp, #20
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68fa      	ldr	r2, [r7, #12]
 80087e0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80087e4:	f023 0303 	bic.w	r3, r3, #3
 80087e8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087f8:	f043 0302 	orr.w	r3, r3, #2
 80087fc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	695b      	ldr	r3, [r3, #20]
 8008818:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	4013      	ands	r3, r2
 8008822:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008824:	68fb      	ldr	r3, [r7, #12]
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800884e:	69db      	ldr	r3, [r3, #28]
 8008850:	68ba      	ldr	r2, [r7, #8]
 8008852:	4013      	ands	r3, r2
 8008854:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	0c1b      	lsrs	r3, r3, #16
}
 800885a:	4618      	mov	r0, r3
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr

08008866 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008866:	b480      	push	{r7}
 8008868:	b085      	sub	sp, #20
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008878:	699b      	ldr	r3, [r3, #24]
 800887a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008882:	69db      	ldr	r3, [r3, #28]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	4013      	ands	r3, r2
 8008888:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	b29b      	uxth	r3, r3
}
 800888e:	4618      	mov	r0, r3
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr

0800889a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800889a:	b480      	push	{r7}
 800889c:	b085      	sub	sp, #20
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
 80088a2:	460b      	mov	r3, r1
 80088a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80088aa:	78fb      	ldrb	r3, [r7, #3]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088c0:	695b      	ldr	r3, [r3, #20]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	4013      	ands	r3, r2
 80088c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088c8:	68bb      	ldr	r3, [r7, #8]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b087      	sub	sp, #28
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	460b      	mov	r3, r1
 80088e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80088fa:	78fb      	ldrb	r3, [r7, #3]
 80088fc:	f003 030f 	and.w	r3, r3, #15
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	fa22 f303 	lsr.w	r3, r2, r3
 8008906:	01db      	lsls	r3, r3, #7
 8008908:	b2db      	uxtb	r3, r3
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	4313      	orrs	r3, r2
 800890e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008910:	78fb      	ldrb	r3, [r7, #3]
 8008912:	015a      	lsls	r2, r3, #5
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	4413      	add	r3, r2
 8008918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	693a      	ldr	r2, [r7, #16]
 8008920:	4013      	ands	r3, r2
 8008922:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008924:	68bb      	ldr	r3, [r7, #8]
}
 8008926:	4618      	mov	r0, r3
 8008928:	371c      	adds	r7, #28
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008932:	b480      	push	{r7}
 8008934:	b083      	sub	sp, #12
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	f003 0301 	and.w	r3, r3, #1
}
 8008942:	4618      	mov	r0, r3
 8008944:	370c      	adds	r7, #12
 8008946:	46bd      	mov	sp, r7
 8008948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894c:	4770      	bx	lr

0800894e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800894e:	b480      	push	{r7}
 8008950:	b085      	sub	sp, #20
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68fa      	ldr	r2, [r7, #12]
 8008964:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008968:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800896c:	f023 0307 	bic.w	r3, r3, #7
 8008970:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008984:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	3714      	adds	r7, #20
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008994:	b480      	push	{r7}
 8008996:	b087      	sub	sp, #28
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	460b      	mov	r3, r1
 800899e:	607a      	str	r2, [r7, #4]
 80089a0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	333c      	adds	r3, #60	@ 0x3c
 80089aa:	3304      	adds	r3, #4
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	4a26      	ldr	r2, [pc, #152]	@ (8008a4c <USB_EP0_OutStart+0xb8>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d90a      	bls.n	80089ce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80089c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80089c8:	d101      	bne.n	80089ce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80089ca:	2300      	movs	r3, #0
 80089cc:	e037      	b.n	8008a3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089d4:	461a      	mov	r2, r3
 80089d6:	2300      	movs	r3, #0
 80089d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80089ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80089fc:	f043 0318 	orr.w	r3, r3, #24
 8008a00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a08:	691b      	ldr	r3, [r3, #16]
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a10:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8008a14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008a16:	7afb      	ldrb	r3, [r7, #11]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d10f      	bne.n	8008a3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a22:	461a      	mov	r2, r3
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a36:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008a3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	371c      	adds	r7, #28
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	4f54300a 	.word	0x4f54300a

08008a50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b085      	sub	sp, #20
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a68:	d901      	bls.n	8008a6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e01b      	b.n	8008aa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	daf2      	bge.n	8008a5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	f043 0201 	orr.w	r2, r3, #1
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008a92:	d901      	bls.n	8008a98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008a94:	2303      	movs	r3, #3
 8008a96:	e006      	b.n	8008aa6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	f003 0301 	and.w	r3, r3, #1
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d0f0      	beq.n	8008a86 <USB_CoreReset+0x36>

  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3714      	adds	r7, #20
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr
	...

08008ab4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ac0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008ac4:	f002 fc30 	bl	800b328 <USBD_static_malloc>
 8008ac8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d109      	bne.n	8008ae4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	32b0      	adds	r2, #176	@ 0xb0
 8008ada:	2100      	movs	r1, #0
 8008adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	e0d4      	b.n	8008c8e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008ae4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8008ae8:	2100      	movs	r1, #0
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f004 fa07 	bl	800cefe <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	32b0      	adds	r2, #176	@ 0xb0
 8008afa:	68f9      	ldr	r1, [r7, #12]
 8008afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	32b0      	adds	r2, #176	@ 0xb0
 8008b0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	7c1b      	ldrb	r3, [r3, #16]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d138      	bne.n	8008b8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8008c98 <USBD_CDC_Init+0x1e4>)
 8008b1e:	7819      	ldrb	r1, [r3, #0]
 8008b20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b24:	2202      	movs	r2, #2
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f002 fadb 	bl	800b0e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8008c98 <USBD_CDC_Init+0x1e4>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	f003 020f 	and.w	r2, r3, #15
 8008b34:	6879      	ldr	r1, [r7, #4]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	440b      	add	r3, r1
 8008b40:	3324      	adds	r3, #36	@ 0x24
 8008b42:	2201      	movs	r2, #1
 8008b44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008b46:	4b55      	ldr	r3, [pc, #340]	@ (8008c9c <USBD_CDC_Init+0x1e8>)
 8008b48:	7819      	ldrb	r1, [r3, #0]
 8008b4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008b4e:	2202      	movs	r2, #2
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f002 fac6 	bl	800b0e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008b56:	4b51      	ldr	r3, [pc, #324]	@ (8008c9c <USBD_CDC_Init+0x1e8>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	f003 020f 	and.w	r2, r3, #15
 8008b5e:	6879      	ldr	r1, [r7, #4]
 8008b60:	4613      	mov	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	440b      	add	r3, r1
 8008b6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b6e:	2201      	movs	r2, #1
 8008b70:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008b72:	4b4b      	ldr	r3, [pc, #300]	@ (8008ca0 <USBD_CDC_Init+0x1ec>)
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	f003 020f 	and.w	r2, r3, #15
 8008b7a:	6879      	ldr	r1, [r7, #4]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	440b      	add	r3, r1
 8008b86:	3326      	adds	r3, #38	@ 0x26
 8008b88:	2210      	movs	r2, #16
 8008b8a:	801a      	strh	r2, [r3, #0]
 8008b8c:	e035      	b.n	8008bfa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008b8e:	4b42      	ldr	r3, [pc, #264]	@ (8008c98 <USBD_CDC_Init+0x1e4>)
 8008b90:	7819      	ldrb	r1, [r3, #0]
 8008b92:	2340      	movs	r3, #64	@ 0x40
 8008b94:	2202      	movs	r2, #2
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f002 faa3 	bl	800b0e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008b9c:	4b3e      	ldr	r3, [pc, #248]	@ (8008c98 <USBD_CDC_Init+0x1e4>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	f003 020f 	and.w	r2, r3, #15
 8008ba4:	6879      	ldr	r1, [r7, #4]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	4413      	add	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	440b      	add	r3, r1
 8008bb0:	3324      	adds	r3, #36	@ 0x24
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008bb6:	4b39      	ldr	r3, [pc, #228]	@ (8008c9c <USBD_CDC_Init+0x1e8>)
 8008bb8:	7819      	ldrb	r1, [r3, #0]
 8008bba:	2340      	movs	r3, #64	@ 0x40
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f002 fa8f 	bl	800b0e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008bc4:	4b35      	ldr	r3, [pc, #212]	@ (8008c9c <USBD_CDC_Init+0x1e8>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	f003 020f 	and.w	r2, r3, #15
 8008bcc:	6879      	ldr	r1, [r7, #4]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	009b      	lsls	r3, r3, #2
 8008bd2:	4413      	add	r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	440b      	add	r3, r1
 8008bd8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008bdc:	2201      	movs	r2, #1
 8008bde:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008be0:	4b2f      	ldr	r3, [pc, #188]	@ (8008ca0 <USBD_CDC_Init+0x1ec>)
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	f003 020f 	and.w	r2, r3, #15
 8008be8:	6879      	ldr	r1, [r7, #4]
 8008bea:	4613      	mov	r3, r2
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	4413      	add	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	440b      	add	r3, r1
 8008bf4:	3326      	adds	r3, #38	@ 0x26
 8008bf6:	2210      	movs	r2, #16
 8008bf8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008bfa:	4b29      	ldr	r3, [pc, #164]	@ (8008ca0 <USBD_CDC_Init+0x1ec>)
 8008bfc:	7819      	ldrb	r1, [r3, #0]
 8008bfe:	2308      	movs	r3, #8
 8008c00:	2203      	movs	r2, #3
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f002 fa6d 	bl	800b0e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008c08:	4b25      	ldr	r3, [pc, #148]	@ (8008ca0 <USBD_CDC_Init+0x1ec>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	f003 020f 	and.w	r2, r3, #15
 8008c10:	6879      	ldr	r1, [r7, #4]
 8008c12:	4613      	mov	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	4413      	add	r3, r2
 8008c18:	009b      	lsls	r3, r3, #2
 8008c1a:	440b      	add	r3, r1
 8008c1c:	3324      	adds	r3, #36	@ 0x24
 8008c1e:	2201      	movs	r2, #1
 8008c20:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	33b0      	adds	r3, #176	@ 0xb0
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d101      	bne.n	8008c5c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	e018      	b.n	8008c8e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	7c1b      	ldrb	r3, [r3, #16]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10a      	bne.n	8008c7a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c64:	4b0d      	ldr	r3, [pc, #52]	@ (8008c9c <USBD_CDC_Init+0x1e8>)
 8008c66:	7819      	ldrb	r1, [r3, #0]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f002 fb24 	bl	800b2c0 <USBD_LL_PrepareReceive>
 8008c78:	e008      	b.n	8008c8c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c7a:	4b08      	ldr	r3, [pc, #32]	@ (8008c9c <USBD_CDC_Init+0x1e8>)
 8008c7c:	7819      	ldrb	r1, [r3, #0]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008c84:	2340      	movs	r3, #64	@ 0x40
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f002 fb1a 	bl	800b2c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	2000009b 	.word	0x2000009b
 8008c9c:	2000009c 	.word	0x2000009c
 8008ca0:	2000009d 	.word	0x2000009d

08008ca4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008cb0:	4b3a      	ldr	r3, [pc, #232]	@ (8008d9c <USBD_CDC_DeInit+0xf8>)
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f002 fa39 	bl	800b12e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008cbc:	4b37      	ldr	r3, [pc, #220]	@ (8008d9c <USBD_CDC_DeInit+0xf8>)
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	f003 020f 	and.w	r2, r3, #15
 8008cc4:	6879      	ldr	r1, [r7, #4]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	440b      	add	r3, r1
 8008cd0:	3324      	adds	r3, #36	@ 0x24
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008cd6:	4b32      	ldr	r3, [pc, #200]	@ (8008da0 <USBD_CDC_DeInit+0xfc>)
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	4619      	mov	r1, r3
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f002 fa26 	bl	800b12e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8008da0 <USBD_CDC_DeInit+0xfc>)
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	f003 020f 	and.w	r2, r3, #15
 8008cea:	6879      	ldr	r1, [r7, #4]
 8008cec:	4613      	mov	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	440b      	add	r3, r1
 8008cf6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008cfe:	4b29      	ldr	r3, [pc, #164]	@ (8008da4 <USBD_CDC_DeInit+0x100>)
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f002 fa12 	bl	800b12e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008d0a:	4b26      	ldr	r3, [pc, #152]	@ (8008da4 <USBD_CDC_DeInit+0x100>)
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	f003 020f 	and.w	r2, r3, #15
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	4613      	mov	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	440b      	add	r3, r1
 8008d1e:	3324      	adds	r3, #36	@ 0x24
 8008d20:	2200      	movs	r2, #0
 8008d22:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008d24:	4b1f      	ldr	r3, [pc, #124]	@ (8008da4 <USBD_CDC_DeInit+0x100>)
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	f003 020f 	and.w	r2, r3, #15
 8008d2c:	6879      	ldr	r1, [r7, #4]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	4413      	add	r3, r2
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	440b      	add	r3, r1
 8008d38:	3326      	adds	r3, #38	@ 0x26
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	32b0      	adds	r2, #176	@ 0xb0
 8008d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d01f      	beq.n	8008d90 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	33b0      	adds	r3, #176	@ 0xb0
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	4413      	add	r3, r2
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	32b0      	adds	r2, #176	@ 0xb0
 8008d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f002 fae6 	bl	800b344 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	32b0      	adds	r2, #176	@ 0xb0
 8008d82:	2100      	movs	r1, #0
 8008d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3708      	adds	r7, #8
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	2000009b 	.word	0x2000009b
 8008da0:	2000009c 	.word	0x2000009c
 8008da4:	2000009d 	.word	0x2000009d

08008da8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	32b0      	adds	r2, #176	@ 0xb0
 8008dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e0bf      	b.n	8008f58 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d050      	beq.n	8008e86 <USBD_CDC_Setup+0xde>
 8008de4:	2b20      	cmp	r3, #32
 8008de6:	f040 80af 	bne.w	8008f48 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	88db      	ldrh	r3, [r3, #6]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d03a      	beq.n	8008e68 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	781b      	ldrb	r3, [r3, #0]
 8008df6:	b25b      	sxtb	r3, r3
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	da1b      	bge.n	8008e34 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	33b0      	adds	r3, #176	@ 0xb0
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008e12:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e14:	683a      	ldr	r2, [r7, #0]
 8008e16:	88d2      	ldrh	r2, [r2, #6]
 8008e18:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	88db      	ldrh	r3, [r3, #6]
 8008e1e:	2b07      	cmp	r3, #7
 8008e20:	bf28      	it	cs
 8008e22:	2307      	movcs	r3, #7
 8008e24:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	89fa      	ldrh	r2, [r7, #14]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f001 fd53 	bl	800a8d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008e32:	e090      	b.n	8008f56 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	785a      	ldrb	r2, [r3, #1]
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	88db      	ldrh	r3, [r3, #6]
 8008e42:	2b3f      	cmp	r3, #63	@ 0x3f
 8008e44:	d803      	bhi.n	8008e4e <USBD_CDC_Setup+0xa6>
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	88db      	ldrh	r3, [r3, #6]
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	e000      	b.n	8008e50 <USBD_CDC_Setup+0xa8>
 8008e4e:	2240      	movs	r2, #64	@ 0x40
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008e56:	6939      	ldr	r1, [r7, #16]
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008e5e:	461a      	mov	r2, r3
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 fd65 	bl	800a930 <USBD_CtlPrepareRx>
      break;
 8008e66:	e076      	b.n	8008f56 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008e6e:	687a      	ldr	r2, [r7, #4]
 8008e70:	33b0      	adds	r3, #176	@ 0xb0
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	7850      	ldrb	r0, [r2, #1]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	6839      	ldr	r1, [r7, #0]
 8008e82:	4798      	blx	r3
      break;
 8008e84:	e067      	b.n	8008f56 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	785b      	ldrb	r3, [r3, #1]
 8008e8a:	2b0b      	cmp	r3, #11
 8008e8c:	d851      	bhi.n	8008f32 <USBD_CDC_Setup+0x18a>
 8008e8e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e94 <USBD_CDC_Setup+0xec>)
 8008e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e94:	08008ec5 	.word	0x08008ec5
 8008e98:	08008f41 	.word	0x08008f41
 8008e9c:	08008f33 	.word	0x08008f33
 8008ea0:	08008f33 	.word	0x08008f33
 8008ea4:	08008f33 	.word	0x08008f33
 8008ea8:	08008f33 	.word	0x08008f33
 8008eac:	08008f33 	.word	0x08008f33
 8008eb0:	08008f33 	.word	0x08008f33
 8008eb4:	08008f33 	.word	0x08008f33
 8008eb8:	08008f33 	.word	0x08008f33
 8008ebc:	08008eef 	.word	0x08008eef
 8008ec0:	08008f19 	.word	0x08008f19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b03      	cmp	r3, #3
 8008ece:	d107      	bne.n	8008ee0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ed0:	f107 030a 	add.w	r3, r7, #10
 8008ed4:	2202      	movs	r2, #2
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 fcfd 	bl	800a8d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ede:	e032      	b.n	8008f46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f001 fc7b 	bl	800a7de <USBD_CtlError>
            ret = USBD_FAIL;
 8008ee8:	2303      	movs	r3, #3
 8008eea:	75fb      	strb	r3, [r7, #23]
          break;
 8008eec:	e02b      	b.n	8008f46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d107      	bne.n	8008f0a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008efa:	f107 030d 	add.w	r3, r7, #13
 8008efe:	2201      	movs	r2, #1
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f001 fce8 	bl	800a8d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f08:	e01d      	b.n	8008f46 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f001 fc66 	bl	800a7de <USBD_CtlError>
            ret = USBD_FAIL;
 8008f12:	2303      	movs	r3, #3
 8008f14:	75fb      	strb	r3, [r7, #23]
          break;
 8008f16:	e016      	b.n	8008f46 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	d00f      	beq.n	8008f44 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008f24:	6839      	ldr	r1, [r7, #0]
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f001 fc59 	bl	800a7de <USBD_CtlError>
            ret = USBD_FAIL;
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f30:	e008      	b.n	8008f44 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008f32:	6839      	ldr	r1, [r7, #0]
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 fc52 	bl	800a7de <USBD_CtlError>
          ret = USBD_FAIL;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f3e:	e002      	b.n	8008f46 <USBD_CDC_Setup+0x19e>
          break;
 8008f40:	bf00      	nop
 8008f42:	e008      	b.n	8008f56 <USBD_CDC_Setup+0x1ae>
          break;
 8008f44:	bf00      	nop
      }
      break;
 8008f46:	e006      	b.n	8008f56 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008f48:	6839      	ldr	r1, [r7, #0]
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f001 fc47 	bl	800a7de <USBD_CtlError>
      ret = USBD_FAIL;
 8008f50:	2303      	movs	r3, #3
 8008f52:	75fb      	strb	r3, [r7, #23]
      break;
 8008f54:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008f72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	32b0      	adds	r2, #176	@ 0xb0
 8008f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e065      	b.n	8009056 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	32b0      	adds	r2, #176	@ 0xb0
 8008f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f98:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008f9a:	78fb      	ldrb	r3, [r7, #3]
 8008f9c:	f003 020f 	and.w	r2, r3, #15
 8008fa0:	6879      	ldr	r1, [r7, #4]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	440b      	add	r3, r1
 8008fac:	3318      	adds	r3, #24
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d02f      	beq.n	8009014 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	f003 020f 	and.w	r2, r3, #15
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	4613      	mov	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4413      	add	r3, r2
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	440b      	add	r3, r1
 8008fc6:	3318      	adds	r3, #24
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	78fb      	ldrb	r3, [r7, #3]
 8008fcc:	f003 010f 	and.w	r1, r3, #15
 8008fd0:	68f8      	ldr	r0, [r7, #12]
 8008fd2:	460b      	mov	r3, r1
 8008fd4:	00db      	lsls	r3, r3, #3
 8008fd6:	440b      	add	r3, r1
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4403      	add	r3, r0
 8008fdc:	331c      	adds	r3, #28
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	fbb2 f1f3 	udiv	r1, r2, r3
 8008fe4:	fb01 f303 	mul.w	r3, r1, r3
 8008fe8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d112      	bne.n	8009014 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008fee:	78fb      	ldrb	r3, [r7, #3]
 8008ff0:	f003 020f 	and.w	r2, r3, #15
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	440b      	add	r3, r1
 8009000:	3318      	adds	r3, #24
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009006:	78f9      	ldrb	r1, [r7, #3]
 8009008:	2300      	movs	r3, #0
 800900a:	2200      	movs	r2, #0
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f002 f936 	bl	800b27e <USBD_LL_Transmit>
 8009012:	e01f      	b.n	8009054 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2200      	movs	r2, #0
 8009018:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	33b0      	adds	r3, #176	@ 0xb0
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	4413      	add	r3, r2
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d010      	beq.n	8009054 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	33b0      	adds	r3, #176	@ 0xb0
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009050:	78fa      	ldrb	r2, [r7, #3]
 8009052:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
 8009066:	460b      	mov	r3, r1
 8009068:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	32b0      	adds	r2, #176	@ 0xb0
 8009074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009078:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	32b0      	adds	r2, #176	@ 0xb0
 8009084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d101      	bne.n	8009090 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800908c:	2303      	movs	r3, #3
 800908e:	e01a      	b.n	80090c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009090:	78fb      	ldrb	r3, [r7, #3]
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f002 f934 	bl	800b302 <USBD_LL_GetRxDataSize>
 800909a:	4602      	mov	r2, r0
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	33b0      	adds	r3, #176	@ 0xb0
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80090c0:	4611      	mov	r1, r2
 80090c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}

080090ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80090ce:	b580      	push	{r7, lr}
 80090d0:	b084      	sub	sp, #16
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	32b0      	adds	r2, #176	@ 0xb0
 80090e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d101      	bne.n	80090f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e024      	b.n	800913a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	33b0      	adds	r3, #176	@ 0xb0
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4413      	add	r3, r2
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d019      	beq.n	8009138 <USBD_CDC_EP0_RxReady+0x6a>
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800910a:	2bff      	cmp	r3, #255	@ 0xff
 800910c:	d014      	beq.n	8009138 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009114:	687a      	ldr	r2, [r7, #4]
 8009116:	33b0      	adds	r3, #176	@ 0xb0
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	68fa      	ldr	r2, [r7, #12]
 8009122:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009126:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800912e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	22ff      	movs	r2, #255	@ 0xff
 8009134:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
	...

08009144 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b086      	sub	sp, #24
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800914c:	2182      	movs	r1, #130	@ 0x82
 800914e:	4818      	ldr	r0, [pc, #96]	@ (80091b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009150:	f000 fd0f 	bl	8009b72 <USBD_GetEpDesc>
 8009154:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009156:	2101      	movs	r1, #1
 8009158:	4815      	ldr	r0, [pc, #84]	@ (80091b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800915a:	f000 fd0a 	bl	8009b72 <USBD_GetEpDesc>
 800915e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009160:	2181      	movs	r1, #129	@ 0x81
 8009162:	4813      	ldr	r0, [pc, #76]	@ (80091b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009164:	f000 fd05 	bl	8009b72 <USBD_GetEpDesc>
 8009168:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d002      	beq.n	8009176 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	2210      	movs	r2, #16
 8009174:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d006      	beq.n	800918a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	2200      	movs	r2, #0
 8009180:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009184:	711a      	strb	r2, [r3, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d006      	beq.n	800919e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2200      	movs	r2, #0
 8009194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009198:	711a      	strb	r2, [r3, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2243      	movs	r2, #67	@ 0x43
 80091a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80091a4:	4b02      	ldr	r3, [pc, #8]	@ (80091b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3718      	adds	r7, #24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20000058 	.word	0x20000058

080091b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80091bc:	2182      	movs	r1, #130	@ 0x82
 80091be:	4818      	ldr	r0, [pc, #96]	@ (8009220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80091c0:	f000 fcd7 	bl	8009b72 <USBD_GetEpDesc>
 80091c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80091c6:	2101      	movs	r1, #1
 80091c8:	4815      	ldr	r0, [pc, #84]	@ (8009220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80091ca:	f000 fcd2 	bl	8009b72 <USBD_GetEpDesc>
 80091ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80091d0:	2181      	movs	r1, #129	@ 0x81
 80091d2:	4813      	ldr	r0, [pc, #76]	@ (8009220 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80091d4:	f000 fccd 	bl	8009b72 <USBD_GetEpDesc>
 80091d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	2210      	movs	r2, #16
 80091e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d006      	beq.n	80091fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	2200      	movs	r2, #0
 80091f0:	711a      	strb	r2, [r3, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f042 0202 	orr.w	r2, r2, #2
 80091f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d006      	beq.n	800920e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	711a      	strb	r2, [r3, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f042 0202 	orr.w	r2, r2, #2
 800920c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2243      	movs	r2, #67	@ 0x43
 8009212:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009214:	4b02      	ldr	r3, [pc, #8]	@ (8009220 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009216:	4618      	mov	r0, r3
 8009218:	3718      	adds	r7, #24
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20000058 	.word	0x20000058

08009224 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b086      	sub	sp, #24
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800922c:	2182      	movs	r1, #130	@ 0x82
 800922e:	4818      	ldr	r0, [pc, #96]	@ (8009290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009230:	f000 fc9f 	bl	8009b72 <USBD_GetEpDesc>
 8009234:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009236:	2101      	movs	r1, #1
 8009238:	4815      	ldr	r0, [pc, #84]	@ (8009290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800923a:	f000 fc9a 	bl	8009b72 <USBD_GetEpDesc>
 800923e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009240:	2181      	movs	r1, #129	@ 0x81
 8009242:	4813      	ldr	r0, [pc, #76]	@ (8009290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009244:	f000 fc95 	bl	8009b72 <USBD_GetEpDesc>
 8009248:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	2210      	movs	r2, #16
 8009254:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d006      	beq.n	800926a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	2200      	movs	r2, #0
 8009260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009264:	711a      	strb	r2, [r3, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d006      	beq.n	800927e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2200      	movs	r2, #0
 8009274:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009278:	711a      	strb	r2, [r3, #4]
 800927a:	2200      	movs	r2, #0
 800927c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2243      	movs	r2, #67	@ 0x43
 8009282:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009284:	4b02      	ldr	r3, [pc, #8]	@ (8009290 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	20000058 	.word	0x20000058

08009294 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	220a      	movs	r2, #10
 80092a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80092a2:	4b03      	ldr	r3, [pc, #12]	@ (80092b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	20000014 	.word	0x20000014

080092b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d101      	bne.n	80092c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80092c4:	2303      	movs	r3, #3
 80092c6:	e009      	b.n	80092dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	33b0      	adds	r3, #176	@ 0xb0
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	4413      	add	r3, r2
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b087      	sub	sp, #28
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	32b0      	adds	r2, #176	@ 0xb0
 80092fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009302:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d101      	bne.n	800930e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800930a:	2303      	movs	r3, #3
 800930c:	e008      	b.n	8009320 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	371c      	adds	r7, #28
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	32b0      	adds	r2, #176	@ 0xb0
 8009340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009344:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d101      	bne.n	8009350 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800934c:	2303      	movs	r3, #3
 800934e:	e004      	b.n	800935a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	683a      	ldr	r2, [r7, #0]
 8009354:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
	...

08009368 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b084      	sub	sp, #16
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	32b0      	adds	r2, #176	@ 0xb0
 800937a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	32b0      	adds	r2, #176	@ 0xb0
 800938a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d101      	bne.n	8009396 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009392:	2303      	movs	r3, #3
 8009394:	e018      	b.n	80093c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	7c1b      	ldrb	r3, [r3, #16]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d10a      	bne.n	80093b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800939e:	4b0c      	ldr	r3, [pc, #48]	@ (80093d0 <USBD_CDC_ReceivePacket+0x68>)
 80093a0:	7819      	ldrb	r1, [r3, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80093a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f001 ff87 	bl	800b2c0 <USBD_LL_PrepareReceive>
 80093b2:	e008      	b.n	80093c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093b4:	4b06      	ldr	r3, [pc, #24]	@ (80093d0 <USBD_CDC_ReceivePacket+0x68>)
 80093b6:	7819      	ldrb	r1, [r3, #0]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80093be:	2340      	movs	r3, #64	@ 0x40
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f001 ff7d 	bl	800b2c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	2000009c 	.word	0x2000009c

080093d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	4613      	mov	r3, r2
 80093e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d101      	bne.n	80093ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e01f      	b.n	800942c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2201      	movs	r2, #1
 8009416:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	79fa      	ldrb	r2, [r7, #7]
 800941e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f001 fdf7 	bl	800b014 <USBD_LL_Init>
 8009426:	4603      	mov	r3, r0
 8009428:	75fb      	strb	r3, [r7, #23]

  return ret;
 800942a:	7dfb      	ldrb	r3, [r7, #23]
}
 800942c:	4618      	mov	r0, r3
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d101      	bne.n	800944c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009448:	2303      	movs	r3, #3
 800944a:	e025      	b.n	8009498 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	683a      	ldr	r2, [r7, #0]
 8009450:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	32ae      	adds	r2, #174	@ 0xae
 800945e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00f      	beq.n	8009488 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	32ae      	adds	r2, #174	@ 0xae
 8009472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009478:	f107 020e 	add.w	r2, r7, #14
 800947c:	4610      	mov	r0, r2
 800947e:	4798      	blx	r3
 8009480:	4602      	mov	r2, r0
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800948e:	1c5a      	adds	r2, r3, #1
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f001 fdff 	bl	800b0ac <USBD_LL_Start>
 80094ae:	4603      	mov	r3, r0
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	3708      	adds	r7, #8
 80094b4:	46bd      	mov	sp, r7
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	370c      	adds	r7, #12
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b084      	sub	sp, #16
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	460b      	mov	r3, r1
 80094d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d009      	beq.n	80094fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	78fa      	ldrb	r2, [r7, #3]
 80094f2:	4611      	mov	r1, r2
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	4798      	blx	r3
 80094f8:	4603      	mov	r3, r0
 80094fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b084      	sub	sp, #16
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	460b      	mov	r3, r1
 8009510:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800951c:	685b      	ldr	r3, [r3, #4]
 800951e:	78fa      	ldrb	r2, [r7, #3]
 8009520:	4611      	mov	r1, r2
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	4798      	blx	r3
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800952c:	2303      	movs	r3, #3
 800952e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009530:	7bfb      	ldrb	r3, [r7, #15]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b084      	sub	sp, #16
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800954a:	6839      	ldr	r1, [r7, #0]
 800954c:	4618      	mov	r0, r3
 800954e:	f001 f90c 	bl	800a76a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009560:	461a      	mov	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800956e:	f003 031f 	and.w	r3, r3, #31
 8009572:	2b02      	cmp	r3, #2
 8009574:	d01a      	beq.n	80095ac <USBD_LL_SetupStage+0x72>
 8009576:	2b02      	cmp	r3, #2
 8009578:	d822      	bhi.n	80095c0 <USBD_LL_SetupStage+0x86>
 800957a:	2b00      	cmp	r3, #0
 800957c:	d002      	beq.n	8009584 <USBD_LL_SetupStage+0x4a>
 800957e:	2b01      	cmp	r3, #1
 8009580:	d00a      	beq.n	8009598 <USBD_LL_SetupStage+0x5e>
 8009582:	e01d      	b.n	80095c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fb63 	bl	8009c58 <USBD_StdDevReq>
 8009592:	4603      	mov	r3, r0
 8009594:	73fb      	strb	r3, [r7, #15]
      break;
 8009596:	e020      	b.n	80095da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fbcb 	bl	8009d3c <USBD_StdItfReq>
 80095a6:	4603      	mov	r3, r0
 80095a8:	73fb      	strb	r3, [r7, #15]
      break;
 80095aa:	e016      	b.n	80095da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80095b2:	4619      	mov	r1, r3
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f000 fc2d 	bl	8009e14 <USBD_StdEPReq>
 80095ba:	4603      	mov	r3, r0
 80095bc:	73fb      	strb	r3, [r7, #15]
      break;
 80095be:	e00c      	b.n	80095da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80095c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f001 fdcc 	bl	800b16c <USBD_LL_StallEP>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73fb      	strb	r3, [r7, #15]
      break;
 80095d8:	bf00      	nop
  }

  return ret;
 80095da:	7bfb      	ldrb	r3, [r7, #15]
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3710      	adds	r7, #16
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b086      	sub	sp, #24
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	460b      	mov	r3, r1
 80095ee:	607a      	str	r2, [r7, #4]
 80095f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80095f2:	2300      	movs	r3, #0
 80095f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80095f6:	7afb      	ldrb	r3, [r7, #11]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d16e      	bne.n	80096da <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009602:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800960a:	2b03      	cmp	r3, #3
 800960c:	f040 8098 	bne.w	8009740 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	689a      	ldr	r2, [r3, #8]
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	429a      	cmp	r2, r3
 800961a:	d913      	bls.n	8009644 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	689a      	ldr	r2, [r3, #8]
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	1ad2      	subs	r2, r2, r3
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	68da      	ldr	r2, [r3, #12]
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	4293      	cmp	r3, r2
 8009634:	bf28      	it	cs
 8009636:	4613      	movcs	r3, r2
 8009638:	461a      	mov	r2, r3
 800963a:	6879      	ldr	r1, [r7, #4]
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f001 f994 	bl	800a96a <USBD_CtlContinueRx>
 8009642:	e07d      	b.n	8009740 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800964a:	f003 031f 	and.w	r3, r3, #31
 800964e:	2b02      	cmp	r3, #2
 8009650:	d014      	beq.n	800967c <USBD_LL_DataOutStage+0x98>
 8009652:	2b02      	cmp	r3, #2
 8009654:	d81d      	bhi.n	8009692 <USBD_LL_DataOutStage+0xae>
 8009656:	2b00      	cmp	r3, #0
 8009658:	d002      	beq.n	8009660 <USBD_LL_DataOutStage+0x7c>
 800965a:	2b01      	cmp	r3, #1
 800965c:	d003      	beq.n	8009666 <USBD_LL_DataOutStage+0x82>
 800965e:	e018      	b.n	8009692 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009660:	2300      	movs	r3, #0
 8009662:	75bb      	strb	r3, [r7, #22]
            break;
 8009664:	e018      	b.n	8009698 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800966c:	b2db      	uxtb	r3, r3
 800966e:	4619      	mov	r1, r3
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f000 fa64 	bl	8009b3e <USBD_CoreFindIF>
 8009676:	4603      	mov	r3, r0
 8009678:	75bb      	strb	r3, [r7, #22]
            break;
 800967a:	e00d      	b.n	8009698 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009682:	b2db      	uxtb	r3, r3
 8009684:	4619      	mov	r1, r3
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f000 fa66 	bl	8009b58 <USBD_CoreFindEP>
 800968c:	4603      	mov	r3, r0
 800968e:	75bb      	strb	r3, [r7, #22]
            break;
 8009690:	e002      	b.n	8009698 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009692:	2300      	movs	r3, #0
 8009694:	75bb      	strb	r3, [r7, #22]
            break;
 8009696:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009698:	7dbb      	ldrb	r3, [r7, #22]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d119      	bne.n	80096d2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d113      	bne.n	80096d2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80096aa:	7dba      	ldrb	r2, [r7, #22]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	32ae      	adds	r2, #174	@ 0xae
 80096b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d00b      	beq.n	80096d2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80096ba:	7dba      	ldrb	r2, [r7, #22]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80096c2:	7dba      	ldrb	r2, [r7, #22]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	32ae      	adds	r2, #174	@ 0xae
 80096c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80096d2:	68f8      	ldr	r0, [r7, #12]
 80096d4:	f001 f95a 	bl	800a98c <USBD_CtlSendStatus>
 80096d8:	e032      	b.n	8009740 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80096da:	7afb      	ldrb	r3, [r7, #11]
 80096dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	4619      	mov	r1, r3
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f000 fa37 	bl	8009b58 <USBD_CoreFindEP>
 80096ea:	4603      	mov	r3, r0
 80096ec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096ee:	7dbb      	ldrb	r3, [r7, #22]
 80096f0:	2bff      	cmp	r3, #255	@ 0xff
 80096f2:	d025      	beq.n	8009740 <USBD_LL_DataOutStage+0x15c>
 80096f4:	7dbb      	ldrb	r3, [r7, #22]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d122      	bne.n	8009740 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b03      	cmp	r3, #3
 8009704:	d117      	bne.n	8009736 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009706:	7dba      	ldrb	r2, [r7, #22]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	32ae      	adds	r2, #174	@ 0xae
 800970c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00f      	beq.n	8009736 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009716:	7dba      	ldrb	r2, [r7, #22]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800971e:	7dba      	ldrb	r2, [r7, #22]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	32ae      	adds	r2, #174	@ 0xae
 8009724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009728:	699b      	ldr	r3, [r3, #24]
 800972a:	7afa      	ldrb	r2, [r7, #11]
 800972c:	4611      	mov	r1, r2
 800972e:	68f8      	ldr	r0, [r7, #12]
 8009730:	4798      	blx	r3
 8009732:	4603      	mov	r3, r0
 8009734:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009736:	7dfb      	ldrb	r3, [r7, #23]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800973c:	7dfb      	ldrb	r3, [r7, #23]
 800973e:	e000      	b.n	8009742 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3718      	adds	r7, #24
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800974a:	b580      	push	{r7, lr}
 800974c:	b086      	sub	sp, #24
 800974e:	af00      	add	r7, sp, #0
 8009750:	60f8      	str	r0, [r7, #12]
 8009752:	460b      	mov	r3, r1
 8009754:	607a      	str	r2, [r7, #4]
 8009756:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009758:	7afb      	ldrb	r3, [r7, #11]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d16f      	bne.n	800983e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3314      	adds	r3, #20
 8009762:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800976a:	2b02      	cmp	r3, #2
 800976c:	d15a      	bne.n	8009824 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	689a      	ldr	r2, [r3, #8]
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	429a      	cmp	r2, r3
 8009778:	d914      	bls.n	80097a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	689a      	ldr	r2, [r3, #8]
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	68db      	ldr	r3, [r3, #12]
 8009782:	1ad2      	subs	r2, r2, r3
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	461a      	mov	r2, r3
 800978e:	6879      	ldr	r1, [r7, #4]
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f001 f8bc 	bl	800a90e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009796:	2300      	movs	r3, #0
 8009798:	2200      	movs	r2, #0
 800979a:	2100      	movs	r1, #0
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f001 fd8f 	bl	800b2c0 <USBD_LL_PrepareReceive>
 80097a2:	e03f      	b.n	8009824 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	68da      	ldr	r2, [r3, #12]
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d11c      	bne.n	80097ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d316      	bcc.n	80097ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d20f      	bcs.n	80097ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80097ca:	2200      	movs	r2, #0
 80097cc:	2100      	movs	r1, #0
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f001 f89d 	bl	800a90e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097dc:	2300      	movs	r3, #0
 80097de:	2200      	movs	r2, #0
 80097e0:	2100      	movs	r1, #0
 80097e2:	68f8      	ldr	r0, [r7, #12]
 80097e4:	f001 fd6c 	bl	800b2c0 <USBD_LL_PrepareReceive>
 80097e8:	e01c      	b.n	8009824 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097f0:	b2db      	uxtb	r3, r3
 80097f2:	2b03      	cmp	r3, #3
 80097f4:	d10f      	bne.n	8009816 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d009      	beq.n	8009816 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009816:	2180      	movs	r1, #128	@ 0x80
 8009818:	68f8      	ldr	r0, [r7, #12]
 800981a:	f001 fca7 	bl	800b16c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f001 f8c7 	bl	800a9b2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d03a      	beq.n	80098a4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f7ff fe42 	bl	80094b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800983c:	e032      	b.n	80098a4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800983e:	7afb      	ldrb	r3, [r7, #11]
 8009840:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009844:	b2db      	uxtb	r3, r3
 8009846:	4619      	mov	r1, r3
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f000 f985 	bl	8009b58 <USBD_CoreFindEP>
 800984e:	4603      	mov	r3, r0
 8009850:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009852:	7dfb      	ldrb	r3, [r7, #23]
 8009854:	2bff      	cmp	r3, #255	@ 0xff
 8009856:	d025      	beq.n	80098a4 <USBD_LL_DataInStage+0x15a>
 8009858:	7dfb      	ldrb	r3, [r7, #23]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d122      	bne.n	80098a4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b03      	cmp	r3, #3
 8009868:	d11c      	bne.n	80098a4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800986a:	7dfa      	ldrb	r2, [r7, #23]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	32ae      	adds	r2, #174	@ 0xae
 8009870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009874:	695b      	ldr	r3, [r3, #20]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d014      	beq.n	80098a4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800987a:	7dfa      	ldrb	r2, [r7, #23]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009882:	7dfa      	ldrb	r2, [r7, #23]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	32ae      	adds	r2, #174	@ 0xae
 8009888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800988c:	695b      	ldr	r3, [r3, #20]
 800988e:	7afa      	ldrb	r2, [r7, #11]
 8009890:	4611      	mov	r1, r2
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	4798      	blx	r3
 8009896:	4603      	mov	r3, r0
 8009898:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800989a:	7dbb      	ldrb	r3, [r7, #22]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d001      	beq.n	80098a4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80098a0:	7dbb      	ldrb	r3, [r7, #22]
 80098a2:	e000      	b.n	80098a6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3718      	adds	r7, #24
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80098ae:	b580      	push	{r7, lr}
 80098b0:	b084      	sub	sp, #16
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80098b6:	2300      	movs	r3, #0
 80098b8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d014      	beq.n	8009914 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00e      	beq.n	8009914 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	6852      	ldr	r2, [r2, #4]
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	4611      	mov	r1, r2
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	4798      	blx	r3
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009910:	2303      	movs	r3, #3
 8009912:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009914:	2340      	movs	r3, #64	@ 0x40
 8009916:	2200      	movs	r2, #0
 8009918:	2100      	movs	r1, #0
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f001 fbe1 	bl	800b0e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2240      	movs	r2, #64	@ 0x40
 800992c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009930:	2340      	movs	r3, #64	@ 0x40
 8009932:	2200      	movs	r2, #0
 8009934:	2180      	movs	r1, #128	@ 0x80
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f001 fbd3 	bl	800b0e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2201      	movs	r2, #1
 8009940:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2240      	movs	r2, #64	@ 0x40
 8009946:	621a      	str	r2, [r3, #32]

  return ret;
 8009948:	7bfb      	ldrb	r3, [r7, #15]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009952:	b480      	push	{r7}
 8009954:	b083      	sub	sp, #12
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
 800995a:	460b      	mov	r3, r1
 800995c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	78fa      	ldrb	r2, [r7, #3]
 8009962:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	370c      	adds	r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr

08009972 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009972:	b480      	push	{r7}
 8009974:	b083      	sub	sp, #12
 8009976:	af00      	add	r7, sp, #0
 8009978:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b04      	cmp	r3, #4
 8009984:	d006      	beq.n	8009994 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800998c:	b2da      	uxtb	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2204      	movs	r2, #4
 8009998:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80099aa:	b480      	push	{r7}
 80099ac:	b083      	sub	sp, #12
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099b8:	b2db      	uxtb	r3, r3
 80099ba:	2b04      	cmp	r3, #4
 80099bc:	d106      	bne.n	80099cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80099c4:	b2da      	uxtb	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80099cc:	2300      	movs	r3, #0
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr

080099da <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b082      	sub	sp, #8
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	d110      	bne.n	8009a10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d00b      	beq.n	8009a10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099fe:	69db      	ldr	r3, [r3, #28]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d005      	beq.n	8009a10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009a0a:	69db      	ldr	r3, [r3, #28]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	460b      	mov	r3, r1
 8009a24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	32ae      	adds	r2, #174	@ 0xae
 8009a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d101      	bne.n	8009a3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e01c      	b.n	8009a76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	2b03      	cmp	r3, #3
 8009a46:	d115      	bne.n	8009a74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	32ae      	adds	r2, #174	@ 0xae
 8009a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a56:	6a1b      	ldr	r3, [r3, #32]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00b      	beq.n	8009a74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	32ae      	adds	r2, #174	@ 0xae
 8009a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a6a:	6a1b      	ldr	r3, [r3, #32]
 8009a6c:	78fa      	ldrb	r2, [r7, #3]
 8009a6e:	4611      	mov	r1, r2
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3708      	adds	r7, #8
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}

08009a7e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b082      	sub	sp, #8
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
 8009a86:	460b      	mov	r3, r1
 8009a88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	32ae      	adds	r2, #174	@ 0xae
 8009a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d101      	bne.n	8009aa0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e01c      	b.n	8009ada <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009aa6:	b2db      	uxtb	r3, r3
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	d115      	bne.n	8009ad8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	32ae      	adds	r2, #174	@ 0xae
 8009ab6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00b      	beq.n	8009ad8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	32ae      	adds	r2, #174	@ 0xae
 8009aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad0:	78fa      	ldrb	r2, [r7, #3]
 8009ad2:	4611      	mov	r1, r2
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b083      	sub	sp, #12
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009aea:	2300      	movs	r3, #0
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009b00:	2300      	movs	r3, #0
 8009b02:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00e      	beq.n	8009b34 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	6852      	ldr	r2, [r2, #4]
 8009b22:	b2d2      	uxtb	r2, r2
 8009b24:	4611      	mov	r1, r2
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	4798      	blx	r3
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009b30:	2303      	movs	r3, #3
 8009b32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b083      	sub	sp, #12
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	460b      	mov	r3, r1
 8009b48:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009b4a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	460b      	mov	r3, r1
 8009b62:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009b64:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	370c      	adds	r7, #12
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b70:	4770      	bx	lr

08009b72 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b086      	sub	sp, #24
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009b86:	2300      	movs	r3, #0
 8009b88:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	885b      	ldrh	r3, [r3, #2]
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	7812      	ldrb	r2, [r2, #0]
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d91f      	bls.n	8009bd8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009b9e:	e013      	b.n	8009bc8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009ba0:	f107 030a 	add.w	r3, r7, #10
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	6978      	ldr	r0, [r7, #20]
 8009ba8:	f000 f81b 	bl	8009be2 <USBD_GetNextDesc>
 8009bac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	785b      	ldrb	r3, [r3, #1]
 8009bb2:	2b05      	cmp	r3, #5
 8009bb4:	d108      	bne.n	8009bc8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	789b      	ldrb	r3, [r3, #2]
 8009bbe:	78fa      	ldrb	r2, [r7, #3]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d008      	beq.n	8009bd6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	885b      	ldrh	r3, [r3, #2]
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	897b      	ldrh	r3, [r7, #10]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d8e5      	bhi.n	8009ba0 <USBD_GetEpDesc+0x2e>
 8009bd4:	e000      	b.n	8009bd8 <USBD_GetEpDesc+0x66>
          break;
 8009bd6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009bd8:	693b      	ldr	r3, [r7, #16]
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3718      	adds	r7, #24
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}

08009be2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009be2:	b480      	push	{r7}
 8009be4:	b085      	sub	sp, #20
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	881b      	ldrh	r3, [r3, #0]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	7812      	ldrb	r2, [r2, #0]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	461a      	mov	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4413      	add	r3, r2
 8009c0a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b087      	sub	sp, #28
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c38:	8a3b      	ldrh	r3, [r7, #16]
 8009c3a:	021b      	lsls	r3, r3, #8
 8009c3c:	b21a      	sxth	r2, r3
 8009c3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c42:	4313      	orrs	r3, r2
 8009c44:	b21b      	sxth	r3, r3
 8009c46:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009c48:	89fb      	ldrh	r3, [r7, #14]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	371c      	adds	r7, #28
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
	...

08009c58 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c6e:	2b40      	cmp	r3, #64	@ 0x40
 8009c70:	d005      	beq.n	8009c7e <USBD_StdDevReq+0x26>
 8009c72:	2b40      	cmp	r3, #64	@ 0x40
 8009c74:	d857      	bhi.n	8009d26 <USBD_StdDevReq+0xce>
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00f      	beq.n	8009c9a <USBD_StdDevReq+0x42>
 8009c7a:	2b20      	cmp	r3, #32
 8009c7c:	d153      	bne.n	8009d26 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	32ae      	adds	r2, #174	@ 0xae
 8009c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	4798      	blx	r3
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]
      break;
 8009c98:	e04a      	b.n	8009d30 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	785b      	ldrb	r3, [r3, #1]
 8009c9e:	2b09      	cmp	r3, #9
 8009ca0:	d83b      	bhi.n	8009d1a <USBD_StdDevReq+0xc2>
 8009ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca8 <USBD_StdDevReq+0x50>)
 8009ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca8:	08009cfd 	.word	0x08009cfd
 8009cac:	08009d11 	.word	0x08009d11
 8009cb0:	08009d1b 	.word	0x08009d1b
 8009cb4:	08009d07 	.word	0x08009d07
 8009cb8:	08009d1b 	.word	0x08009d1b
 8009cbc:	08009cdb 	.word	0x08009cdb
 8009cc0:	08009cd1 	.word	0x08009cd1
 8009cc4:	08009d1b 	.word	0x08009d1b
 8009cc8:	08009cf3 	.word	0x08009cf3
 8009ccc:	08009ce5 	.word	0x08009ce5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009cd0:	6839      	ldr	r1, [r7, #0]
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fa3c 	bl	800a150 <USBD_GetDescriptor>
          break;
 8009cd8:	e024      	b.n	8009d24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fba1 	bl	800a424 <USBD_SetAddress>
          break;
 8009ce2:	e01f      	b.n	8009d24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009ce4:	6839      	ldr	r1, [r7, #0]
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fbe0 	bl	800a4ac <USBD_SetConfig>
 8009cec:	4603      	mov	r3, r0
 8009cee:	73fb      	strb	r3, [r7, #15]
          break;
 8009cf0:	e018      	b.n	8009d24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fc83 	bl	800a600 <USBD_GetConfig>
          break;
 8009cfa:	e013      	b.n	8009d24 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009cfc:	6839      	ldr	r1, [r7, #0]
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fcb4 	bl	800a66c <USBD_GetStatus>
          break;
 8009d04:	e00e      	b.n	8009d24 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d06:	6839      	ldr	r1, [r7, #0]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fce3 	bl	800a6d4 <USBD_SetFeature>
          break;
 8009d0e:	e009      	b.n	8009d24 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d10:	6839      	ldr	r1, [r7, #0]
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 fd07 	bl	800a726 <USBD_ClrFeature>
          break;
 8009d18:	e004      	b.n	8009d24 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 fd5e 	bl	800a7de <USBD_CtlError>
          break;
 8009d22:	bf00      	nop
      }
      break;
 8009d24:	e004      	b.n	8009d30 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009d26:	6839      	ldr	r1, [r7, #0]
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fd58 	bl	800a7de <USBD_CtlError>
      break;
 8009d2e:	bf00      	nop
  }

  return ret;
 8009d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop

08009d3c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009d52:	2b40      	cmp	r3, #64	@ 0x40
 8009d54:	d005      	beq.n	8009d62 <USBD_StdItfReq+0x26>
 8009d56:	2b40      	cmp	r3, #64	@ 0x40
 8009d58:	d852      	bhi.n	8009e00 <USBD_StdItfReq+0xc4>
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <USBD_StdItfReq+0x26>
 8009d5e:	2b20      	cmp	r3, #32
 8009d60:	d14e      	bne.n	8009e00 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d840      	bhi.n	8009df2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	889b      	ldrh	r3, [r3, #4]
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d836      	bhi.n	8009de8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	889b      	ldrh	r3, [r3, #4]
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff fedb 	bl	8009b3e <USBD_CoreFindIF>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d8c:	7bbb      	ldrb	r3, [r7, #14]
 8009d8e:	2bff      	cmp	r3, #255	@ 0xff
 8009d90:	d01d      	beq.n	8009dce <USBD_StdItfReq+0x92>
 8009d92:	7bbb      	ldrb	r3, [r7, #14]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d11a      	bne.n	8009dce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009d98:	7bba      	ldrb	r2, [r7, #14]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	32ae      	adds	r2, #174	@ 0xae
 8009d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00f      	beq.n	8009dc8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009da8:	7bba      	ldrb	r2, [r7, #14]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009db0:	7bba      	ldrb	r2, [r7, #14]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	32ae      	adds	r2, #174	@ 0xae
 8009db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	6839      	ldr	r1, [r7, #0]
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	4798      	blx	r3
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009dc6:	e004      	b.n	8009dd2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009dcc:	e001      	b.n	8009dd2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009dce:	2303      	movs	r3, #3
 8009dd0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	88db      	ldrh	r3, [r3, #6]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d110      	bne.n	8009dfc <USBD_StdItfReq+0xc0>
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d10d      	bne.n	8009dfc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fdd3 	bl	800a98c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009de6:	e009      	b.n	8009dfc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009de8:	6839      	ldr	r1, [r7, #0]
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 fcf7 	bl	800a7de <USBD_CtlError>
          break;
 8009df0:	e004      	b.n	8009dfc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fcf2 	bl	800a7de <USBD_CtlError>
          break;
 8009dfa:	e000      	b.n	8009dfe <USBD_StdItfReq+0xc2>
          break;
 8009dfc:	bf00      	nop
      }
      break;
 8009dfe:	e004      	b.n	8009e0a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009e00:	6839      	ldr	r1, [r7, #0]
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fceb 	bl	800a7de <USBD_CtlError>
      break;
 8009e08:	bf00      	nop
  }

  return ret;
 8009e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e1e:	2300      	movs	r3, #0
 8009e20:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	889b      	ldrh	r3, [r3, #4]
 8009e26:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	781b      	ldrb	r3, [r3, #0]
 8009e2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009e30:	2b40      	cmp	r3, #64	@ 0x40
 8009e32:	d007      	beq.n	8009e44 <USBD_StdEPReq+0x30>
 8009e34:	2b40      	cmp	r3, #64	@ 0x40
 8009e36:	f200 817f 	bhi.w	800a138 <USBD_StdEPReq+0x324>
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d02a      	beq.n	8009e94 <USBD_StdEPReq+0x80>
 8009e3e:	2b20      	cmp	r3, #32
 8009e40:	f040 817a 	bne.w	800a138 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e44:	7bbb      	ldrb	r3, [r7, #14]
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f7ff fe85 	bl	8009b58 <USBD_CoreFindEP>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e52:	7b7b      	ldrb	r3, [r7, #13]
 8009e54:	2bff      	cmp	r3, #255	@ 0xff
 8009e56:	f000 8174 	beq.w	800a142 <USBD_StdEPReq+0x32e>
 8009e5a:	7b7b      	ldrb	r3, [r7, #13]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	f040 8170 	bne.w	800a142 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009e62:	7b7a      	ldrb	r2, [r7, #13]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009e6a:	7b7a      	ldrb	r2, [r7, #13]
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	32ae      	adds	r2, #174	@ 0xae
 8009e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	f000 8163 	beq.w	800a142 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009e7c:	7b7a      	ldrb	r2, [r7, #13]
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	32ae      	adds	r2, #174	@ 0xae
 8009e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e86:	689b      	ldr	r3, [r3, #8]
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	4798      	blx	r3
 8009e8e:	4603      	mov	r3, r0
 8009e90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009e92:	e156      	b.n	800a142 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	785b      	ldrb	r3, [r3, #1]
 8009e98:	2b03      	cmp	r3, #3
 8009e9a:	d008      	beq.n	8009eae <USBD_StdEPReq+0x9a>
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	f300 8145 	bgt.w	800a12c <USBD_StdEPReq+0x318>
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 809b 	beq.w	8009fde <USBD_StdEPReq+0x1ca>
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d03c      	beq.n	8009f26 <USBD_StdEPReq+0x112>
 8009eac:	e13e      	b.n	800a12c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	2b02      	cmp	r3, #2
 8009eb8:	d002      	beq.n	8009ec0 <USBD_StdEPReq+0xac>
 8009eba:	2b03      	cmp	r3, #3
 8009ebc:	d016      	beq.n	8009eec <USBD_StdEPReq+0xd8>
 8009ebe:	e02c      	b.n	8009f1a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ec0:	7bbb      	ldrb	r3, [r7, #14]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00d      	beq.n	8009ee2 <USBD_StdEPReq+0xce>
 8009ec6:	7bbb      	ldrb	r3, [r7, #14]
 8009ec8:	2b80      	cmp	r3, #128	@ 0x80
 8009eca:	d00a      	beq.n	8009ee2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ecc:	7bbb      	ldrb	r3, [r7, #14]
 8009ece:	4619      	mov	r1, r3
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f001 f94b 	bl	800b16c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ed6:	2180      	movs	r1, #128	@ 0x80
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f001 f947 	bl	800b16c <USBD_LL_StallEP>
 8009ede:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ee0:	e020      	b.n	8009f24 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 fc7a 	bl	800a7de <USBD_CtlError>
              break;
 8009eea:	e01b      	b.n	8009f24 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	885b      	ldrh	r3, [r3, #2]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10e      	bne.n	8009f12 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00b      	beq.n	8009f12 <USBD_StdEPReq+0xfe>
 8009efa:	7bbb      	ldrb	r3, [r7, #14]
 8009efc:	2b80      	cmp	r3, #128	@ 0x80
 8009efe:	d008      	beq.n	8009f12 <USBD_StdEPReq+0xfe>
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	88db      	ldrh	r3, [r3, #6]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d104      	bne.n	8009f12 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f08:	7bbb      	ldrb	r3, [r7, #14]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f001 f92d 	bl	800b16c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fd3a 	bl	800a98c <USBD_CtlSendStatus>

              break;
 8009f18:	e004      	b.n	8009f24 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009f1a:	6839      	ldr	r1, [r7, #0]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fc5e 	bl	800a7de <USBD_CtlError>
              break;
 8009f22:	bf00      	nop
          }
          break;
 8009f24:	e107      	b.n	800a136 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d002      	beq.n	8009f38 <USBD_StdEPReq+0x124>
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	d016      	beq.n	8009f64 <USBD_StdEPReq+0x150>
 8009f36:	e04b      	b.n	8009fd0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f38:	7bbb      	ldrb	r3, [r7, #14]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d00d      	beq.n	8009f5a <USBD_StdEPReq+0x146>
 8009f3e:	7bbb      	ldrb	r3, [r7, #14]
 8009f40:	2b80      	cmp	r3, #128	@ 0x80
 8009f42:	d00a      	beq.n	8009f5a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f44:	7bbb      	ldrb	r3, [r7, #14]
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f001 f90f 	bl	800b16c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f4e:	2180      	movs	r1, #128	@ 0x80
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 f90b 	bl	800b16c <USBD_LL_StallEP>
 8009f56:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f58:	e040      	b.n	8009fdc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fc3e 	bl	800a7de <USBD_CtlError>
              break;
 8009f62:	e03b      	b.n	8009fdc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	885b      	ldrh	r3, [r3, #2]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d136      	bne.n	8009fda <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
 8009f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d004      	beq.n	8009f80 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f76:	7bbb      	ldrb	r3, [r7, #14]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 f915 	bl	800b1aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 fd03 	bl	800a98c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	4619      	mov	r1, r3
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f7ff fde4 	bl	8009b58 <USBD_CoreFindEP>
 8009f90:	4603      	mov	r3, r0
 8009f92:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f94:	7b7b      	ldrb	r3, [r7, #13]
 8009f96:	2bff      	cmp	r3, #255	@ 0xff
 8009f98:	d01f      	beq.n	8009fda <USBD_StdEPReq+0x1c6>
 8009f9a:	7b7b      	ldrb	r3, [r7, #13]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d11c      	bne.n	8009fda <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009fa0:	7b7a      	ldrb	r2, [r7, #13]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009fa8:	7b7a      	ldrb	r2, [r7, #13]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	32ae      	adds	r2, #174	@ 0xae
 8009fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d010      	beq.n	8009fda <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009fb8:	7b7a      	ldrb	r2, [r7, #13]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	32ae      	adds	r2, #174	@ 0xae
 8009fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	6839      	ldr	r1, [r7, #0]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	4798      	blx	r3
 8009fca:	4603      	mov	r3, r0
 8009fcc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009fce:	e004      	b.n	8009fda <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009fd0:	6839      	ldr	r1, [r7, #0]
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fc03 	bl	800a7de <USBD_CtlError>
              break;
 8009fd8:	e000      	b.n	8009fdc <USBD_StdEPReq+0x1c8>
              break;
 8009fda:	bf00      	nop
          }
          break;
 8009fdc:	e0ab      	b.n	800a136 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d002      	beq.n	8009ff0 <USBD_StdEPReq+0x1dc>
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	d032      	beq.n	800a054 <USBD_StdEPReq+0x240>
 8009fee:	e097      	b.n	800a120 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d007      	beq.n	800a006 <USBD_StdEPReq+0x1f2>
 8009ff6:	7bbb      	ldrb	r3, [r7, #14]
 8009ff8:	2b80      	cmp	r3, #128	@ 0x80
 8009ffa:	d004      	beq.n	800a006 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fbed 	bl	800a7de <USBD_CtlError>
                break;
 800a004:	e091      	b.n	800a12a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a006:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	da0b      	bge.n	800a026 <USBD_StdEPReq+0x212>
 800a00e:	7bbb      	ldrb	r3, [r7, #14]
 800a010:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a014:	4613      	mov	r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	4413      	add	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	3310      	adds	r3, #16
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	4413      	add	r3, r2
 800a022:	3304      	adds	r3, #4
 800a024:	e00b      	b.n	800a03e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a026:	7bbb      	ldrb	r3, [r7, #14]
 800a028:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a02c:	4613      	mov	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4413      	add	r3, r2
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	4413      	add	r3, r2
 800a03c:	3304      	adds	r3, #4
 800a03e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	2202      	movs	r2, #2
 800a04a:	4619      	mov	r1, r3
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 fc43 	bl	800a8d8 <USBD_CtlSendData>
              break;
 800a052:	e06a      	b.n	800a12a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	da11      	bge.n	800a080 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a05c:	7bbb      	ldrb	r3, [r7, #14]
 800a05e:	f003 020f 	and.w	r2, r3, #15
 800a062:	6879      	ldr	r1, [r7, #4]
 800a064:	4613      	mov	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4413      	add	r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	440b      	add	r3, r1
 800a06e:	3324      	adds	r3, #36	@ 0x24
 800a070:	881b      	ldrh	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d117      	bne.n	800a0a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a076:	6839      	ldr	r1, [r7, #0]
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 fbb0 	bl	800a7de <USBD_CtlError>
                  break;
 800a07e:	e054      	b.n	800a12a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a080:	7bbb      	ldrb	r3, [r7, #14]
 800a082:	f003 020f 	and.w	r2, r3, #15
 800a086:	6879      	ldr	r1, [r7, #4]
 800a088:	4613      	mov	r3, r2
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	440b      	add	r3, r1
 800a092:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d104      	bne.n	800a0a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fb9d 	bl	800a7de <USBD_CtlError>
                  break;
 800a0a4:	e041      	b.n	800a12a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	da0b      	bge.n	800a0c6 <USBD_StdEPReq+0x2b2>
 800a0ae:	7bbb      	ldrb	r3, [r7, #14]
 800a0b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	4413      	add	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	3310      	adds	r3, #16
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	4413      	add	r3, r2
 800a0c2:	3304      	adds	r3, #4
 800a0c4:	e00b      	b.n	800a0de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0c6:	7bbb      	ldrb	r3, [r7, #14]
 800a0c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	4413      	add	r3, r2
 800a0dc:	3304      	adds	r3, #4
 800a0de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d002      	beq.n	800a0ec <USBD_StdEPReq+0x2d8>
 800a0e6:	7bbb      	ldrb	r3, [r7, #14]
 800a0e8:	2b80      	cmp	r3, #128	@ 0x80
 800a0ea:	d103      	bne.n	800a0f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	e00e      	b.n	800a112 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a0f4:	7bbb      	ldrb	r3, [r7, #14]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 f875 	bl	800b1e8 <USBD_LL_IsStallEP>
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d003      	beq.n	800a10c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	2201      	movs	r2, #1
 800a108:	601a      	str	r2, [r3, #0]
 800a10a:	e002      	b.n	800a112 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2200      	movs	r2, #0
 800a110:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	2202      	movs	r2, #2
 800a116:	4619      	mov	r1, r3
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 fbdd 	bl	800a8d8 <USBD_CtlSendData>
              break;
 800a11e:	e004      	b.n	800a12a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a120:	6839      	ldr	r1, [r7, #0]
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f000 fb5b 	bl	800a7de <USBD_CtlError>
              break;
 800a128:	bf00      	nop
          }
          break;
 800a12a:	e004      	b.n	800a136 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fb55 	bl	800a7de <USBD_CtlError>
          break;
 800a134:	bf00      	nop
      }
      break;
 800a136:	e005      	b.n	800a144 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a138:	6839      	ldr	r1, [r7, #0]
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f000 fb4f 	bl	800a7de <USBD_CtlError>
      break;
 800a140:	e000      	b.n	800a144 <USBD_StdEPReq+0x330>
      break;
 800a142:	bf00      	nop
  }

  return ret;
 800a144:	7bfb      	ldrb	r3, [r7, #15]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
	...

0800a150 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a15a:	2300      	movs	r3, #0
 800a15c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a15e:	2300      	movs	r3, #0
 800a160:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a162:	2300      	movs	r3, #0
 800a164:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	885b      	ldrh	r3, [r3, #2]
 800a16a:	0a1b      	lsrs	r3, r3, #8
 800a16c:	b29b      	uxth	r3, r3
 800a16e:	3b01      	subs	r3, #1
 800a170:	2b06      	cmp	r3, #6
 800a172:	f200 8128 	bhi.w	800a3c6 <USBD_GetDescriptor+0x276>
 800a176:	a201      	add	r2, pc, #4	@ (adr r2, 800a17c <USBD_GetDescriptor+0x2c>)
 800a178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17c:	0800a199 	.word	0x0800a199
 800a180:	0800a1b1 	.word	0x0800a1b1
 800a184:	0800a1f1 	.word	0x0800a1f1
 800a188:	0800a3c7 	.word	0x0800a3c7
 800a18c:	0800a3c7 	.word	0x0800a3c7
 800a190:	0800a367 	.word	0x0800a367
 800a194:	0800a393 	.word	0x0800a393
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	7c12      	ldrb	r2, [r2, #16]
 800a1a4:	f107 0108 	add.w	r1, r7, #8
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	4798      	blx	r3
 800a1ac:	60f8      	str	r0, [r7, #12]
      break;
 800a1ae:	e112      	b.n	800a3d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	7c1b      	ldrb	r3, [r3, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10d      	bne.n	800a1d4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c0:	f107 0208 	add.w	r2, r7, #8
 800a1c4:	4610      	mov	r0, r2
 800a1c6:	4798      	blx	r3
 800a1c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1d2:	e100      	b.n	800a3d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1dc:	f107 0208 	add.w	r2, r7, #8
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	4798      	blx	r3
 800a1e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	701a      	strb	r2, [r3, #0]
      break;
 800a1ee:	e0f2      	b.n	800a3d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	885b      	ldrh	r3, [r3, #2]
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b05      	cmp	r3, #5
 800a1f8:	f200 80ac 	bhi.w	800a354 <USBD_GetDescriptor+0x204>
 800a1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a204 <USBD_GetDescriptor+0xb4>)
 800a1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a202:	bf00      	nop
 800a204:	0800a21d 	.word	0x0800a21d
 800a208:	0800a251 	.word	0x0800a251
 800a20c:	0800a285 	.word	0x0800a285
 800a210:	0800a2b9 	.word	0x0800a2b9
 800a214:	0800a2ed 	.word	0x0800a2ed
 800a218:	0800a321 	.word	0x0800a321
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a222:	685b      	ldr	r3, [r3, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d00b      	beq.n	800a240 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	7c12      	ldrb	r2, [r2, #16]
 800a234:	f107 0108 	add.w	r1, r7, #8
 800a238:	4610      	mov	r0, r2
 800a23a:	4798      	blx	r3
 800a23c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a23e:	e091      	b.n	800a364 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a240:	6839      	ldr	r1, [r7, #0]
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f000 facb 	bl	800a7de <USBD_CtlError>
            err++;
 800a248:	7afb      	ldrb	r3, [r7, #11]
 800a24a:	3301      	adds	r3, #1
 800a24c:	72fb      	strb	r3, [r7, #11]
          break;
 800a24e:	e089      	b.n	800a364 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a256:	689b      	ldr	r3, [r3, #8]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d00b      	beq.n	800a274 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	7c12      	ldrb	r2, [r2, #16]
 800a268:	f107 0108 	add.w	r1, r7, #8
 800a26c:	4610      	mov	r0, r2
 800a26e:	4798      	blx	r3
 800a270:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a272:	e077      	b.n	800a364 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a274:	6839      	ldr	r1, [r7, #0]
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fab1 	bl	800a7de <USBD_CtlError>
            err++;
 800a27c:	7afb      	ldrb	r3, [r7, #11]
 800a27e:	3301      	adds	r3, #1
 800a280:	72fb      	strb	r3, [r7, #11]
          break;
 800a282:	e06f      	b.n	800a364 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00b      	beq.n	800a2a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	7c12      	ldrb	r2, [r2, #16]
 800a29c:	f107 0108 	add.w	r1, r7, #8
 800a2a0:	4610      	mov	r0, r2
 800a2a2:	4798      	blx	r3
 800a2a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2a6:	e05d      	b.n	800a364 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2a8:	6839      	ldr	r1, [r7, #0]
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fa97 	bl	800a7de <USBD_CtlError>
            err++;
 800a2b0:	7afb      	ldrb	r3, [r7, #11]
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2b6:	e055      	b.n	800a364 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2be:	691b      	ldr	r3, [r3, #16]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00b      	beq.n	800a2dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2ca:	691b      	ldr	r3, [r3, #16]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	7c12      	ldrb	r2, [r2, #16]
 800a2d0:	f107 0108 	add.w	r1, r7, #8
 800a2d4:	4610      	mov	r0, r2
 800a2d6:	4798      	blx	r3
 800a2d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2da:	e043      	b.n	800a364 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2dc:	6839      	ldr	r1, [r7, #0]
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fa7d 	bl	800a7de <USBD_CtlError>
            err++;
 800a2e4:	7afb      	ldrb	r3, [r7, #11]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2ea:	e03b      	b.n	800a364 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00b      	beq.n	800a310 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a2fe:	695b      	ldr	r3, [r3, #20]
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	7c12      	ldrb	r2, [r2, #16]
 800a304:	f107 0108 	add.w	r1, r7, #8
 800a308:	4610      	mov	r0, r2
 800a30a:	4798      	blx	r3
 800a30c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a30e:	e029      	b.n	800a364 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a310:	6839      	ldr	r1, [r7, #0]
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fa63 	bl	800a7de <USBD_CtlError>
            err++;
 800a318:	7afb      	ldrb	r3, [r7, #11]
 800a31a:	3301      	adds	r3, #1
 800a31c:	72fb      	strb	r3, [r7, #11]
          break;
 800a31e:	e021      	b.n	800a364 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d00b      	beq.n	800a344 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a332:	699b      	ldr	r3, [r3, #24]
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	7c12      	ldrb	r2, [r2, #16]
 800a338:	f107 0108 	add.w	r1, r7, #8
 800a33c:	4610      	mov	r0, r2
 800a33e:	4798      	blx	r3
 800a340:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a342:	e00f      	b.n	800a364 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 fa49 	bl	800a7de <USBD_CtlError>
            err++;
 800a34c:	7afb      	ldrb	r3, [r7, #11]
 800a34e:	3301      	adds	r3, #1
 800a350:	72fb      	strb	r3, [r7, #11]
          break;
 800a352:	e007      	b.n	800a364 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a354:	6839      	ldr	r1, [r7, #0]
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fa41 	bl	800a7de <USBD_CtlError>
          err++;
 800a35c:	7afb      	ldrb	r3, [r7, #11]
 800a35e:	3301      	adds	r3, #1
 800a360:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a362:	bf00      	nop
      }
      break;
 800a364:	e037      	b.n	800a3d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	7c1b      	ldrb	r3, [r3, #16]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d109      	bne.n	800a382 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a376:	f107 0208 	add.w	r2, r7, #8
 800a37a:	4610      	mov	r0, r2
 800a37c:	4798      	blx	r3
 800a37e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a380:	e029      	b.n	800a3d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a382:	6839      	ldr	r1, [r7, #0]
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f000 fa2a 	bl	800a7de <USBD_CtlError>
        err++;
 800a38a:	7afb      	ldrb	r3, [r7, #11]
 800a38c:	3301      	adds	r3, #1
 800a38e:	72fb      	strb	r3, [r7, #11]
      break;
 800a390:	e021      	b.n	800a3d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	7c1b      	ldrb	r3, [r3, #16]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d10d      	bne.n	800a3b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3a2:	f107 0208 	add.w	r2, r7, #8
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	4798      	blx	r3
 800a3aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	2207      	movs	r2, #7
 800a3b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3b4:	e00f      	b.n	800a3d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a3b6:	6839      	ldr	r1, [r7, #0]
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 fa10 	bl	800a7de <USBD_CtlError>
        err++;
 800a3be:	7afb      	ldrb	r3, [r7, #11]
 800a3c0:	3301      	adds	r3, #1
 800a3c2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3c4:	e007      	b.n	800a3d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a3c6:	6839      	ldr	r1, [r7, #0]
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f000 fa08 	bl	800a7de <USBD_CtlError>
      err++;
 800a3ce:	7afb      	ldrb	r3, [r7, #11]
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	72fb      	strb	r3, [r7, #11]
      break;
 800a3d4:	bf00      	nop
  }

  if (err != 0U)
 800a3d6:	7afb      	ldrb	r3, [r7, #11]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d11e      	bne.n	800a41a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	88db      	ldrh	r3, [r3, #6]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d016      	beq.n	800a412 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a3e4:	893b      	ldrh	r3, [r7, #8]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d00e      	beq.n	800a408 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	88da      	ldrh	r2, [r3, #6]
 800a3ee:	893b      	ldrh	r3, [r7, #8]
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	bf28      	it	cs
 800a3f4:	4613      	movcs	r3, r2
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a3fa:	893b      	ldrh	r3, [r7, #8]
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	68f9      	ldr	r1, [r7, #12]
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fa69 	bl	800a8d8 <USBD_CtlSendData>
 800a406:	e009      	b.n	800a41c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a408:	6839      	ldr	r1, [r7, #0]
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	f000 f9e7 	bl	800a7de <USBD_CtlError>
 800a410:	e004      	b.n	800a41c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 faba 	bl	800a98c <USBD_CtlSendStatus>
 800a418:	e000      	b.n	800a41c <USBD_GetDescriptor+0x2cc>
    return;
 800a41a:	bf00      	nop
  }
}
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop

0800a424 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	889b      	ldrh	r3, [r3, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d131      	bne.n	800a49a <USBD_SetAddress+0x76>
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	88db      	ldrh	r3, [r3, #6]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d12d      	bne.n	800a49a <USBD_SetAddress+0x76>
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	885b      	ldrh	r3, [r3, #2]
 800a442:	2b7f      	cmp	r3, #127	@ 0x7f
 800a444:	d829      	bhi.n	800a49a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	885b      	ldrh	r3, [r3, #2]
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a450:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d104      	bne.n	800a468 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a45e:	6839      	ldr	r1, [r7, #0]
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 f9bc 	bl	800a7de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a466:	e01d      	b.n	800a4a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	7bfa      	ldrb	r2, [r7, #15]
 800a46c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a470:	7bfb      	ldrb	r3, [r7, #15]
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f000 fee3 	bl	800b240 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fa86 	bl	800a98c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a480:	7bfb      	ldrb	r3, [r7, #15]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d004      	beq.n	800a490 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2202      	movs	r2, #2
 800a48a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a48e:	e009      	b.n	800a4a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a498:	e004      	b.n	800a4a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a49a:	6839      	ldr	r1, [r7, #0]
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f000 f99e 	bl	800a7de <USBD_CtlError>
  }
}
 800a4a2:	bf00      	nop
 800a4a4:	bf00      	nop
 800a4a6:	3710      	adds	r7, #16
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b084      	sub	sp, #16
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4b6:	2300      	movs	r3, #0
 800a4b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	885b      	ldrh	r3, [r3, #2]
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	4b4e      	ldr	r3, [pc, #312]	@ (800a5fc <USBD_SetConfig+0x150>)
 800a4c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4c4:	4b4d      	ldr	r3, [pc, #308]	@ (800a5fc <USBD_SetConfig+0x150>)
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d905      	bls.n	800a4d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a4cc:	6839      	ldr	r1, [r7, #0]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f985 	bl	800a7de <USBD_CtlError>
    return USBD_FAIL;
 800a4d4:	2303      	movs	r3, #3
 800a4d6:	e08c      	b.n	800a5f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	2b02      	cmp	r3, #2
 800a4e2:	d002      	beq.n	800a4ea <USBD_SetConfig+0x3e>
 800a4e4:	2b03      	cmp	r3, #3
 800a4e6:	d029      	beq.n	800a53c <USBD_SetConfig+0x90>
 800a4e8:	e075      	b.n	800a5d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a4ea:	4b44      	ldr	r3, [pc, #272]	@ (800a5fc <USBD_SetConfig+0x150>)
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d020      	beq.n	800a534 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a4f2:	4b42      	ldr	r3, [pc, #264]	@ (800a5fc <USBD_SetConfig+0x150>)
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4fc:	4b3f      	ldr	r3, [pc, #252]	@ (800a5fc <USBD_SetConfig+0x150>)
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	4619      	mov	r1, r3
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f7fe ffe3 	bl	80094ce <USBD_SetClassConfig>
 800a508:	4603      	mov	r3, r0
 800a50a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d008      	beq.n	800a524 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a512:	6839      	ldr	r1, [r7, #0]
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f962 	bl	800a7de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2202      	movs	r2, #2
 800a51e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a522:	e065      	b.n	800a5f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fa31 	bl	800a98c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2203      	movs	r2, #3
 800a52e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a532:	e05d      	b.n	800a5f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f000 fa29 	bl	800a98c <USBD_CtlSendStatus>
      break;
 800a53a:	e059      	b.n	800a5f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a53c:	4b2f      	ldr	r3, [pc, #188]	@ (800a5fc <USBD_SetConfig+0x150>)
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d112      	bne.n	800a56a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2202      	movs	r2, #2
 800a548:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a54c:	4b2b      	ldr	r3, [pc, #172]	@ (800a5fc <USBD_SetConfig+0x150>)
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	461a      	mov	r2, r3
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a556:	4b29      	ldr	r3, [pc, #164]	@ (800a5fc <USBD_SetConfig+0x150>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	4619      	mov	r1, r3
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f7fe ffd2 	bl	8009506 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fa12 	bl	800a98c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a568:	e042      	b.n	800a5f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a56a:	4b24      	ldr	r3, [pc, #144]	@ (800a5fc <USBD_SetConfig+0x150>)
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	461a      	mov	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	429a      	cmp	r2, r3
 800a576:	d02a      	beq.n	800a5ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	b2db      	uxtb	r3, r3
 800a57e:	4619      	mov	r1, r3
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f7fe ffc0 	bl	8009506 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a586:	4b1d      	ldr	r3, [pc, #116]	@ (800a5fc <USBD_SetConfig+0x150>)
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	461a      	mov	r2, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a590:	4b1a      	ldr	r3, [pc, #104]	@ (800a5fc <USBD_SetConfig+0x150>)
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7fe ff99 	bl	80094ce <USBD_SetClassConfig>
 800a59c:	4603      	mov	r3, r0
 800a59e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a5a0:	7bfb      	ldrb	r3, [r7, #15]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d00f      	beq.n	800a5c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 f918 	bl	800a7de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f7fe ffa5 	bl	8009506 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2202      	movs	r2, #2
 800a5c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a5c4:	e014      	b.n	800a5f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 f9e0 	bl	800a98c <USBD_CtlSendStatus>
      break;
 800a5cc:	e010      	b.n	800a5f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 f9dc 	bl	800a98c <USBD_CtlSendStatus>
      break;
 800a5d4:	e00c      	b.n	800a5f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 f900 	bl	800a7de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5de:	4b07      	ldr	r3, [pc, #28]	@ (800a5fc <USBD_SetConfig+0x150>)
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	6878      	ldr	r0, [r7, #4]
 800a5e6:	f7fe ff8e 	bl	8009506 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a5ea:	2303      	movs	r3, #3
 800a5ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a5ee:	bf00      	nop
  }

  return ret;
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	20000708 	.word	0x20000708

0800a600 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	88db      	ldrh	r3, [r3, #6]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d004      	beq.n	800a61c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a612:	6839      	ldr	r1, [r7, #0]
 800a614:	6878      	ldr	r0, [r7, #4]
 800a616:	f000 f8e2 	bl	800a7de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a61a:	e023      	b.n	800a664 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a622:	b2db      	uxtb	r3, r3
 800a624:	2b02      	cmp	r3, #2
 800a626:	dc02      	bgt.n	800a62e <USBD_GetConfig+0x2e>
 800a628:	2b00      	cmp	r3, #0
 800a62a:	dc03      	bgt.n	800a634 <USBD_GetConfig+0x34>
 800a62c:	e015      	b.n	800a65a <USBD_GetConfig+0x5a>
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d00b      	beq.n	800a64a <USBD_GetConfig+0x4a>
 800a632:	e012      	b.n	800a65a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3308      	adds	r3, #8
 800a63e:	2201      	movs	r2, #1
 800a640:	4619      	mov	r1, r3
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 f948 	bl	800a8d8 <USBD_CtlSendData>
        break;
 800a648:	e00c      	b.n	800a664 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	3304      	adds	r3, #4
 800a64e:	2201      	movs	r2, #1
 800a650:	4619      	mov	r1, r3
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f940 	bl	800a8d8 <USBD_CtlSendData>
        break;
 800a658:	e004      	b.n	800a664 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 f8be 	bl	800a7de <USBD_CtlError>
        break;
 800a662:	bf00      	nop
}
 800a664:	bf00      	nop
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	3b01      	subs	r3, #1
 800a680:	2b02      	cmp	r3, #2
 800a682:	d81e      	bhi.n	800a6c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	88db      	ldrh	r3, [r3, #6]
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d004      	beq.n	800a696 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f8a5 	bl	800a7de <USBD_CtlError>
        break;
 800a694:	e01a      	b.n	800a6cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2201      	movs	r2, #1
 800a69a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d005      	beq.n	800a6b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	68db      	ldr	r3, [r3, #12]
 800a6aa:	f043 0202 	orr.w	r2, r3, #2
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	330c      	adds	r3, #12
 800a6b6:	2202      	movs	r2, #2
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 f90c 	bl	800a8d8 <USBD_CtlSendData>
      break;
 800a6c0:	e004      	b.n	800a6cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 f88a 	bl	800a7de <USBD_CtlError>
      break;
 800a6ca:	bf00      	nop
  }
}
 800a6cc:	bf00      	nop
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	885b      	ldrh	r3, [r3, #2]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d107      	bne.n	800a6f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 f94c 	bl	800a98c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a6f4:	e013      	b.n	800a71e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	885b      	ldrh	r3, [r3, #2]
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d10b      	bne.n	800a716 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	889b      	ldrh	r3, [r3, #4]
 800a702:	0a1b      	lsrs	r3, r3, #8
 800a704:	b29b      	uxth	r3, r3
 800a706:	b2da      	uxtb	r2, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 f93c 	bl	800a98c <USBD_CtlSendStatus>
}
 800a714:	e003      	b.n	800a71e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a716:	6839      	ldr	r1, [r7, #0]
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f000 f860 	bl	800a7de <USBD_CtlError>
}
 800a71e:	bf00      	nop
 800a720:	3708      	adds	r7, #8
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}

0800a726 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a726:	b580      	push	{r7, lr}
 800a728:	b082      	sub	sp, #8
 800a72a:	af00      	add	r7, sp, #0
 800a72c:	6078      	str	r0, [r7, #4]
 800a72e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a736:	b2db      	uxtb	r3, r3
 800a738:	3b01      	subs	r3, #1
 800a73a:	2b02      	cmp	r3, #2
 800a73c:	d80b      	bhi.n	800a756 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	885b      	ldrh	r3, [r3, #2]
 800a742:	2b01      	cmp	r3, #1
 800a744:	d10c      	bne.n	800a760 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f000 f91c 	bl	800a98c <USBD_CtlSendStatus>
      }
      break;
 800a754:	e004      	b.n	800a760 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a756:	6839      	ldr	r1, [r7, #0]
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f840 	bl	800a7de <USBD_CtlError>
      break;
 800a75e:	e000      	b.n	800a762 <USBD_ClrFeature+0x3c>
      break;
 800a760:	bf00      	nop
  }
}
 800a762:	bf00      	nop
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b084      	sub	sp, #16
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	781a      	ldrb	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	3301      	adds	r3, #1
 800a784:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	781a      	ldrb	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3301      	adds	r3, #1
 800a792:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7ff fa40 	bl	8009c1a <SWAPBYTE>
 800a79a:	4603      	mov	r3, r0
 800a79c:	461a      	mov	r2, r3
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f7ff fa33 	bl	8009c1a <SWAPBYTE>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	3301      	adds	r3, #1
 800a7c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f7ff fa26 	bl	8009c1a <SWAPBYTE>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	80da      	strh	r2, [r3, #6]
}
 800a7d6:	bf00      	nop
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}

0800a7de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b082      	sub	sp, #8
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7e8:	2180      	movs	r1, #128	@ 0x80
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f000 fcbe 	bl	800b16c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fcba 	bl	800b16c <USBD_LL_StallEP>
}
 800a7f8:	bf00      	nop
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af00      	add	r7, sp, #0
 800a806:	60f8      	str	r0, [r7, #12]
 800a808:	60b9      	str	r1, [r7, #8]
 800a80a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a80c:	2300      	movs	r3, #0
 800a80e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d042      	beq.n	800a89c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a81a:	6938      	ldr	r0, [r7, #16]
 800a81c:	f000 f842 	bl	800a8a4 <USBD_GetLen>
 800a820:	4603      	mov	r3, r0
 800a822:	3301      	adds	r3, #1
 800a824:	005b      	lsls	r3, r3, #1
 800a826:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a82a:	d808      	bhi.n	800a83e <USBD_GetString+0x3e>
 800a82c:	6938      	ldr	r0, [r7, #16]
 800a82e:	f000 f839 	bl	800a8a4 <USBD_GetLen>
 800a832:	4603      	mov	r3, r0
 800a834:	3301      	adds	r3, #1
 800a836:	b29b      	uxth	r3, r3
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	b29a      	uxth	r2, r3
 800a83c:	e001      	b.n	800a842 <USBD_GetString+0x42>
 800a83e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a846:	7dfb      	ldrb	r3, [r7, #23]
 800a848:	68ba      	ldr	r2, [r7, #8]
 800a84a:	4413      	add	r3, r2
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	7812      	ldrb	r2, [r2, #0]
 800a850:	701a      	strb	r2, [r3, #0]
  idx++;
 800a852:	7dfb      	ldrb	r3, [r7, #23]
 800a854:	3301      	adds	r3, #1
 800a856:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a858:	7dfb      	ldrb	r3, [r7, #23]
 800a85a:	68ba      	ldr	r2, [r7, #8]
 800a85c:	4413      	add	r3, r2
 800a85e:	2203      	movs	r2, #3
 800a860:	701a      	strb	r2, [r3, #0]
  idx++;
 800a862:	7dfb      	ldrb	r3, [r7, #23]
 800a864:	3301      	adds	r3, #1
 800a866:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a868:	e013      	b.n	800a892 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a86a:	7dfb      	ldrb	r3, [r7, #23]
 800a86c:	68ba      	ldr	r2, [r7, #8]
 800a86e:	4413      	add	r3, r2
 800a870:	693a      	ldr	r2, [r7, #16]
 800a872:	7812      	ldrb	r2, [r2, #0]
 800a874:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	3301      	adds	r3, #1
 800a87a:	613b      	str	r3, [r7, #16]
    idx++;
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
 800a87e:	3301      	adds	r3, #1
 800a880:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a882:	7dfb      	ldrb	r3, [r7, #23]
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	4413      	add	r3, r2
 800a888:	2200      	movs	r2, #0
 800a88a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
 800a88e:	3301      	adds	r3, #1
 800a890:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1e7      	bne.n	800a86a <USBD_GetString+0x6a>
 800a89a:	e000      	b.n	800a89e <USBD_GetString+0x9e>
    return;
 800a89c:	bf00      	nop
  }
}
 800a89e:	3718      	adds	r7, #24
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a8b4:	e005      	b.n	800a8c2 <USBD_GetLen+0x1e>
  {
    len++;
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a8c2:	68bb      	ldr	r3, [r7, #8]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1f5      	bne.n	800a8b6 <USBD_GetLen+0x12>
  }

  return len;
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2202      	movs	r2, #2
 800a8e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68ba      	ldr	r2, [r7, #8]
 800a8fc:	2100      	movs	r1, #0
 800a8fe:	68f8      	ldr	r0, [r7, #12]
 800a900:	f000 fcbd 	bl	800b27e <USBD_LL_Transmit>

  return USBD_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	60f8      	str	r0, [r7, #12]
 800a916:	60b9      	str	r1, [r7, #8]
 800a918:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	2100      	movs	r1, #0
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f000 fcac 	bl	800b27e <USBD_LL_Transmit>

  return USBD_OK;
 800a926:	2300      	movs	r3, #0
}
 800a928:	4618      	mov	r0, r3
 800a92a:	3710      	adds	r7, #16
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	2203      	movs	r2, #3
 800a940:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	2100      	movs	r1, #0
 800a95a:	68f8      	ldr	r0, [r7, #12]
 800a95c:	f000 fcb0 	bl	800b2c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a960:	2300      	movs	r3, #0
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b084      	sub	sp, #16
 800a96e:	af00      	add	r7, sp, #0
 800a970:	60f8      	str	r0, [r7, #12]
 800a972:	60b9      	str	r1, [r7, #8]
 800a974:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	2100      	movs	r1, #0
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 fc9f 	bl	800b2c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	3710      	adds	r7, #16
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b082      	sub	sp, #8
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2204      	movs	r2, #4
 800a998:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a99c:	2300      	movs	r3, #0
 800a99e:	2200      	movs	r2, #0
 800a9a0:	2100      	movs	r1, #0
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 fc6b 	bl	800b27e <USBD_LL_Transmit>

  return USBD_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3708      	adds	r7, #8
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}

0800a9b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a9b2:	b580      	push	{r7, lr}
 800a9b4:	b082      	sub	sp, #8
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2205      	movs	r2, #5
 800a9be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fc79 	bl	800b2c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	4912      	ldr	r1, [pc, #72]	@ (800aa28 <MX_USB_DEVICE_Init+0x50>)
 800a9e0:	4812      	ldr	r0, [pc, #72]	@ (800aa2c <MX_USB_DEVICE_Init+0x54>)
 800a9e2:	f7fe fcf7 	bl	80093d4 <USBD_Init>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a9ec:	f7f7 f908 	bl	8001c00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a9f0:	490f      	ldr	r1, [pc, #60]	@ (800aa30 <MX_USB_DEVICE_Init+0x58>)
 800a9f2:	480e      	ldr	r0, [pc, #56]	@ (800aa2c <MX_USB_DEVICE_Init+0x54>)
 800a9f4:	f7fe fd1e 	bl	8009434 <USBD_RegisterClass>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d001      	beq.n	800aa02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a9fe:	f7f7 f8ff 	bl	8001c00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800aa02:	490c      	ldr	r1, [pc, #48]	@ (800aa34 <MX_USB_DEVICE_Init+0x5c>)
 800aa04:	4809      	ldr	r0, [pc, #36]	@ (800aa2c <MX_USB_DEVICE_Init+0x54>)
 800aa06:	f7fe fc55 	bl	80092b4 <USBD_CDC_RegisterInterface>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aa10:	f7f7 f8f6 	bl	8001c00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aa14:	4805      	ldr	r0, [pc, #20]	@ (800aa2c <MX_USB_DEVICE_Init+0x54>)
 800aa16:	f7fe fd43 	bl	80094a0 <USBD_Start>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d001      	beq.n	800aa24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aa20:	f7f7 f8ee 	bl	8001c00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa24:	bf00      	nop
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	200000b4 	.word	0x200000b4
 800aa2c:	2000070c 	.word	0x2000070c
 800aa30:	20000020 	.word	0x20000020
 800aa34:	200000a0 	.word	0x200000a0

0800aa38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	4905      	ldr	r1, [pc, #20]	@ (800aa54 <CDC_Init_FS+0x1c>)
 800aa40:	4805      	ldr	r0, [pc, #20]	@ (800aa58 <CDC_Init_FS+0x20>)
 800aa42:	f7fe fc51 	bl	80092e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aa46:	4905      	ldr	r1, [pc, #20]	@ (800aa5c <CDC_Init_FS+0x24>)
 800aa48:	4803      	ldr	r0, [pc, #12]	@ (800aa58 <CDC_Init_FS+0x20>)
 800aa4a:	f7fe fc6f 	bl	800932c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	200011e8 	.word	0x200011e8
 800aa58:	2000070c 	.word	0x2000070c
 800aa5c:	200009e8 	.word	0x200009e8

0800aa60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aa60:	b480      	push	{r7}
 800aa62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aa64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	4603      	mov	r3, r0
 800aa78:	6039      	str	r1, [r7, #0]
 800aa7a:	71fb      	strb	r3, [r7, #7]
 800aa7c:	4613      	mov	r3, r2
 800aa7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800aa80:	79fb      	ldrb	r3, [r7, #7]
 800aa82:	2b23      	cmp	r3, #35	@ 0x23
 800aa84:	d84a      	bhi.n	800ab1c <CDC_Control_FS+0xac>
 800aa86:	a201      	add	r2, pc, #4	@ (adr r2, 800aa8c <CDC_Control_FS+0x1c>)
 800aa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8c:	0800ab1d 	.word	0x0800ab1d
 800aa90:	0800ab1d 	.word	0x0800ab1d
 800aa94:	0800ab1d 	.word	0x0800ab1d
 800aa98:	0800ab1d 	.word	0x0800ab1d
 800aa9c:	0800ab1d 	.word	0x0800ab1d
 800aaa0:	0800ab1d 	.word	0x0800ab1d
 800aaa4:	0800ab1d 	.word	0x0800ab1d
 800aaa8:	0800ab1d 	.word	0x0800ab1d
 800aaac:	0800ab1d 	.word	0x0800ab1d
 800aab0:	0800ab1d 	.word	0x0800ab1d
 800aab4:	0800ab1d 	.word	0x0800ab1d
 800aab8:	0800ab1d 	.word	0x0800ab1d
 800aabc:	0800ab1d 	.word	0x0800ab1d
 800aac0:	0800ab1d 	.word	0x0800ab1d
 800aac4:	0800ab1d 	.word	0x0800ab1d
 800aac8:	0800ab1d 	.word	0x0800ab1d
 800aacc:	0800ab1d 	.word	0x0800ab1d
 800aad0:	0800ab1d 	.word	0x0800ab1d
 800aad4:	0800ab1d 	.word	0x0800ab1d
 800aad8:	0800ab1d 	.word	0x0800ab1d
 800aadc:	0800ab1d 	.word	0x0800ab1d
 800aae0:	0800ab1d 	.word	0x0800ab1d
 800aae4:	0800ab1d 	.word	0x0800ab1d
 800aae8:	0800ab1d 	.word	0x0800ab1d
 800aaec:	0800ab1d 	.word	0x0800ab1d
 800aaf0:	0800ab1d 	.word	0x0800ab1d
 800aaf4:	0800ab1d 	.word	0x0800ab1d
 800aaf8:	0800ab1d 	.word	0x0800ab1d
 800aafc:	0800ab1d 	.word	0x0800ab1d
 800ab00:	0800ab1d 	.word	0x0800ab1d
 800ab04:	0800ab1d 	.word	0x0800ab1d
 800ab08:	0800ab1d 	.word	0x0800ab1d
 800ab0c:	0800ab1d 	.word	0x0800ab1d
 800ab10:	0800ab1d 	.word	0x0800ab1d
 800ab14:	0800ab1d 	.word	0x0800ab1d
 800ab18:	0800ab1d 	.word	0x0800ab1d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ab1c:	bf00      	nop
  }

  return (USBD_OK);
 800ab1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	4805      	ldr	r0, [pc, #20]	@ (800ab50 <CDC_Receive_FS+0x24>)
 800ab3a:	f7fe fbf7 	bl	800932c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ab3e:	4804      	ldr	r0, [pc, #16]	@ (800ab50 <CDC_Receive_FS+0x24>)
 800ab40:	f7fe fc12 	bl	8009368 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ab44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	2000070c 	.word	0x2000070c

0800ab54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ab66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	371c      	adds	r7, #28
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
	...

0800ab78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	4603      	mov	r3, r0
 800ab80:	6039      	str	r1, [r7, #0]
 800ab82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	2212      	movs	r2, #18
 800ab88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ab8a:	4b03      	ldr	r3, [pc, #12]	@ (800ab98 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr
 800ab98:	200000d0 	.word	0x200000d0

0800ab9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	4603      	mov	r3, r0
 800aba4:	6039      	str	r1, [r7, #0]
 800aba6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	2204      	movs	r2, #4
 800abac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800abae:	4b03      	ldr	r3, [pc, #12]	@ (800abbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800abb0:	4618      	mov	r0, r3
 800abb2:	370c      	adds	r7, #12
 800abb4:	46bd      	mov	sp, r7
 800abb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abba:	4770      	bx	lr
 800abbc:	200000e4 	.word	0x200000e4

0800abc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	4603      	mov	r3, r0
 800abc8:	6039      	str	r1, [r7, #0]
 800abca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800abcc:	79fb      	ldrb	r3, [r7, #7]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d105      	bne.n	800abde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800abd2:	683a      	ldr	r2, [r7, #0]
 800abd4:	4907      	ldr	r1, [pc, #28]	@ (800abf4 <USBD_FS_ProductStrDescriptor+0x34>)
 800abd6:	4808      	ldr	r0, [pc, #32]	@ (800abf8 <USBD_FS_ProductStrDescriptor+0x38>)
 800abd8:	f7ff fe12 	bl	800a800 <USBD_GetString>
 800abdc:	e004      	b.n	800abe8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	4904      	ldr	r1, [pc, #16]	@ (800abf4 <USBD_FS_ProductStrDescriptor+0x34>)
 800abe2:	4805      	ldr	r0, [pc, #20]	@ (800abf8 <USBD_FS_ProductStrDescriptor+0x38>)
 800abe4:	f7ff fe0c 	bl	800a800 <USBD_GetString>
  }
  return USBD_StrDesc;
 800abe8:	4b02      	ldr	r3, [pc, #8]	@ (800abf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800abea:	4618      	mov	r0, r3
 800abec:	3708      	adds	r7, #8
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop
 800abf4:	200019e8 	.word	0x200019e8
 800abf8:	0800fab8 	.word	0x0800fab8

0800abfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	4603      	mov	r3, r0
 800ac04:	6039      	str	r1, [r7, #0]
 800ac06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac08:	683a      	ldr	r2, [r7, #0]
 800ac0a:	4904      	ldr	r1, [pc, #16]	@ (800ac1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ac0c:	4804      	ldr	r0, [pc, #16]	@ (800ac20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ac0e:	f7ff fdf7 	bl	800a800 <USBD_GetString>
  return USBD_StrDesc;
 800ac12:	4b02      	ldr	r3, [pc, #8]	@ (800ac1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	200019e8 	.word	0x200019e8
 800ac20:	0800fad0 	.word	0x0800fad0

0800ac24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	6039      	str	r1, [r7, #0]
 800ac2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	221a      	movs	r2, #26
 800ac34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac36:	f000 f843 	bl	800acc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ac3a:	4b02      	ldr	r3, [pc, #8]	@ (800ac44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	200000e8 	.word	0x200000e8

0800ac48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b082      	sub	sp, #8
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	4603      	mov	r3, r0
 800ac50:	6039      	str	r1, [r7, #0]
 800ac52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ac54:	79fb      	ldrb	r3, [r7, #7]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d105      	bne.n	800ac66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac5a:	683a      	ldr	r2, [r7, #0]
 800ac5c:	4907      	ldr	r1, [pc, #28]	@ (800ac7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac5e:	4808      	ldr	r0, [pc, #32]	@ (800ac80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac60:	f7ff fdce 	bl	800a800 <USBD_GetString>
 800ac64:	e004      	b.n	800ac70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	4904      	ldr	r1, [pc, #16]	@ (800ac7c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ac6a:	4805      	ldr	r0, [pc, #20]	@ (800ac80 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ac6c:	f7ff fdc8 	bl	800a800 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac70:	4b02      	ldr	r3, [pc, #8]	@ (800ac7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3708      	adds	r7, #8
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	200019e8 	.word	0x200019e8
 800ac80:	0800fae4 	.word	0x0800fae4

0800ac84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b082      	sub	sp, #8
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	6039      	str	r1, [r7, #0]
 800ac8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac90:	79fb      	ldrb	r3, [r7, #7]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d105      	bne.n	800aca2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	4907      	ldr	r1, [pc, #28]	@ (800acb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ac9a:	4808      	ldr	r0, [pc, #32]	@ (800acbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ac9c:	f7ff fdb0 	bl	800a800 <USBD_GetString>
 800aca0:	e004      	b.n	800acac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800aca2:	683a      	ldr	r2, [r7, #0]
 800aca4:	4904      	ldr	r1, [pc, #16]	@ (800acb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800aca6:	4805      	ldr	r0, [pc, #20]	@ (800acbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800aca8:	f7ff fdaa 	bl	800a800 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acac:	4b02      	ldr	r3, [pc, #8]	@ (800acb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	200019e8 	.word	0x200019e8
 800acbc:	0800faf0 	.word	0x0800faf0

0800acc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800acc6:	4b0f      	ldr	r3, [pc, #60]	@ (800ad04 <Get_SerialNum+0x44>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800accc:	4b0e      	ldr	r3, [pc, #56]	@ (800ad08 <Get_SerialNum+0x48>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800acd2:	4b0e      	ldr	r3, [pc, #56]	@ (800ad0c <Get_SerialNum+0x4c>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	4413      	add	r3, r2
 800acde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d009      	beq.n	800acfa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ace6:	2208      	movs	r2, #8
 800ace8:	4909      	ldr	r1, [pc, #36]	@ (800ad10 <Get_SerialNum+0x50>)
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f000 f814 	bl	800ad18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800acf0:	2204      	movs	r2, #4
 800acf2:	4908      	ldr	r1, [pc, #32]	@ (800ad14 <Get_SerialNum+0x54>)
 800acf4:	68b8      	ldr	r0, [r7, #8]
 800acf6:	f000 f80f 	bl	800ad18 <IntToUnicode>
  }
}
 800acfa:	bf00      	nop
 800acfc:	3710      	adds	r7, #16
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	1fff7a10 	.word	0x1fff7a10
 800ad08:	1fff7a14 	.word	0x1fff7a14
 800ad0c:	1fff7a18 	.word	0x1fff7a18
 800ad10:	200000ea 	.word	0x200000ea
 800ad14:	200000fa 	.word	0x200000fa

0800ad18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b087      	sub	sp, #28
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	4613      	mov	r3, r2
 800ad24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	75fb      	strb	r3, [r7, #23]
 800ad2e:	e027      	b.n	800ad80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	0f1b      	lsrs	r3, r3, #28
 800ad34:	2b09      	cmp	r3, #9
 800ad36:	d80b      	bhi.n	800ad50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	0f1b      	lsrs	r3, r3, #28
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	7dfb      	ldrb	r3, [r7, #23]
 800ad40:	005b      	lsls	r3, r3, #1
 800ad42:	4619      	mov	r1, r3
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	440b      	add	r3, r1
 800ad48:	3230      	adds	r2, #48	@ 0x30
 800ad4a:	b2d2      	uxtb	r2, r2
 800ad4c:	701a      	strb	r2, [r3, #0]
 800ad4e:	e00a      	b.n	800ad66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	0f1b      	lsrs	r3, r3, #28
 800ad54:	b2da      	uxtb	r2, r3
 800ad56:	7dfb      	ldrb	r3, [r7, #23]
 800ad58:	005b      	lsls	r3, r3, #1
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	440b      	add	r3, r1
 800ad60:	3237      	adds	r2, #55	@ 0x37
 800ad62:	b2d2      	uxtb	r2, r2
 800ad64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	011b      	lsls	r3, r3, #4
 800ad6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
 800ad6e:	005b      	lsls	r3, r3, #1
 800ad70:	3301      	adds	r3, #1
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	4413      	add	r3, r2
 800ad76:	2200      	movs	r2, #0
 800ad78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ad7a:	7dfb      	ldrb	r3, [r7, #23]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	75fb      	strb	r3, [r7, #23]
 800ad80:	7dfa      	ldrb	r2, [r7, #23]
 800ad82:	79fb      	ldrb	r3, [r7, #7]
 800ad84:	429a      	cmp	r2, r3
 800ad86:	d3d3      	bcc.n	800ad30 <IntToUnicode+0x18>
  }
}
 800ad88:	bf00      	nop
 800ad8a:	bf00      	nop
 800ad8c:	371c      	adds	r7, #28
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr
	...

0800ad98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b08a      	sub	sp, #40	@ 0x28
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ada0:	f107 0314 	add.w	r3, r7, #20
 800ada4:	2200      	movs	r2, #0
 800ada6:	601a      	str	r2, [r3, #0]
 800ada8:	605a      	str	r2, [r3, #4]
 800adaa:	609a      	str	r2, [r3, #8]
 800adac:	60da      	str	r2, [r3, #12]
 800adae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800adb8:	d132      	bne.n	800ae20 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800adba:	2300      	movs	r3, #0
 800adbc:	613b      	str	r3, [r7, #16]
 800adbe:	4b1a      	ldr	r3, [pc, #104]	@ (800ae28 <HAL_PCD_MspInit+0x90>)
 800adc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc2:	4a19      	ldr	r2, [pc, #100]	@ (800ae28 <HAL_PCD_MspInit+0x90>)
 800adc4:	f043 0301 	orr.w	r3, r3, #1
 800adc8:	6313      	str	r3, [r2, #48]	@ 0x30
 800adca:	4b17      	ldr	r3, [pc, #92]	@ (800ae28 <HAL_PCD_MspInit+0x90>)
 800adcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adce:	f003 0301 	and.w	r3, r3, #1
 800add2:	613b      	str	r3, [r7, #16]
 800add4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800add6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800adda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800addc:	2302      	movs	r3, #2
 800adde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ade0:	2300      	movs	r3, #0
 800ade2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ade4:	2303      	movs	r3, #3
 800ade6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ade8:	230a      	movs	r3, #10
 800adea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800adec:	f107 0314 	add.w	r3, r7, #20
 800adf0:	4619      	mov	r1, r3
 800adf2:	480e      	ldr	r0, [pc, #56]	@ (800ae2c <HAL_PCD_MspInit+0x94>)
 800adf4:	f7f8 fd34 	bl	8003860 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800adf8:	4b0b      	ldr	r3, [pc, #44]	@ (800ae28 <HAL_PCD_MspInit+0x90>)
 800adfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800adfc:	4a0a      	ldr	r2, [pc, #40]	@ (800ae28 <HAL_PCD_MspInit+0x90>)
 800adfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae02:	6353      	str	r3, [r2, #52]	@ 0x34
 800ae04:	2300      	movs	r3, #0
 800ae06:	60fb      	str	r3, [r7, #12]
 800ae08:	4b07      	ldr	r3, [pc, #28]	@ (800ae28 <HAL_PCD_MspInit+0x90>)
 800ae0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae0c:	4a06      	ldr	r2, [pc, #24]	@ (800ae28 <HAL_PCD_MspInit+0x90>)
 800ae0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ae12:	6453      	str	r3, [r2, #68]	@ 0x44
 800ae14:	4b04      	ldr	r3, [pc, #16]	@ (800ae28 <HAL_PCD_MspInit+0x90>)
 800ae16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ae1c:	60fb      	str	r3, [r7, #12]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ae20:	bf00      	nop
 800ae22:	3728      	adds	r7, #40	@ 0x28
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}
 800ae28:	40023800 	.word	0x40023800
 800ae2c:	40020000 	.word	0x40020000

0800ae30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ae44:	4619      	mov	r1, r3
 800ae46:	4610      	mov	r0, r2
 800ae48:	f7fe fb77 	bl	800953a <USBD_LL_SetupStage>
}
 800ae4c:	bf00      	nop
 800ae4e:	3708      	adds	r7, #8
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b082      	sub	sp, #8
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	460b      	mov	r3, r1
 800ae5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ae66:	78fa      	ldrb	r2, [r7, #3]
 800ae68:	6879      	ldr	r1, [r7, #4]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	00db      	lsls	r3, r3, #3
 800ae6e:	4413      	add	r3, r2
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	440b      	add	r3, r1
 800ae74:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	78fb      	ldrb	r3, [r7, #3]
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	f7fe fbb1 	bl	80095e4 <USBD_LL_DataOutStage>
}
 800ae82:	bf00      	nop
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}

0800ae8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
 800ae92:	460b      	mov	r3, r1
 800ae94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ae9c:	78fa      	ldrb	r2, [r7, #3]
 800ae9e:	6879      	ldr	r1, [r7, #4]
 800aea0:	4613      	mov	r3, r2
 800aea2:	00db      	lsls	r3, r3, #3
 800aea4:	4413      	add	r3, r2
 800aea6:	009b      	lsls	r3, r3, #2
 800aea8:	440b      	add	r3, r1
 800aeaa:	3320      	adds	r3, #32
 800aeac:	681a      	ldr	r2, [r3, #0]
 800aeae:	78fb      	ldrb	r3, [r7, #3]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	f7fe fc4a 	bl	800974a <USBD_LL_DataInStage>
}
 800aeb6:	bf00      	nop
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fe fd84 	bl	80099da <USBD_LL_SOF>
}
 800aed2:	bf00      	nop
 800aed4:	3708      	adds	r7, #8
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}

0800aeda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b084      	sub	sp, #16
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800aee2:	2301      	movs	r3, #1
 800aee4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	79db      	ldrb	r3, [r3, #7]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d102      	bne.n	800aef4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800aeee:	2300      	movs	r3, #0
 800aef0:	73fb      	strb	r3, [r7, #15]
 800aef2:	e008      	b.n	800af06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	79db      	ldrb	r3, [r3, #7]
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d102      	bne.n	800af02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800aefc:	2301      	movs	r3, #1
 800aefe:	73fb      	strb	r3, [r7, #15]
 800af00:	e001      	b.n	800af06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800af02:	f7f6 fe7d 	bl	8001c00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af0c:	7bfa      	ldrb	r2, [r7, #15]
 800af0e:	4611      	mov	r1, r2
 800af10:	4618      	mov	r0, r3
 800af12:	f7fe fd1e 	bl	8009952 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af1c:	4618      	mov	r0, r3
 800af1e:	f7fe fcc6 	bl	80098ae <USBD_LL_Reset>
}
 800af22:	bf00      	nop
 800af24:	3710      	adds	r7, #16
 800af26:	46bd      	mov	sp, r7
 800af28:	bd80      	pop	{r7, pc}
	...

0800af2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7fe fd19 	bl	8009972 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	6812      	ldr	r2, [r2, #0]
 800af4e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800af52:	f043 0301 	orr.w	r3, r3, #1
 800af56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	7adb      	ldrb	r3, [r3, #11]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d005      	beq.n	800af6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800af60:	4b04      	ldr	r3, [pc, #16]	@ (800af74 <HAL_PCD_SuspendCallback+0x48>)
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	4a03      	ldr	r2, [pc, #12]	@ (800af74 <HAL_PCD_SuspendCallback+0x48>)
 800af66:	f043 0306 	orr.w	r3, r3, #6
 800af6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800af6c:	bf00      	nop
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}
 800af74:	e000ed00 	.word	0xe000ed00

0800af78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af86:	4618      	mov	r0, r3
 800af88:	f7fe fd0f 	bl	80099aa <USBD_LL_Resume>
}
 800af8c:	bf00      	nop
 800af8e:	3708      	adds	r7, #8
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	460b      	mov	r3, r1
 800af9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800afa6:	78fa      	ldrb	r2, [r7, #3]
 800afa8:	4611      	mov	r1, r2
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fe fd67 	bl	8009a7e <USBD_LL_IsoOUTIncomplete>
}
 800afb0:	bf00      	nop
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	460b      	mov	r3, r1
 800afc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800afca:	78fa      	ldrb	r2, [r7, #3]
 800afcc:	4611      	mov	r1, r2
 800afce:	4618      	mov	r0, r3
 800afd0:	f7fe fd23 	bl	8009a1a <USBD_LL_IsoINIncomplete>
}
 800afd4:	bf00      	nop
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b082      	sub	sp, #8
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800afea:	4618      	mov	r0, r3
 800afec:	f7fe fd79 	bl	8009ae2 <USBD_LL_DevConnected>
}
 800aff0:	bf00      	nop
 800aff2:	3708      	adds	r7, #8
 800aff4:	46bd      	mov	sp, r7
 800aff6:	bd80      	pop	{r7, pc}

0800aff8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b082      	sub	sp, #8
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b006:	4618      	mov	r0, r3
 800b008:	f7fe fd76 	bl	8009af8 <USBD_LL_DevDisconnected>
}
 800b00c:	bf00      	nop
 800b00e:	3708      	adds	r7, #8
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b082      	sub	sp, #8
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d13c      	bne.n	800b09e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b024:	4a20      	ldr	r2, [pc, #128]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	4a1e      	ldr	r2, [pc, #120]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b030:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b034:	4b1c      	ldr	r3, [pc, #112]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b036:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b03a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b03c:	4b1a      	ldr	r3, [pc, #104]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b03e:	2204      	movs	r2, #4
 800b040:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b042:	4b19      	ldr	r3, [pc, #100]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b044:	2202      	movs	r2, #2
 800b046:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b048:	4b17      	ldr	r3, [pc, #92]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b04a:	2200      	movs	r2, #0
 800b04c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b04e:	4b16      	ldr	r3, [pc, #88]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b050:	2202      	movs	r2, #2
 800b052:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b054:	4b14      	ldr	r3, [pc, #80]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b056:	2200      	movs	r2, #0
 800b058:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b05a:	4b13      	ldr	r3, [pc, #76]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b060:	4b11      	ldr	r3, [pc, #68]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b062:	2200      	movs	r2, #0
 800b064:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b066:	4b10      	ldr	r3, [pc, #64]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b068:	2200      	movs	r2, #0
 800b06a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b06c:	4b0e      	ldr	r3, [pc, #56]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b06e:	2200      	movs	r2, #0
 800b070:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b072:	480d      	ldr	r0, [pc, #52]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b074:	f7f8 fd78 	bl	8003b68 <HAL_PCD_Init>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d001      	beq.n	800b082 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b07e:	f7f6 fdbf 	bl	8001c00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b082:	2180      	movs	r1, #128	@ 0x80
 800b084:	4808      	ldr	r0, [pc, #32]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b086:	f7f9 ffa4 	bl	8004fd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b08a:	2240      	movs	r2, #64	@ 0x40
 800b08c:	2100      	movs	r1, #0
 800b08e:	4806      	ldr	r0, [pc, #24]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b090:	f7f9 ff58 	bl	8004f44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b094:	2280      	movs	r2, #128	@ 0x80
 800b096:	2101      	movs	r1, #1
 800b098:	4803      	ldr	r0, [pc, #12]	@ (800b0a8 <USBD_LL_Init+0x94>)
 800b09a:	f7f9 ff53 	bl	8004f44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b09e:	2300      	movs	r3, #0
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	20001be8 	.word	0x20001be8

0800b0ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7f8 fe5f 	bl	8003d86 <HAL_PCD_Start>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b0cc:	7bfb      	ldrb	r3, [r7, #15]
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	f000 f942 	bl	800b358 <USBD_Get_USB_Status>
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3710      	adds	r7, #16
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b084      	sub	sp, #16
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	4608      	mov	r0, r1
 800b0ec:	4611      	mov	r1, r2
 800b0ee:	461a      	mov	r2, r3
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	70fb      	strb	r3, [r7, #3]
 800b0f4:	460b      	mov	r3, r1
 800b0f6:	70bb      	strb	r3, [r7, #2]
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b100:	2300      	movs	r3, #0
 800b102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b10a:	78bb      	ldrb	r3, [r7, #2]
 800b10c:	883a      	ldrh	r2, [r7, #0]
 800b10e:	78f9      	ldrb	r1, [r7, #3]
 800b110:	f7f9 fb33 	bl	800477a <HAL_PCD_EP_Open>
 800b114:	4603      	mov	r3, r0
 800b116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b118:	7bfb      	ldrb	r3, [r7, #15]
 800b11a:	4618      	mov	r0, r3
 800b11c:	f000 f91c 	bl	800b358 <USBD_Get_USB_Status>
 800b120:	4603      	mov	r3, r0
 800b122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b124:	7bbb      	ldrb	r3, [r7, #14]
}
 800b126:	4618      	mov	r0, r3
 800b128:	3710      	adds	r7, #16
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	460b      	mov	r3, r1
 800b138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b148:	78fa      	ldrb	r2, [r7, #3]
 800b14a:	4611      	mov	r1, r2
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7f9 fb7e 	bl	800484e <HAL_PCD_EP_Close>
 800b152:	4603      	mov	r3, r0
 800b154:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b156:	7bfb      	ldrb	r3, [r7, #15]
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 f8fd 	bl	800b358 <USBD_Get_USB_Status>
 800b15e:	4603      	mov	r3, r0
 800b160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b162:	7bbb      	ldrb	r3, [r7, #14]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	460b      	mov	r3, r1
 800b176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b178:	2300      	movs	r3, #0
 800b17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b17c:	2300      	movs	r3, #0
 800b17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b186:	78fa      	ldrb	r2, [r7, #3]
 800b188:	4611      	mov	r1, r2
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7f9 fc36 	bl	80049fc <HAL_PCD_EP_SetStall>
 800b190:	4603      	mov	r3, r0
 800b192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b194:	7bfb      	ldrb	r3, [r7, #15]
 800b196:	4618      	mov	r0, r3
 800b198:	f000 f8de 	bl	800b358 <USBD_Get_USB_Status>
 800b19c:	4603      	mov	r3, r0
 800b19e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1c4:	78fa      	ldrb	r2, [r7, #3]
 800b1c6:	4611      	mov	r1, r2
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7f9 fc7a 	bl	8004ac2 <HAL_PCD_EP_ClrStall>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f000 f8bf 	bl	800b358 <USBD_Get_USB_Status>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b085      	sub	sp, #20
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b1fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b200:	2b00      	cmp	r3, #0
 800b202:	da0b      	bge.n	800b21c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b204:	78fb      	ldrb	r3, [r7, #3]
 800b206:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b20a:	68f9      	ldr	r1, [r7, #12]
 800b20c:	4613      	mov	r3, r2
 800b20e:	00db      	lsls	r3, r3, #3
 800b210:	4413      	add	r3, r2
 800b212:	009b      	lsls	r3, r3, #2
 800b214:	440b      	add	r3, r1
 800b216:	3316      	adds	r3, #22
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	e00b      	b.n	800b234 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b21c:	78fb      	ldrb	r3, [r7, #3]
 800b21e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b222:	68f9      	ldr	r1, [r7, #12]
 800b224:	4613      	mov	r3, r2
 800b226:	00db      	lsls	r3, r3, #3
 800b228:	4413      	add	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	440b      	add	r3, r1
 800b22e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b232:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b234:	4618      	mov	r0, r3
 800b236:	3714      	adds	r7, #20
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
 800b248:	460b      	mov	r3, r1
 800b24a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b24c:	2300      	movs	r3, #0
 800b24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b250:	2300      	movs	r3, #0
 800b252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b25a:	78fa      	ldrb	r2, [r7, #3]
 800b25c:	4611      	mov	r1, r2
 800b25e:	4618      	mov	r0, r3
 800b260:	f7f9 fa67 	bl	8004732 <HAL_PCD_SetAddress>
 800b264:	4603      	mov	r3, r0
 800b266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b268:	7bfb      	ldrb	r3, [r7, #15]
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 f874 	bl	800b358 <USBD_Get_USB_Status>
 800b270:	4603      	mov	r3, r0
 800b272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b274:	7bbb      	ldrb	r3, [r7, #14]
}
 800b276:	4618      	mov	r0, r3
 800b278:	3710      	adds	r7, #16
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b27e:	b580      	push	{r7, lr}
 800b280:	b086      	sub	sp, #24
 800b282:	af00      	add	r7, sp, #0
 800b284:	60f8      	str	r0, [r7, #12]
 800b286:	607a      	str	r2, [r7, #4]
 800b288:	603b      	str	r3, [r7, #0]
 800b28a:	460b      	mov	r3, r1
 800b28c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b28e:	2300      	movs	r3, #0
 800b290:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b292:	2300      	movs	r3, #0
 800b294:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b29c:	7af9      	ldrb	r1, [r7, #11]
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	687a      	ldr	r2, [r7, #4]
 800b2a2:	f7f9 fb71 	bl	8004988 <HAL_PCD_EP_Transmit>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2aa:	7dfb      	ldrb	r3, [r7, #23]
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f000 f853 	bl	800b358 <USBD_Get_USB_Status>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	3718      	adds	r7, #24
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b086      	sub	sp, #24
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	60f8      	str	r0, [r7, #12]
 800b2c8:	607a      	str	r2, [r7, #4]
 800b2ca:	603b      	str	r3, [r7, #0]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b2de:	7af9      	ldrb	r1, [r7, #11]
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	f7f9 fafd 	bl	80048e2 <HAL_PCD_EP_Receive>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2ec:	7dfb      	ldrb	r3, [r7, #23]
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 f832 	bl	800b358 <USBD_Get_USB_Status>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b2f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3718      	adds	r7, #24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}

0800b302 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b082      	sub	sp, #8
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	460b      	mov	r3, r1
 800b30c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b314:	78fa      	ldrb	r2, [r7, #3]
 800b316:	4611      	mov	r1, r2
 800b318:	4618      	mov	r0, r3
 800b31a:	f7f9 fb1d 	bl	8004958 <HAL_PCD_EP_GetRxCount>
 800b31e:	4603      	mov	r3, r0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b330:	4b03      	ldr	r3, [pc, #12]	@ (800b340 <USBD_static_malloc+0x18>)
}
 800b332:	4618      	mov	r0, r3
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	200020cc 	.word	0x200020cc

0800b344 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]

}
 800b34c:	bf00      	nop
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	4603      	mov	r3, r0
 800b360:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b362:	2300      	movs	r3, #0
 800b364:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b366:	79fb      	ldrb	r3, [r7, #7]
 800b368:	2b03      	cmp	r3, #3
 800b36a:	d817      	bhi.n	800b39c <USBD_Get_USB_Status+0x44>
 800b36c:	a201      	add	r2, pc, #4	@ (adr r2, 800b374 <USBD_Get_USB_Status+0x1c>)
 800b36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b372:	bf00      	nop
 800b374:	0800b385 	.word	0x0800b385
 800b378:	0800b38b 	.word	0x0800b38b
 800b37c:	0800b391 	.word	0x0800b391
 800b380:	0800b397 	.word	0x0800b397
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b384:	2300      	movs	r3, #0
 800b386:	73fb      	strb	r3, [r7, #15]
    break;
 800b388:	e00b      	b.n	800b3a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b38a:	2303      	movs	r3, #3
 800b38c:	73fb      	strb	r3, [r7, #15]
    break;
 800b38e:	e008      	b.n	800b3a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b390:	2301      	movs	r3, #1
 800b392:	73fb      	strb	r3, [r7, #15]
    break;
 800b394:	e005      	b.n	800b3a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b396:	2303      	movs	r3, #3
 800b398:	73fb      	strb	r3, [r7, #15]
    break;
 800b39a:	e002      	b.n	800b3a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b39c:	2303      	movs	r3, #3
 800b39e:	73fb      	strb	r3, [r7, #15]
    break;
 800b3a0:	bf00      	nop
  }
  return usb_status;
 800b3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3714      	adds	r7, #20
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <sulp>:
 800b3b0:	b570      	push	{r4, r5, r6, lr}
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	460d      	mov	r5, r1
 800b3b6:	ec45 4b10 	vmov	d0, r4, r5
 800b3ba:	4616      	mov	r6, r2
 800b3bc:	f003 fc5c 	bl	800ec78 <__ulp>
 800b3c0:	ec51 0b10 	vmov	r0, r1, d0
 800b3c4:	b17e      	cbz	r6, 800b3e6 <sulp+0x36>
 800b3c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b3ca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	dd09      	ble.n	800b3e6 <sulp+0x36>
 800b3d2:	051b      	lsls	r3, r3, #20
 800b3d4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b3d8:	2400      	movs	r4, #0
 800b3da:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b3de:	4622      	mov	r2, r4
 800b3e0:	462b      	mov	r3, r5
 800b3e2:	f7f5 f911 	bl	8000608 <__aeabi_dmul>
 800b3e6:	ec41 0b10 	vmov	d0, r0, r1
 800b3ea:	bd70      	pop	{r4, r5, r6, pc}
 800b3ec:	0000      	movs	r0, r0
	...

0800b3f0 <_strtod_l>:
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	b09f      	sub	sp, #124	@ 0x7c
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	921a      	str	r2, [sp, #104]	@ 0x68
 800b3fe:	9005      	str	r0, [sp, #20]
 800b400:	f04f 0a00 	mov.w	sl, #0
 800b404:	f04f 0b00 	mov.w	fp, #0
 800b408:	460a      	mov	r2, r1
 800b40a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b40c:	7811      	ldrb	r1, [r2, #0]
 800b40e:	292b      	cmp	r1, #43	@ 0x2b
 800b410:	d04a      	beq.n	800b4a8 <_strtod_l+0xb8>
 800b412:	d838      	bhi.n	800b486 <_strtod_l+0x96>
 800b414:	290d      	cmp	r1, #13
 800b416:	d832      	bhi.n	800b47e <_strtod_l+0x8e>
 800b418:	2908      	cmp	r1, #8
 800b41a:	d832      	bhi.n	800b482 <_strtod_l+0x92>
 800b41c:	2900      	cmp	r1, #0
 800b41e:	d03b      	beq.n	800b498 <_strtod_l+0xa8>
 800b420:	2200      	movs	r2, #0
 800b422:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b424:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b426:	782a      	ldrb	r2, [r5, #0]
 800b428:	2a30      	cmp	r2, #48	@ 0x30
 800b42a:	f040 80b3 	bne.w	800b594 <_strtod_l+0x1a4>
 800b42e:	786a      	ldrb	r2, [r5, #1]
 800b430:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b434:	2a58      	cmp	r2, #88	@ 0x58
 800b436:	d16e      	bne.n	800b516 <_strtod_l+0x126>
 800b438:	9302      	str	r3, [sp, #8]
 800b43a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b43c:	9301      	str	r3, [sp, #4]
 800b43e:	ab1a      	add	r3, sp, #104	@ 0x68
 800b440:	9300      	str	r3, [sp, #0]
 800b442:	4a8e      	ldr	r2, [pc, #568]	@ (800b67c <_strtod_l+0x28c>)
 800b444:	9805      	ldr	r0, [sp, #20]
 800b446:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b448:	a919      	add	r1, sp, #100	@ 0x64
 800b44a:	f002 fd07 	bl	800de5c <__gethex>
 800b44e:	f010 060f 	ands.w	r6, r0, #15
 800b452:	4604      	mov	r4, r0
 800b454:	d005      	beq.n	800b462 <_strtod_l+0x72>
 800b456:	2e06      	cmp	r6, #6
 800b458:	d128      	bne.n	800b4ac <_strtod_l+0xbc>
 800b45a:	3501      	adds	r5, #1
 800b45c:	2300      	movs	r3, #0
 800b45e:	9519      	str	r5, [sp, #100]	@ 0x64
 800b460:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b462:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b464:	2b00      	cmp	r3, #0
 800b466:	f040 858e 	bne.w	800bf86 <_strtod_l+0xb96>
 800b46a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b46c:	b1cb      	cbz	r3, 800b4a2 <_strtod_l+0xb2>
 800b46e:	4652      	mov	r2, sl
 800b470:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b474:	ec43 2b10 	vmov	d0, r2, r3
 800b478:	b01f      	add	sp, #124	@ 0x7c
 800b47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47e:	2920      	cmp	r1, #32
 800b480:	d1ce      	bne.n	800b420 <_strtod_l+0x30>
 800b482:	3201      	adds	r2, #1
 800b484:	e7c1      	b.n	800b40a <_strtod_l+0x1a>
 800b486:	292d      	cmp	r1, #45	@ 0x2d
 800b488:	d1ca      	bne.n	800b420 <_strtod_l+0x30>
 800b48a:	2101      	movs	r1, #1
 800b48c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b48e:	1c51      	adds	r1, r2, #1
 800b490:	9119      	str	r1, [sp, #100]	@ 0x64
 800b492:	7852      	ldrb	r2, [r2, #1]
 800b494:	2a00      	cmp	r2, #0
 800b496:	d1c5      	bne.n	800b424 <_strtod_l+0x34>
 800b498:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b49a:	9419      	str	r4, [sp, #100]	@ 0x64
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f040 8570 	bne.w	800bf82 <_strtod_l+0xb92>
 800b4a2:	4652      	mov	r2, sl
 800b4a4:	465b      	mov	r3, fp
 800b4a6:	e7e5      	b.n	800b474 <_strtod_l+0x84>
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	e7ef      	b.n	800b48c <_strtod_l+0x9c>
 800b4ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b4ae:	b13a      	cbz	r2, 800b4c0 <_strtod_l+0xd0>
 800b4b0:	2135      	movs	r1, #53	@ 0x35
 800b4b2:	a81c      	add	r0, sp, #112	@ 0x70
 800b4b4:	f003 fcda 	bl	800ee6c <__copybits>
 800b4b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4ba:	9805      	ldr	r0, [sp, #20]
 800b4bc:	f003 f8a8 	bl	800e610 <_Bfree>
 800b4c0:	3e01      	subs	r6, #1
 800b4c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b4c4:	2e04      	cmp	r6, #4
 800b4c6:	d806      	bhi.n	800b4d6 <_strtod_l+0xe6>
 800b4c8:	e8df f006 	tbb	[pc, r6]
 800b4cc:	201d0314 	.word	0x201d0314
 800b4d0:	14          	.byte	0x14
 800b4d1:	00          	.byte	0x00
 800b4d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b4d6:	05e1      	lsls	r1, r4, #23
 800b4d8:	bf48      	it	mi
 800b4da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b4de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b4e2:	0d1b      	lsrs	r3, r3, #20
 800b4e4:	051b      	lsls	r3, r3, #20
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1bb      	bne.n	800b462 <_strtod_l+0x72>
 800b4ea:	f001 fd6d 	bl	800cfc8 <__errno>
 800b4ee:	2322      	movs	r3, #34	@ 0x22
 800b4f0:	6003      	str	r3, [r0, #0]
 800b4f2:	e7b6      	b.n	800b462 <_strtod_l+0x72>
 800b4f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b4f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b4fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b500:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b504:	e7e7      	b.n	800b4d6 <_strtod_l+0xe6>
 800b506:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b684 <_strtod_l+0x294>
 800b50a:	e7e4      	b.n	800b4d6 <_strtod_l+0xe6>
 800b50c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b510:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b514:	e7df      	b.n	800b4d6 <_strtod_l+0xe6>
 800b516:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b518:	1c5a      	adds	r2, r3, #1
 800b51a:	9219      	str	r2, [sp, #100]	@ 0x64
 800b51c:	785b      	ldrb	r3, [r3, #1]
 800b51e:	2b30      	cmp	r3, #48	@ 0x30
 800b520:	d0f9      	beq.n	800b516 <_strtod_l+0x126>
 800b522:	2b00      	cmp	r3, #0
 800b524:	d09d      	beq.n	800b462 <_strtod_l+0x72>
 800b526:	2301      	movs	r3, #1
 800b528:	9309      	str	r3, [sp, #36]	@ 0x24
 800b52a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b52c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b52e:	2300      	movs	r3, #0
 800b530:	9308      	str	r3, [sp, #32]
 800b532:	930a      	str	r3, [sp, #40]	@ 0x28
 800b534:	461f      	mov	r7, r3
 800b536:	220a      	movs	r2, #10
 800b538:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b53a:	7805      	ldrb	r5, [r0, #0]
 800b53c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b540:	b2d9      	uxtb	r1, r3
 800b542:	2909      	cmp	r1, #9
 800b544:	d928      	bls.n	800b598 <_strtod_l+0x1a8>
 800b546:	494e      	ldr	r1, [pc, #312]	@ (800b680 <_strtod_l+0x290>)
 800b548:	2201      	movs	r2, #1
 800b54a:	f001 fce0 	bl	800cf0e <strncmp>
 800b54e:	2800      	cmp	r0, #0
 800b550:	d032      	beq.n	800b5b8 <_strtod_l+0x1c8>
 800b552:	2000      	movs	r0, #0
 800b554:	462a      	mov	r2, r5
 800b556:	4681      	mov	r9, r0
 800b558:	463d      	mov	r5, r7
 800b55a:	4603      	mov	r3, r0
 800b55c:	2a65      	cmp	r2, #101	@ 0x65
 800b55e:	d001      	beq.n	800b564 <_strtod_l+0x174>
 800b560:	2a45      	cmp	r2, #69	@ 0x45
 800b562:	d114      	bne.n	800b58e <_strtod_l+0x19e>
 800b564:	b91d      	cbnz	r5, 800b56e <_strtod_l+0x17e>
 800b566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b568:	4302      	orrs	r2, r0
 800b56a:	d095      	beq.n	800b498 <_strtod_l+0xa8>
 800b56c:	2500      	movs	r5, #0
 800b56e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b570:	1c62      	adds	r2, r4, #1
 800b572:	9219      	str	r2, [sp, #100]	@ 0x64
 800b574:	7862      	ldrb	r2, [r4, #1]
 800b576:	2a2b      	cmp	r2, #43	@ 0x2b
 800b578:	d077      	beq.n	800b66a <_strtod_l+0x27a>
 800b57a:	2a2d      	cmp	r2, #45	@ 0x2d
 800b57c:	d07b      	beq.n	800b676 <_strtod_l+0x286>
 800b57e:	f04f 0c00 	mov.w	ip, #0
 800b582:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b586:	2909      	cmp	r1, #9
 800b588:	f240 8082 	bls.w	800b690 <_strtod_l+0x2a0>
 800b58c:	9419      	str	r4, [sp, #100]	@ 0x64
 800b58e:	f04f 0800 	mov.w	r8, #0
 800b592:	e0a2      	b.n	800b6da <_strtod_l+0x2ea>
 800b594:	2300      	movs	r3, #0
 800b596:	e7c7      	b.n	800b528 <_strtod_l+0x138>
 800b598:	2f08      	cmp	r7, #8
 800b59a:	bfd5      	itete	le
 800b59c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b59e:	9908      	ldrgt	r1, [sp, #32]
 800b5a0:	fb02 3301 	mlale	r3, r2, r1, r3
 800b5a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b5a8:	f100 0001 	add.w	r0, r0, #1
 800b5ac:	bfd4      	ite	le
 800b5ae:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b5b0:	9308      	strgt	r3, [sp, #32]
 800b5b2:	3701      	adds	r7, #1
 800b5b4:	9019      	str	r0, [sp, #100]	@ 0x64
 800b5b6:	e7bf      	b.n	800b538 <_strtod_l+0x148>
 800b5b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5ba:	1c5a      	adds	r2, r3, #1
 800b5bc:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5be:	785a      	ldrb	r2, [r3, #1]
 800b5c0:	b37f      	cbz	r7, 800b622 <_strtod_l+0x232>
 800b5c2:	4681      	mov	r9, r0
 800b5c4:	463d      	mov	r5, r7
 800b5c6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b5ca:	2b09      	cmp	r3, #9
 800b5cc:	d912      	bls.n	800b5f4 <_strtod_l+0x204>
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e7c4      	b.n	800b55c <_strtod_l+0x16c>
 800b5d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5d4:	1c5a      	adds	r2, r3, #1
 800b5d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800b5d8:	785a      	ldrb	r2, [r3, #1]
 800b5da:	3001      	adds	r0, #1
 800b5dc:	2a30      	cmp	r2, #48	@ 0x30
 800b5de:	d0f8      	beq.n	800b5d2 <_strtod_l+0x1e2>
 800b5e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b5e4:	2b08      	cmp	r3, #8
 800b5e6:	f200 84d3 	bhi.w	800bf90 <_strtod_l+0xba0>
 800b5ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b5ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800b5ee:	4681      	mov	r9, r0
 800b5f0:	2000      	movs	r0, #0
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	3a30      	subs	r2, #48	@ 0x30
 800b5f6:	f100 0301 	add.w	r3, r0, #1
 800b5fa:	d02a      	beq.n	800b652 <_strtod_l+0x262>
 800b5fc:	4499      	add	r9, r3
 800b5fe:	eb00 0c05 	add.w	ip, r0, r5
 800b602:	462b      	mov	r3, r5
 800b604:	210a      	movs	r1, #10
 800b606:	4563      	cmp	r3, ip
 800b608:	d10d      	bne.n	800b626 <_strtod_l+0x236>
 800b60a:	1c69      	adds	r1, r5, #1
 800b60c:	4401      	add	r1, r0
 800b60e:	4428      	add	r0, r5
 800b610:	2808      	cmp	r0, #8
 800b612:	dc16      	bgt.n	800b642 <_strtod_l+0x252>
 800b614:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b616:	230a      	movs	r3, #10
 800b618:	fb03 2300 	mla	r3, r3, r0, r2
 800b61c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b61e:	2300      	movs	r3, #0
 800b620:	e018      	b.n	800b654 <_strtod_l+0x264>
 800b622:	4638      	mov	r0, r7
 800b624:	e7da      	b.n	800b5dc <_strtod_l+0x1ec>
 800b626:	2b08      	cmp	r3, #8
 800b628:	f103 0301 	add.w	r3, r3, #1
 800b62c:	dc03      	bgt.n	800b636 <_strtod_l+0x246>
 800b62e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b630:	434e      	muls	r6, r1
 800b632:	960a      	str	r6, [sp, #40]	@ 0x28
 800b634:	e7e7      	b.n	800b606 <_strtod_l+0x216>
 800b636:	2b10      	cmp	r3, #16
 800b638:	bfde      	ittt	le
 800b63a:	9e08      	ldrle	r6, [sp, #32]
 800b63c:	434e      	mulle	r6, r1
 800b63e:	9608      	strle	r6, [sp, #32]
 800b640:	e7e1      	b.n	800b606 <_strtod_l+0x216>
 800b642:	280f      	cmp	r0, #15
 800b644:	dceb      	bgt.n	800b61e <_strtod_l+0x22e>
 800b646:	9808      	ldr	r0, [sp, #32]
 800b648:	230a      	movs	r3, #10
 800b64a:	fb03 2300 	mla	r3, r3, r0, r2
 800b64e:	9308      	str	r3, [sp, #32]
 800b650:	e7e5      	b.n	800b61e <_strtod_l+0x22e>
 800b652:	4629      	mov	r1, r5
 800b654:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b656:	1c50      	adds	r0, r2, #1
 800b658:	9019      	str	r0, [sp, #100]	@ 0x64
 800b65a:	7852      	ldrb	r2, [r2, #1]
 800b65c:	4618      	mov	r0, r3
 800b65e:	460d      	mov	r5, r1
 800b660:	e7b1      	b.n	800b5c6 <_strtod_l+0x1d6>
 800b662:	f04f 0900 	mov.w	r9, #0
 800b666:	2301      	movs	r3, #1
 800b668:	e77d      	b.n	800b566 <_strtod_l+0x176>
 800b66a:	f04f 0c00 	mov.w	ip, #0
 800b66e:	1ca2      	adds	r2, r4, #2
 800b670:	9219      	str	r2, [sp, #100]	@ 0x64
 800b672:	78a2      	ldrb	r2, [r4, #2]
 800b674:	e785      	b.n	800b582 <_strtod_l+0x192>
 800b676:	f04f 0c01 	mov.w	ip, #1
 800b67a:	e7f8      	b.n	800b66e <_strtod_l+0x27e>
 800b67c:	0800fb38 	.word	0x0800fb38
 800b680:	0800fb20 	.word	0x0800fb20
 800b684:	7ff00000 	.word	0x7ff00000
 800b688:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b68a:	1c51      	adds	r1, r2, #1
 800b68c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b68e:	7852      	ldrb	r2, [r2, #1]
 800b690:	2a30      	cmp	r2, #48	@ 0x30
 800b692:	d0f9      	beq.n	800b688 <_strtod_l+0x298>
 800b694:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b698:	2908      	cmp	r1, #8
 800b69a:	f63f af78 	bhi.w	800b58e <_strtod_l+0x19e>
 800b69e:	3a30      	subs	r2, #48	@ 0x30
 800b6a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b6a6:	f04f 080a 	mov.w	r8, #10
 800b6aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b6ac:	1c56      	adds	r6, r2, #1
 800b6ae:	9619      	str	r6, [sp, #100]	@ 0x64
 800b6b0:	7852      	ldrb	r2, [r2, #1]
 800b6b2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b6b6:	f1be 0f09 	cmp.w	lr, #9
 800b6ba:	d939      	bls.n	800b730 <_strtod_l+0x340>
 800b6bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b6be:	1a76      	subs	r6, r6, r1
 800b6c0:	2e08      	cmp	r6, #8
 800b6c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b6c6:	dc03      	bgt.n	800b6d0 <_strtod_l+0x2e0>
 800b6c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b6ca:	4588      	cmp	r8, r1
 800b6cc:	bfa8      	it	ge
 800b6ce:	4688      	movge	r8, r1
 800b6d0:	f1bc 0f00 	cmp.w	ip, #0
 800b6d4:	d001      	beq.n	800b6da <_strtod_l+0x2ea>
 800b6d6:	f1c8 0800 	rsb	r8, r8, #0
 800b6da:	2d00      	cmp	r5, #0
 800b6dc:	d14e      	bne.n	800b77c <_strtod_l+0x38c>
 800b6de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b6e0:	4308      	orrs	r0, r1
 800b6e2:	f47f aebe 	bne.w	800b462 <_strtod_l+0x72>
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f47f aed6 	bne.w	800b498 <_strtod_l+0xa8>
 800b6ec:	2a69      	cmp	r2, #105	@ 0x69
 800b6ee:	d028      	beq.n	800b742 <_strtod_l+0x352>
 800b6f0:	dc25      	bgt.n	800b73e <_strtod_l+0x34e>
 800b6f2:	2a49      	cmp	r2, #73	@ 0x49
 800b6f4:	d025      	beq.n	800b742 <_strtod_l+0x352>
 800b6f6:	2a4e      	cmp	r2, #78	@ 0x4e
 800b6f8:	f47f aece 	bne.w	800b498 <_strtod_l+0xa8>
 800b6fc:	499b      	ldr	r1, [pc, #620]	@ (800b96c <_strtod_l+0x57c>)
 800b6fe:	a819      	add	r0, sp, #100	@ 0x64
 800b700:	f002 fdce 	bl	800e2a0 <__match>
 800b704:	2800      	cmp	r0, #0
 800b706:	f43f aec7 	beq.w	800b498 <_strtod_l+0xa8>
 800b70a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	2b28      	cmp	r3, #40	@ 0x28
 800b710:	d12e      	bne.n	800b770 <_strtod_l+0x380>
 800b712:	4997      	ldr	r1, [pc, #604]	@ (800b970 <_strtod_l+0x580>)
 800b714:	aa1c      	add	r2, sp, #112	@ 0x70
 800b716:	a819      	add	r0, sp, #100	@ 0x64
 800b718:	f002 fdd6 	bl	800e2c8 <__hexnan>
 800b71c:	2805      	cmp	r0, #5
 800b71e:	d127      	bne.n	800b770 <_strtod_l+0x380>
 800b720:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b722:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b726:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b72a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b72e:	e698      	b.n	800b462 <_strtod_l+0x72>
 800b730:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b732:	fb08 2101 	mla	r1, r8, r1, r2
 800b736:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b73a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b73c:	e7b5      	b.n	800b6aa <_strtod_l+0x2ba>
 800b73e:	2a6e      	cmp	r2, #110	@ 0x6e
 800b740:	e7da      	b.n	800b6f8 <_strtod_l+0x308>
 800b742:	498c      	ldr	r1, [pc, #560]	@ (800b974 <_strtod_l+0x584>)
 800b744:	a819      	add	r0, sp, #100	@ 0x64
 800b746:	f002 fdab 	bl	800e2a0 <__match>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	f43f aea4 	beq.w	800b498 <_strtod_l+0xa8>
 800b750:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b752:	4989      	ldr	r1, [pc, #548]	@ (800b978 <_strtod_l+0x588>)
 800b754:	3b01      	subs	r3, #1
 800b756:	a819      	add	r0, sp, #100	@ 0x64
 800b758:	9319      	str	r3, [sp, #100]	@ 0x64
 800b75a:	f002 fda1 	bl	800e2a0 <__match>
 800b75e:	b910      	cbnz	r0, 800b766 <_strtod_l+0x376>
 800b760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b762:	3301      	adds	r3, #1
 800b764:	9319      	str	r3, [sp, #100]	@ 0x64
 800b766:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b988 <_strtod_l+0x598>
 800b76a:	f04f 0a00 	mov.w	sl, #0
 800b76e:	e678      	b.n	800b462 <_strtod_l+0x72>
 800b770:	4882      	ldr	r0, [pc, #520]	@ (800b97c <_strtod_l+0x58c>)
 800b772:	f001 fc65 	bl	800d040 <nan>
 800b776:	ec5b ab10 	vmov	sl, fp, d0
 800b77a:	e672      	b.n	800b462 <_strtod_l+0x72>
 800b77c:	eba8 0309 	sub.w	r3, r8, r9
 800b780:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b782:	9309      	str	r3, [sp, #36]	@ 0x24
 800b784:	2f00      	cmp	r7, #0
 800b786:	bf08      	it	eq
 800b788:	462f      	moveq	r7, r5
 800b78a:	2d10      	cmp	r5, #16
 800b78c:	462c      	mov	r4, r5
 800b78e:	bfa8      	it	ge
 800b790:	2410      	movge	r4, #16
 800b792:	f7f4 febf 	bl	8000514 <__aeabi_ui2d>
 800b796:	2d09      	cmp	r5, #9
 800b798:	4682      	mov	sl, r0
 800b79a:	468b      	mov	fp, r1
 800b79c:	dc13      	bgt.n	800b7c6 <_strtod_l+0x3d6>
 800b79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f43f ae5e 	beq.w	800b462 <_strtod_l+0x72>
 800b7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7a8:	dd78      	ble.n	800b89c <_strtod_l+0x4ac>
 800b7aa:	2b16      	cmp	r3, #22
 800b7ac:	dc5f      	bgt.n	800b86e <_strtod_l+0x47e>
 800b7ae:	4974      	ldr	r1, [pc, #464]	@ (800b980 <_strtod_l+0x590>)
 800b7b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b7b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7b8:	4652      	mov	r2, sl
 800b7ba:	465b      	mov	r3, fp
 800b7bc:	f7f4 ff24 	bl	8000608 <__aeabi_dmul>
 800b7c0:	4682      	mov	sl, r0
 800b7c2:	468b      	mov	fp, r1
 800b7c4:	e64d      	b.n	800b462 <_strtod_l+0x72>
 800b7c6:	4b6e      	ldr	r3, [pc, #440]	@ (800b980 <_strtod_l+0x590>)
 800b7c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b7d0:	f7f4 ff1a 	bl	8000608 <__aeabi_dmul>
 800b7d4:	4682      	mov	sl, r0
 800b7d6:	9808      	ldr	r0, [sp, #32]
 800b7d8:	468b      	mov	fp, r1
 800b7da:	f7f4 fe9b 	bl	8000514 <__aeabi_ui2d>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4650      	mov	r0, sl
 800b7e4:	4659      	mov	r1, fp
 800b7e6:	f7f4 fd59 	bl	800029c <__adddf3>
 800b7ea:	2d0f      	cmp	r5, #15
 800b7ec:	4682      	mov	sl, r0
 800b7ee:	468b      	mov	fp, r1
 800b7f0:	ddd5      	ble.n	800b79e <_strtod_l+0x3ae>
 800b7f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7f4:	1b2c      	subs	r4, r5, r4
 800b7f6:	441c      	add	r4, r3
 800b7f8:	2c00      	cmp	r4, #0
 800b7fa:	f340 8096 	ble.w	800b92a <_strtod_l+0x53a>
 800b7fe:	f014 030f 	ands.w	r3, r4, #15
 800b802:	d00a      	beq.n	800b81a <_strtod_l+0x42a>
 800b804:	495e      	ldr	r1, [pc, #376]	@ (800b980 <_strtod_l+0x590>)
 800b806:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b80a:	4652      	mov	r2, sl
 800b80c:	465b      	mov	r3, fp
 800b80e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b812:	f7f4 fef9 	bl	8000608 <__aeabi_dmul>
 800b816:	4682      	mov	sl, r0
 800b818:	468b      	mov	fp, r1
 800b81a:	f034 040f 	bics.w	r4, r4, #15
 800b81e:	d073      	beq.n	800b908 <_strtod_l+0x518>
 800b820:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b824:	dd48      	ble.n	800b8b8 <_strtod_l+0x4c8>
 800b826:	2400      	movs	r4, #0
 800b828:	46a0      	mov	r8, r4
 800b82a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b82c:	46a1      	mov	r9, r4
 800b82e:	9a05      	ldr	r2, [sp, #20]
 800b830:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b988 <_strtod_l+0x598>
 800b834:	2322      	movs	r3, #34	@ 0x22
 800b836:	6013      	str	r3, [r2, #0]
 800b838:	f04f 0a00 	mov.w	sl, #0
 800b83c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b83e:	2b00      	cmp	r3, #0
 800b840:	f43f ae0f 	beq.w	800b462 <_strtod_l+0x72>
 800b844:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b846:	9805      	ldr	r0, [sp, #20]
 800b848:	f002 fee2 	bl	800e610 <_Bfree>
 800b84c:	9805      	ldr	r0, [sp, #20]
 800b84e:	4649      	mov	r1, r9
 800b850:	f002 fede 	bl	800e610 <_Bfree>
 800b854:	9805      	ldr	r0, [sp, #20]
 800b856:	4641      	mov	r1, r8
 800b858:	f002 feda 	bl	800e610 <_Bfree>
 800b85c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b85e:	9805      	ldr	r0, [sp, #20]
 800b860:	f002 fed6 	bl	800e610 <_Bfree>
 800b864:	9805      	ldr	r0, [sp, #20]
 800b866:	4621      	mov	r1, r4
 800b868:	f002 fed2 	bl	800e610 <_Bfree>
 800b86c:	e5f9      	b.n	800b462 <_strtod_l+0x72>
 800b86e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b870:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b874:	4293      	cmp	r3, r2
 800b876:	dbbc      	blt.n	800b7f2 <_strtod_l+0x402>
 800b878:	4c41      	ldr	r4, [pc, #260]	@ (800b980 <_strtod_l+0x590>)
 800b87a:	f1c5 050f 	rsb	r5, r5, #15
 800b87e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b882:	4652      	mov	r2, sl
 800b884:	465b      	mov	r3, fp
 800b886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b88a:	f7f4 febd 	bl	8000608 <__aeabi_dmul>
 800b88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b890:	1b5d      	subs	r5, r3, r5
 800b892:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b896:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b89a:	e78f      	b.n	800b7bc <_strtod_l+0x3cc>
 800b89c:	3316      	adds	r3, #22
 800b89e:	dba8      	blt.n	800b7f2 <_strtod_l+0x402>
 800b8a0:	4b37      	ldr	r3, [pc, #220]	@ (800b980 <_strtod_l+0x590>)
 800b8a2:	eba9 0808 	sub.w	r8, r9, r8
 800b8a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b8aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b8ae:	4650      	mov	r0, sl
 800b8b0:	4659      	mov	r1, fp
 800b8b2:	f7f4 ffd3 	bl	800085c <__aeabi_ddiv>
 800b8b6:	e783      	b.n	800b7c0 <_strtod_l+0x3d0>
 800b8b8:	4b32      	ldr	r3, [pc, #200]	@ (800b984 <_strtod_l+0x594>)
 800b8ba:	9308      	str	r3, [sp, #32]
 800b8bc:	2300      	movs	r3, #0
 800b8be:	1124      	asrs	r4, r4, #4
 800b8c0:	4650      	mov	r0, sl
 800b8c2:	4659      	mov	r1, fp
 800b8c4:	461e      	mov	r6, r3
 800b8c6:	2c01      	cmp	r4, #1
 800b8c8:	dc21      	bgt.n	800b90e <_strtod_l+0x51e>
 800b8ca:	b10b      	cbz	r3, 800b8d0 <_strtod_l+0x4e0>
 800b8cc:	4682      	mov	sl, r0
 800b8ce:	468b      	mov	fp, r1
 800b8d0:	492c      	ldr	r1, [pc, #176]	@ (800b984 <_strtod_l+0x594>)
 800b8d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b8d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b8da:	4652      	mov	r2, sl
 800b8dc:	465b      	mov	r3, fp
 800b8de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8e2:	f7f4 fe91 	bl	8000608 <__aeabi_dmul>
 800b8e6:	4b28      	ldr	r3, [pc, #160]	@ (800b988 <_strtod_l+0x598>)
 800b8e8:	460a      	mov	r2, r1
 800b8ea:	400b      	ands	r3, r1
 800b8ec:	4927      	ldr	r1, [pc, #156]	@ (800b98c <_strtod_l+0x59c>)
 800b8ee:	428b      	cmp	r3, r1
 800b8f0:	4682      	mov	sl, r0
 800b8f2:	d898      	bhi.n	800b826 <_strtod_l+0x436>
 800b8f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b8f8:	428b      	cmp	r3, r1
 800b8fa:	bf86      	itte	hi
 800b8fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b990 <_strtod_l+0x5a0>
 800b900:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800b904:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b908:	2300      	movs	r3, #0
 800b90a:	9308      	str	r3, [sp, #32]
 800b90c:	e07a      	b.n	800ba04 <_strtod_l+0x614>
 800b90e:	07e2      	lsls	r2, r4, #31
 800b910:	d505      	bpl.n	800b91e <_strtod_l+0x52e>
 800b912:	9b08      	ldr	r3, [sp, #32]
 800b914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b918:	f7f4 fe76 	bl	8000608 <__aeabi_dmul>
 800b91c:	2301      	movs	r3, #1
 800b91e:	9a08      	ldr	r2, [sp, #32]
 800b920:	3208      	adds	r2, #8
 800b922:	3601      	adds	r6, #1
 800b924:	1064      	asrs	r4, r4, #1
 800b926:	9208      	str	r2, [sp, #32]
 800b928:	e7cd      	b.n	800b8c6 <_strtod_l+0x4d6>
 800b92a:	d0ed      	beq.n	800b908 <_strtod_l+0x518>
 800b92c:	4264      	negs	r4, r4
 800b92e:	f014 020f 	ands.w	r2, r4, #15
 800b932:	d00a      	beq.n	800b94a <_strtod_l+0x55a>
 800b934:	4b12      	ldr	r3, [pc, #72]	@ (800b980 <_strtod_l+0x590>)
 800b936:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b93a:	4650      	mov	r0, sl
 800b93c:	4659      	mov	r1, fp
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	f7f4 ff8b 	bl	800085c <__aeabi_ddiv>
 800b946:	4682      	mov	sl, r0
 800b948:	468b      	mov	fp, r1
 800b94a:	1124      	asrs	r4, r4, #4
 800b94c:	d0dc      	beq.n	800b908 <_strtod_l+0x518>
 800b94e:	2c1f      	cmp	r4, #31
 800b950:	dd20      	ble.n	800b994 <_strtod_l+0x5a4>
 800b952:	2400      	movs	r4, #0
 800b954:	46a0      	mov	r8, r4
 800b956:	940a      	str	r4, [sp, #40]	@ 0x28
 800b958:	46a1      	mov	r9, r4
 800b95a:	9a05      	ldr	r2, [sp, #20]
 800b95c:	2322      	movs	r3, #34	@ 0x22
 800b95e:	f04f 0a00 	mov.w	sl, #0
 800b962:	f04f 0b00 	mov.w	fp, #0
 800b966:	6013      	str	r3, [r2, #0]
 800b968:	e768      	b.n	800b83c <_strtod_l+0x44c>
 800b96a:	bf00      	nop
 800b96c:	0800fb85 	.word	0x0800fb85
 800b970:	0800fb24 	.word	0x0800fb24
 800b974:	0800fb7d 	.word	0x0800fb7d
 800b978:	0800fbbc 	.word	0x0800fbbc
 800b97c:	0800ff4d 	.word	0x0800ff4d
 800b980:	0800fd38 	.word	0x0800fd38
 800b984:	0800fd10 	.word	0x0800fd10
 800b988:	7ff00000 	.word	0x7ff00000
 800b98c:	7ca00000 	.word	0x7ca00000
 800b990:	7fefffff 	.word	0x7fefffff
 800b994:	f014 0310 	ands.w	r3, r4, #16
 800b998:	bf18      	it	ne
 800b99a:	236a      	movne	r3, #106	@ 0x6a
 800b99c:	4ea9      	ldr	r6, [pc, #676]	@ (800bc44 <_strtod_l+0x854>)
 800b99e:	9308      	str	r3, [sp, #32]
 800b9a0:	4650      	mov	r0, sl
 800b9a2:	4659      	mov	r1, fp
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	07e2      	lsls	r2, r4, #31
 800b9a8:	d504      	bpl.n	800b9b4 <_strtod_l+0x5c4>
 800b9aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b9ae:	f7f4 fe2b 	bl	8000608 <__aeabi_dmul>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	1064      	asrs	r4, r4, #1
 800b9b6:	f106 0608 	add.w	r6, r6, #8
 800b9ba:	d1f4      	bne.n	800b9a6 <_strtod_l+0x5b6>
 800b9bc:	b10b      	cbz	r3, 800b9c2 <_strtod_l+0x5d2>
 800b9be:	4682      	mov	sl, r0
 800b9c0:	468b      	mov	fp, r1
 800b9c2:	9b08      	ldr	r3, [sp, #32]
 800b9c4:	b1b3      	cbz	r3, 800b9f4 <_strtod_l+0x604>
 800b9c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b9ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	4659      	mov	r1, fp
 800b9d2:	dd0f      	ble.n	800b9f4 <_strtod_l+0x604>
 800b9d4:	2b1f      	cmp	r3, #31
 800b9d6:	dd55      	ble.n	800ba84 <_strtod_l+0x694>
 800b9d8:	2b34      	cmp	r3, #52	@ 0x34
 800b9da:	bfde      	ittt	le
 800b9dc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800b9e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b9e4:	4093      	lslle	r3, r2
 800b9e6:	f04f 0a00 	mov.w	sl, #0
 800b9ea:	bfcc      	ite	gt
 800b9ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b9f0:	ea03 0b01 	andle.w	fp, r3, r1
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	4650      	mov	r0, sl
 800b9fa:	4659      	mov	r1, fp
 800b9fc:	f7f5 f86c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d1a6      	bne.n	800b952 <_strtod_l+0x562>
 800ba04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba0a:	9805      	ldr	r0, [sp, #20]
 800ba0c:	462b      	mov	r3, r5
 800ba0e:	463a      	mov	r2, r7
 800ba10:	f002 fe66 	bl	800e6e0 <__s2b>
 800ba14:	900a      	str	r0, [sp, #40]	@ 0x28
 800ba16:	2800      	cmp	r0, #0
 800ba18:	f43f af05 	beq.w	800b826 <_strtod_l+0x436>
 800ba1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba1e:	2a00      	cmp	r2, #0
 800ba20:	eba9 0308 	sub.w	r3, r9, r8
 800ba24:	bfa8      	it	ge
 800ba26:	2300      	movge	r3, #0
 800ba28:	9312      	str	r3, [sp, #72]	@ 0x48
 800ba2a:	2400      	movs	r4, #0
 800ba2c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ba30:	9316      	str	r3, [sp, #88]	@ 0x58
 800ba32:	46a0      	mov	r8, r4
 800ba34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba36:	9805      	ldr	r0, [sp, #20]
 800ba38:	6859      	ldr	r1, [r3, #4]
 800ba3a:	f002 fda9 	bl	800e590 <_Balloc>
 800ba3e:	4681      	mov	r9, r0
 800ba40:	2800      	cmp	r0, #0
 800ba42:	f43f aef4 	beq.w	800b82e <_strtod_l+0x43e>
 800ba46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba48:	691a      	ldr	r2, [r3, #16]
 800ba4a:	3202      	adds	r2, #2
 800ba4c:	f103 010c 	add.w	r1, r3, #12
 800ba50:	0092      	lsls	r2, r2, #2
 800ba52:	300c      	adds	r0, #12
 800ba54:	f001 fae5 	bl	800d022 <memcpy>
 800ba58:	ec4b ab10 	vmov	d0, sl, fp
 800ba5c:	9805      	ldr	r0, [sp, #20]
 800ba5e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ba60:	a91b      	add	r1, sp, #108	@ 0x6c
 800ba62:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ba66:	f003 f977 	bl	800ed58 <__d2b>
 800ba6a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	f43f aede 	beq.w	800b82e <_strtod_l+0x43e>
 800ba72:	9805      	ldr	r0, [sp, #20]
 800ba74:	2101      	movs	r1, #1
 800ba76:	f002 fec9 	bl	800e80c <__i2b>
 800ba7a:	4680      	mov	r8, r0
 800ba7c:	b948      	cbnz	r0, 800ba92 <_strtod_l+0x6a2>
 800ba7e:	f04f 0800 	mov.w	r8, #0
 800ba82:	e6d4      	b.n	800b82e <_strtod_l+0x43e>
 800ba84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba88:	fa02 f303 	lsl.w	r3, r2, r3
 800ba8c:	ea03 0a0a 	and.w	sl, r3, sl
 800ba90:	e7b0      	b.n	800b9f4 <_strtod_l+0x604>
 800ba92:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ba94:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ba96:	2d00      	cmp	r5, #0
 800ba98:	bfab      	itete	ge
 800ba9a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ba9c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ba9e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800baa0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800baa2:	bfac      	ite	ge
 800baa4:	18ef      	addge	r7, r5, r3
 800baa6:	1b5e      	sublt	r6, r3, r5
 800baa8:	9b08      	ldr	r3, [sp, #32]
 800baaa:	1aed      	subs	r5, r5, r3
 800baac:	4415      	add	r5, r2
 800baae:	4b66      	ldr	r3, [pc, #408]	@ (800bc48 <_strtod_l+0x858>)
 800bab0:	3d01      	subs	r5, #1
 800bab2:	429d      	cmp	r5, r3
 800bab4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bab8:	da50      	bge.n	800bb5c <_strtod_l+0x76c>
 800baba:	1b5b      	subs	r3, r3, r5
 800babc:	2b1f      	cmp	r3, #31
 800babe:	eba2 0203 	sub.w	r2, r2, r3
 800bac2:	f04f 0101 	mov.w	r1, #1
 800bac6:	dc3d      	bgt.n	800bb44 <_strtod_l+0x754>
 800bac8:	fa01 f303 	lsl.w	r3, r1, r3
 800bacc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bace:	2300      	movs	r3, #0
 800bad0:	9310      	str	r3, [sp, #64]	@ 0x40
 800bad2:	18bd      	adds	r5, r7, r2
 800bad4:	9b08      	ldr	r3, [sp, #32]
 800bad6:	42af      	cmp	r7, r5
 800bad8:	4416      	add	r6, r2
 800bada:	441e      	add	r6, r3
 800badc:	463b      	mov	r3, r7
 800bade:	bfa8      	it	ge
 800bae0:	462b      	movge	r3, r5
 800bae2:	42b3      	cmp	r3, r6
 800bae4:	bfa8      	it	ge
 800bae6:	4633      	movge	r3, r6
 800bae8:	2b00      	cmp	r3, #0
 800baea:	bfc2      	ittt	gt
 800baec:	1aed      	subgt	r5, r5, r3
 800baee:	1af6      	subgt	r6, r6, r3
 800baf0:	1aff      	subgt	r7, r7, r3
 800baf2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	dd16      	ble.n	800bb26 <_strtod_l+0x736>
 800baf8:	4641      	mov	r1, r8
 800bafa:	9805      	ldr	r0, [sp, #20]
 800bafc:	461a      	mov	r2, r3
 800bafe:	f002 ff45 	bl	800e98c <__pow5mult>
 800bb02:	4680      	mov	r8, r0
 800bb04:	2800      	cmp	r0, #0
 800bb06:	d0ba      	beq.n	800ba7e <_strtod_l+0x68e>
 800bb08:	4601      	mov	r1, r0
 800bb0a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bb0c:	9805      	ldr	r0, [sp, #20]
 800bb0e:	f002 fe93 	bl	800e838 <__multiply>
 800bb12:	900e      	str	r0, [sp, #56]	@ 0x38
 800bb14:	2800      	cmp	r0, #0
 800bb16:	f43f ae8a 	beq.w	800b82e <_strtod_l+0x43e>
 800bb1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb1c:	9805      	ldr	r0, [sp, #20]
 800bb1e:	f002 fd77 	bl	800e610 <_Bfree>
 800bb22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb24:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb26:	2d00      	cmp	r5, #0
 800bb28:	dc1d      	bgt.n	800bb66 <_strtod_l+0x776>
 800bb2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	dd23      	ble.n	800bb78 <_strtod_l+0x788>
 800bb30:	4649      	mov	r1, r9
 800bb32:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bb34:	9805      	ldr	r0, [sp, #20]
 800bb36:	f002 ff29 	bl	800e98c <__pow5mult>
 800bb3a:	4681      	mov	r9, r0
 800bb3c:	b9e0      	cbnz	r0, 800bb78 <_strtod_l+0x788>
 800bb3e:	f04f 0900 	mov.w	r9, #0
 800bb42:	e674      	b.n	800b82e <_strtod_l+0x43e>
 800bb44:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bb48:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bb4c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bb50:	35e2      	adds	r5, #226	@ 0xe2
 800bb52:	fa01 f305 	lsl.w	r3, r1, r5
 800bb56:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb58:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bb5a:	e7ba      	b.n	800bad2 <_strtod_l+0x6e2>
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bb60:	2301      	movs	r3, #1
 800bb62:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb64:	e7b5      	b.n	800bad2 <_strtod_l+0x6e2>
 800bb66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bb68:	9805      	ldr	r0, [sp, #20]
 800bb6a:	462a      	mov	r2, r5
 800bb6c:	f002 ff68 	bl	800ea40 <__lshift>
 800bb70:	901a      	str	r0, [sp, #104]	@ 0x68
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d1d9      	bne.n	800bb2a <_strtod_l+0x73a>
 800bb76:	e65a      	b.n	800b82e <_strtod_l+0x43e>
 800bb78:	2e00      	cmp	r6, #0
 800bb7a:	dd07      	ble.n	800bb8c <_strtod_l+0x79c>
 800bb7c:	4649      	mov	r1, r9
 800bb7e:	9805      	ldr	r0, [sp, #20]
 800bb80:	4632      	mov	r2, r6
 800bb82:	f002 ff5d 	bl	800ea40 <__lshift>
 800bb86:	4681      	mov	r9, r0
 800bb88:	2800      	cmp	r0, #0
 800bb8a:	d0d8      	beq.n	800bb3e <_strtod_l+0x74e>
 800bb8c:	2f00      	cmp	r7, #0
 800bb8e:	dd08      	ble.n	800bba2 <_strtod_l+0x7b2>
 800bb90:	4641      	mov	r1, r8
 800bb92:	9805      	ldr	r0, [sp, #20]
 800bb94:	463a      	mov	r2, r7
 800bb96:	f002 ff53 	bl	800ea40 <__lshift>
 800bb9a:	4680      	mov	r8, r0
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	f43f ae46 	beq.w	800b82e <_strtod_l+0x43e>
 800bba2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bba4:	9805      	ldr	r0, [sp, #20]
 800bba6:	464a      	mov	r2, r9
 800bba8:	f002 ffd2 	bl	800eb50 <__mdiff>
 800bbac:	4604      	mov	r4, r0
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	f43f ae3d 	beq.w	800b82e <_strtod_l+0x43e>
 800bbb4:	68c3      	ldr	r3, [r0, #12]
 800bbb6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bbb8:	2300      	movs	r3, #0
 800bbba:	60c3      	str	r3, [r0, #12]
 800bbbc:	4641      	mov	r1, r8
 800bbbe:	f002 ffab 	bl	800eb18 <__mcmp>
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	da46      	bge.n	800bc54 <_strtod_l+0x864>
 800bbc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbc8:	ea53 030a 	orrs.w	r3, r3, sl
 800bbcc:	d16c      	bne.n	800bca8 <_strtod_l+0x8b8>
 800bbce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d168      	bne.n	800bca8 <_strtod_l+0x8b8>
 800bbd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bbda:	0d1b      	lsrs	r3, r3, #20
 800bbdc:	051b      	lsls	r3, r3, #20
 800bbde:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bbe2:	d961      	bls.n	800bca8 <_strtod_l+0x8b8>
 800bbe4:	6963      	ldr	r3, [r4, #20]
 800bbe6:	b913      	cbnz	r3, 800bbee <_strtod_l+0x7fe>
 800bbe8:	6923      	ldr	r3, [r4, #16]
 800bbea:	2b01      	cmp	r3, #1
 800bbec:	dd5c      	ble.n	800bca8 <_strtod_l+0x8b8>
 800bbee:	4621      	mov	r1, r4
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	9805      	ldr	r0, [sp, #20]
 800bbf4:	f002 ff24 	bl	800ea40 <__lshift>
 800bbf8:	4641      	mov	r1, r8
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	f002 ff8c 	bl	800eb18 <__mcmp>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	dd51      	ble.n	800bca8 <_strtod_l+0x8b8>
 800bc04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bc08:	9a08      	ldr	r2, [sp, #32]
 800bc0a:	0d1b      	lsrs	r3, r3, #20
 800bc0c:	051b      	lsls	r3, r3, #20
 800bc0e:	2a00      	cmp	r2, #0
 800bc10:	d06b      	beq.n	800bcea <_strtod_l+0x8fa>
 800bc12:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bc16:	d868      	bhi.n	800bcea <_strtod_l+0x8fa>
 800bc18:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bc1c:	f67f ae9d 	bls.w	800b95a <_strtod_l+0x56a>
 800bc20:	4b0a      	ldr	r3, [pc, #40]	@ (800bc4c <_strtod_l+0x85c>)
 800bc22:	4650      	mov	r0, sl
 800bc24:	4659      	mov	r1, fp
 800bc26:	2200      	movs	r2, #0
 800bc28:	f7f4 fcee 	bl	8000608 <__aeabi_dmul>
 800bc2c:	4b08      	ldr	r3, [pc, #32]	@ (800bc50 <_strtod_l+0x860>)
 800bc2e:	400b      	ands	r3, r1
 800bc30:	4682      	mov	sl, r0
 800bc32:	468b      	mov	fp, r1
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	f47f ae05 	bne.w	800b844 <_strtod_l+0x454>
 800bc3a:	9a05      	ldr	r2, [sp, #20]
 800bc3c:	2322      	movs	r3, #34	@ 0x22
 800bc3e:	6013      	str	r3, [r2, #0]
 800bc40:	e600      	b.n	800b844 <_strtod_l+0x454>
 800bc42:	bf00      	nop
 800bc44:	0800fb50 	.word	0x0800fb50
 800bc48:	fffffc02 	.word	0xfffffc02
 800bc4c:	39500000 	.word	0x39500000
 800bc50:	7ff00000 	.word	0x7ff00000
 800bc54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800bc58:	d165      	bne.n	800bd26 <_strtod_l+0x936>
 800bc5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bc5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc60:	b35a      	cbz	r2, 800bcba <_strtod_l+0x8ca>
 800bc62:	4a9f      	ldr	r2, [pc, #636]	@ (800bee0 <_strtod_l+0xaf0>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d12b      	bne.n	800bcc0 <_strtod_l+0x8d0>
 800bc68:	9b08      	ldr	r3, [sp, #32]
 800bc6a:	4651      	mov	r1, sl
 800bc6c:	b303      	cbz	r3, 800bcb0 <_strtod_l+0x8c0>
 800bc6e:	4b9d      	ldr	r3, [pc, #628]	@ (800bee4 <_strtod_l+0xaf4>)
 800bc70:	465a      	mov	r2, fp
 800bc72:	4013      	ands	r3, r2
 800bc74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bc78:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc7c:	d81b      	bhi.n	800bcb6 <_strtod_l+0x8c6>
 800bc7e:	0d1b      	lsrs	r3, r3, #20
 800bc80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc84:	fa02 f303 	lsl.w	r3, r2, r3
 800bc88:	4299      	cmp	r1, r3
 800bc8a:	d119      	bne.n	800bcc0 <_strtod_l+0x8d0>
 800bc8c:	4b96      	ldr	r3, [pc, #600]	@ (800bee8 <_strtod_l+0xaf8>)
 800bc8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc90:	429a      	cmp	r2, r3
 800bc92:	d102      	bne.n	800bc9a <_strtod_l+0x8aa>
 800bc94:	3101      	adds	r1, #1
 800bc96:	f43f adca 	beq.w	800b82e <_strtod_l+0x43e>
 800bc9a:	4b92      	ldr	r3, [pc, #584]	@ (800bee4 <_strtod_l+0xaf4>)
 800bc9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc9e:	401a      	ands	r2, r3
 800bca0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bca4:	f04f 0a00 	mov.w	sl, #0
 800bca8:	9b08      	ldr	r3, [sp, #32]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d1b8      	bne.n	800bc20 <_strtod_l+0x830>
 800bcae:	e5c9      	b.n	800b844 <_strtod_l+0x454>
 800bcb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bcb4:	e7e8      	b.n	800bc88 <_strtod_l+0x898>
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	e7e6      	b.n	800bc88 <_strtod_l+0x898>
 800bcba:	ea53 030a 	orrs.w	r3, r3, sl
 800bcbe:	d0a1      	beq.n	800bc04 <_strtod_l+0x814>
 800bcc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bcc2:	b1db      	cbz	r3, 800bcfc <_strtod_l+0x90c>
 800bcc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcc6:	4213      	tst	r3, r2
 800bcc8:	d0ee      	beq.n	800bca8 <_strtod_l+0x8b8>
 800bcca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bccc:	9a08      	ldr	r2, [sp, #32]
 800bcce:	4650      	mov	r0, sl
 800bcd0:	4659      	mov	r1, fp
 800bcd2:	b1bb      	cbz	r3, 800bd04 <_strtod_l+0x914>
 800bcd4:	f7ff fb6c 	bl	800b3b0 <sulp>
 800bcd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bcdc:	ec53 2b10 	vmov	r2, r3, d0
 800bce0:	f7f4 fadc 	bl	800029c <__adddf3>
 800bce4:	4682      	mov	sl, r0
 800bce6:	468b      	mov	fp, r1
 800bce8:	e7de      	b.n	800bca8 <_strtod_l+0x8b8>
 800bcea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bcee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bcf2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bcf6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bcfa:	e7d5      	b.n	800bca8 <_strtod_l+0x8b8>
 800bcfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bcfe:	ea13 0f0a 	tst.w	r3, sl
 800bd02:	e7e1      	b.n	800bcc8 <_strtod_l+0x8d8>
 800bd04:	f7ff fb54 	bl	800b3b0 <sulp>
 800bd08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd0c:	ec53 2b10 	vmov	r2, r3, d0
 800bd10:	f7f4 fac2 	bl	8000298 <__aeabi_dsub>
 800bd14:	2200      	movs	r2, #0
 800bd16:	2300      	movs	r3, #0
 800bd18:	4682      	mov	sl, r0
 800bd1a:	468b      	mov	fp, r1
 800bd1c:	f7f4 fedc 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d0c1      	beq.n	800bca8 <_strtod_l+0x8b8>
 800bd24:	e619      	b.n	800b95a <_strtod_l+0x56a>
 800bd26:	4641      	mov	r1, r8
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f003 f86d 	bl	800ee08 <__ratio>
 800bd2e:	ec57 6b10 	vmov	r6, r7, d0
 800bd32:	2200      	movs	r2, #0
 800bd34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bd38:	4630      	mov	r0, r6
 800bd3a:	4639      	mov	r1, r7
 800bd3c:	f7f4 fee0 	bl	8000b00 <__aeabi_dcmple>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	d06f      	beq.n	800be24 <_strtod_l+0xa34>
 800bd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d17a      	bne.n	800be40 <_strtod_l+0xa50>
 800bd4a:	f1ba 0f00 	cmp.w	sl, #0
 800bd4e:	d158      	bne.n	800be02 <_strtod_l+0xa12>
 800bd50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d15a      	bne.n	800be10 <_strtod_l+0xa20>
 800bd5a:	4b64      	ldr	r3, [pc, #400]	@ (800beec <_strtod_l+0xafc>)
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	4630      	mov	r0, r6
 800bd60:	4639      	mov	r1, r7
 800bd62:	f7f4 fec3 	bl	8000aec <__aeabi_dcmplt>
 800bd66:	2800      	cmp	r0, #0
 800bd68:	d159      	bne.n	800be1e <_strtod_l+0xa2e>
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	4639      	mov	r1, r7
 800bd6e:	4b60      	ldr	r3, [pc, #384]	@ (800bef0 <_strtod_l+0xb00>)
 800bd70:	2200      	movs	r2, #0
 800bd72:	f7f4 fc49 	bl	8000608 <__aeabi_dmul>
 800bd76:	4606      	mov	r6, r0
 800bd78:	460f      	mov	r7, r1
 800bd7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800bd7e:	9606      	str	r6, [sp, #24]
 800bd80:	9307      	str	r3, [sp, #28]
 800bd82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd86:	4d57      	ldr	r5, [pc, #348]	@ (800bee4 <_strtod_l+0xaf4>)
 800bd88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bd8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd8e:	401d      	ands	r5, r3
 800bd90:	4b58      	ldr	r3, [pc, #352]	@ (800bef4 <_strtod_l+0xb04>)
 800bd92:	429d      	cmp	r5, r3
 800bd94:	f040 80b2 	bne.w	800befc <_strtod_l+0xb0c>
 800bd98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800bd9e:	ec4b ab10 	vmov	d0, sl, fp
 800bda2:	f002 ff69 	bl	800ec78 <__ulp>
 800bda6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bdaa:	ec51 0b10 	vmov	r0, r1, d0
 800bdae:	f7f4 fc2b 	bl	8000608 <__aeabi_dmul>
 800bdb2:	4652      	mov	r2, sl
 800bdb4:	465b      	mov	r3, fp
 800bdb6:	f7f4 fa71 	bl	800029c <__adddf3>
 800bdba:	460b      	mov	r3, r1
 800bdbc:	4949      	ldr	r1, [pc, #292]	@ (800bee4 <_strtod_l+0xaf4>)
 800bdbe:	4a4e      	ldr	r2, [pc, #312]	@ (800bef8 <_strtod_l+0xb08>)
 800bdc0:	4019      	ands	r1, r3
 800bdc2:	4291      	cmp	r1, r2
 800bdc4:	4682      	mov	sl, r0
 800bdc6:	d942      	bls.n	800be4e <_strtod_l+0xa5e>
 800bdc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800bdca:	4b47      	ldr	r3, [pc, #284]	@ (800bee8 <_strtod_l+0xaf8>)
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d103      	bne.n	800bdd8 <_strtod_l+0x9e8>
 800bdd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	f43f ad2b 	beq.w	800b82e <_strtod_l+0x43e>
 800bdd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bee8 <_strtod_l+0xaf8>
 800bddc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800bde0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bde2:	9805      	ldr	r0, [sp, #20]
 800bde4:	f002 fc14 	bl	800e610 <_Bfree>
 800bde8:	9805      	ldr	r0, [sp, #20]
 800bdea:	4649      	mov	r1, r9
 800bdec:	f002 fc10 	bl	800e610 <_Bfree>
 800bdf0:	9805      	ldr	r0, [sp, #20]
 800bdf2:	4641      	mov	r1, r8
 800bdf4:	f002 fc0c 	bl	800e610 <_Bfree>
 800bdf8:	9805      	ldr	r0, [sp, #20]
 800bdfa:	4621      	mov	r1, r4
 800bdfc:	f002 fc08 	bl	800e610 <_Bfree>
 800be00:	e618      	b.n	800ba34 <_strtod_l+0x644>
 800be02:	f1ba 0f01 	cmp.w	sl, #1
 800be06:	d103      	bne.n	800be10 <_strtod_l+0xa20>
 800be08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f43f ada5 	beq.w	800b95a <_strtod_l+0x56a>
 800be10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bec0 <_strtod_l+0xad0>
 800be14:	4f35      	ldr	r7, [pc, #212]	@ (800beec <_strtod_l+0xafc>)
 800be16:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be1a:	2600      	movs	r6, #0
 800be1c:	e7b1      	b.n	800bd82 <_strtod_l+0x992>
 800be1e:	4f34      	ldr	r7, [pc, #208]	@ (800bef0 <_strtod_l+0xb00>)
 800be20:	2600      	movs	r6, #0
 800be22:	e7aa      	b.n	800bd7a <_strtod_l+0x98a>
 800be24:	4b32      	ldr	r3, [pc, #200]	@ (800bef0 <_strtod_l+0xb00>)
 800be26:	4630      	mov	r0, r6
 800be28:	4639      	mov	r1, r7
 800be2a:	2200      	movs	r2, #0
 800be2c:	f7f4 fbec 	bl	8000608 <__aeabi_dmul>
 800be30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be32:	4606      	mov	r6, r0
 800be34:	460f      	mov	r7, r1
 800be36:	2b00      	cmp	r3, #0
 800be38:	d09f      	beq.n	800bd7a <_strtod_l+0x98a>
 800be3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800be3e:	e7a0      	b.n	800bd82 <_strtod_l+0x992>
 800be40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bec8 <_strtod_l+0xad8>
 800be44:	ed8d 7b06 	vstr	d7, [sp, #24]
 800be48:	ec57 6b17 	vmov	r6, r7, d7
 800be4c:	e799      	b.n	800bd82 <_strtod_l+0x992>
 800be4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800be52:	9b08      	ldr	r3, [sp, #32]
 800be54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d1c1      	bne.n	800bde0 <_strtod_l+0x9f0>
 800be5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800be60:	0d1b      	lsrs	r3, r3, #20
 800be62:	051b      	lsls	r3, r3, #20
 800be64:	429d      	cmp	r5, r3
 800be66:	d1bb      	bne.n	800bde0 <_strtod_l+0x9f0>
 800be68:	4630      	mov	r0, r6
 800be6a:	4639      	mov	r1, r7
 800be6c:	f7f4 ff2c 	bl	8000cc8 <__aeabi_d2lz>
 800be70:	f7f4 fb9c 	bl	80005ac <__aeabi_l2d>
 800be74:	4602      	mov	r2, r0
 800be76:	460b      	mov	r3, r1
 800be78:	4630      	mov	r0, r6
 800be7a:	4639      	mov	r1, r7
 800be7c:	f7f4 fa0c 	bl	8000298 <__aeabi_dsub>
 800be80:	460b      	mov	r3, r1
 800be82:	4602      	mov	r2, r0
 800be84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800be88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800be8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be8e:	ea46 060a 	orr.w	r6, r6, sl
 800be92:	431e      	orrs	r6, r3
 800be94:	d06f      	beq.n	800bf76 <_strtod_l+0xb86>
 800be96:	a30e      	add	r3, pc, #56	@ (adr r3, 800bed0 <_strtod_l+0xae0>)
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	f7f4 fe26 	bl	8000aec <__aeabi_dcmplt>
 800bea0:	2800      	cmp	r0, #0
 800bea2:	f47f accf 	bne.w	800b844 <_strtod_l+0x454>
 800bea6:	a30c      	add	r3, pc, #48	@ (adr r3, 800bed8 <_strtod_l+0xae8>)
 800bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800beb0:	f7f4 fe3a 	bl	8000b28 <__aeabi_dcmpgt>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d093      	beq.n	800bde0 <_strtod_l+0x9f0>
 800beb8:	e4c4      	b.n	800b844 <_strtod_l+0x454>
 800beba:	bf00      	nop
 800bebc:	f3af 8000 	nop.w
 800bec0:	00000000 	.word	0x00000000
 800bec4:	bff00000 	.word	0xbff00000
 800bec8:	00000000 	.word	0x00000000
 800becc:	3ff00000 	.word	0x3ff00000
 800bed0:	94a03595 	.word	0x94a03595
 800bed4:	3fdfffff 	.word	0x3fdfffff
 800bed8:	35afe535 	.word	0x35afe535
 800bedc:	3fe00000 	.word	0x3fe00000
 800bee0:	000fffff 	.word	0x000fffff
 800bee4:	7ff00000 	.word	0x7ff00000
 800bee8:	7fefffff 	.word	0x7fefffff
 800beec:	3ff00000 	.word	0x3ff00000
 800bef0:	3fe00000 	.word	0x3fe00000
 800bef4:	7fe00000 	.word	0x7fe00000
 800bef8:	7c9fffff 	.word	0x7c9fffff
 800befc:	9b08      	ldr	r3, [sp, #32]
 800befe:	b323      	cbz	r3, 800bf4a <_strtod_l+0xb5a>
 800bf00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bf04:	d821      	bhi.n	800bf4a <_strtod_l+0xb5a>
 800bf06:	a328      	add	r3, pc, #160	@ (adr r3, 800bfa8 <_strtod_l+0xbb8>)
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	4630      	mov	r0, r6
 800bf0e:	4639      	mov	r1, r7
 800bf10:	f7f4 fdf6 	bl	8000b00 <__aeabi_dcmple>
 800bf14:	b1a0      	cbz	r0, 800bf40 <_strtod_l+0xb50>
 800bf16:	4639      	mov	r1, r7
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f7f4 fe4d 	bl	8000bb8 <__aeabi_d2uiz>
 800bf1e:	2801      	cmp	r0, #1
 800bf20:	bf38      	it	cc
 800bf22:	2001      	movcc	r0, #1
 800bf24:	f7f4 faf6 	bl	8000514 <__aeabi_ui2d>
 800bf28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf2a:	4606      	mov	r6, r0
 800bf2c:	460f      	mov	r7, r1
 800bf2e:	b9fb      	cbnz	r3, 800bf70 <_strtod_l+0xb80>
 800bf30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf34:	9014      	str	r0, [sp, #80]	@ 0x50
 800bf36:	9315      	str	r3, [sp, #84]	@ 0x54
 800bf38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800bf3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800bf40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800bf46:	1b5b      	subs	r3, r3, r5
 800bf48:	9311      	str	r3, [sp, #68]	@ 0x44
 800bf4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bf4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800bf52:	f002 fe91 	bl	800ec78 <__ulp>
 800bf56:	4650      	mov	r0, sl
 800bf58:	ec53 2b10 	vmov	r2, r3, d0
 800bf5c:	4659      	mov	r1, fp
 800bf5e:	f7f4 fb53 	bl	8000608 <__aeabi_dmul>
 800bf62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bf66:	f7f4 f999 	bl	800029c <__adddf3>
 800bf6a:	4682      	mov	sl, r0
 800bf6c:	468b      	mov	fp, r1
 800bf6e:	e770      	b.n	800be52 <_strtod_l+0xa62>
 800bf70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800bf74:	e7e0      	b.n	800bf38 <_strtod_l+0xb48>
 800bf76:	a30e      	add	r3, pc, #56	@ (adr r3, 800bfb0 <_strtod_l+0xbc0>)
 800bf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7c:	f7f4 fdb6 	bl	8000aec <__aeabi_dcmplt>
 800bf80:	e798      	b.n	800beb4 <_strtod_l+0xac4>
 800bf82:	2300      	movs	r3, #0
 800bf84:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800bf88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800bf8a:	6013      	str	r3, [r2, #0]
 800bf8c:	f7ff ba6d 	b.w	800b46a <_strtod_l+0x7a>
 800bf90:	2a65      	cmp	r2, #101	@ 0x65
 800bf92:	f43f ab66 	beq.w	800b662 <_strtod_l+0x272>
 800bf96:	2a45      	cmp	r2, #69	@ 0x45
 800bf98:	f43f ab63 	beq.w	800b662 <_strtod_l+0x272>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	f7ff bb9e 	b.w	800b6de <_strtod_l+0x2ee>
 800bfa2:	bf00      	nop
 800bfa4:	f3af 8000 	nop.w
 800bfa8:	ffc00000 	.word	0xffc00000
 800bfac:	41dfffff 	.word	0x41dfffff
 800bfb0:	94a03595 	.word	0x94a03595
 800bfb4:	3fcfffff 	.word	0x3fcfffff

0800bfb8 <_strtod_r>:
 800bfb8:	4b01      	ldr	r3, [pc, #4]	@ (800bfc0 <_strtod_r+0x8>)
 800bfba:	f7ff ba19 	b.w	800b3f0 <_strtod_l>
 800bfbe:	bf00      	nop
 800bfc0:	20000110 	.word	0x20000110

0800bfc4 <strtod>:
 800bfc4:	460a      	mov	r2, r1
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	4802      	ldr	r0, [pc, #8]	@ (800bfd4 <strtod+0x10>)
 800bfca:	4b03      	ldr	r3, [pc, #12]	@ (800bfd8 <strtod+0x14>)
 800bfcc:	6800      	ldr	r0, [r0, #0]
 800bfce:	f7ff ba0f 	b.w	800b3f0 <_strtod_l>
 800bfd2:	bf00      	nop
 800bfd4:	2000027c 	.word	0x2000027c
 800bfd8:	20000110 	.word	0x20000110

0800bfdc <__cvt>:
 800bfdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bfe0:	ec57 6b10 	vmov	r6, r7, d0
 800bfe4:	2f00      	cmp	r7, #0
 800bfe6:	460c      	mov	r4, r1
 800bfe8:	4619      	mov	r1, r3
 800bfea:	463b      	mov	r3, r7
 800bfec:	bfbb      	ittet	lt
 800bfee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bff2:	461f      	movlt	r7, r3
 800bff4:	2300      	movge	r3, #0
 800bff6:	232d      	movlt	r3, #45	@ 0x2d
 800bff8:	700b      	strb	r3, [r1, #0]
 800bffa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bffc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c000:	4691      	mov	r9, r2
 800c002:	f023 0820 	bic.w	r8, r3, #32
 800c006:	bfbc      	itt	lt
 800c008:	4632      	movlt	r2, r6
 800c00a:	4616      	movlt	r6, r2
 800c00c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c010:	d005      	beq.n	800c01e <__cvt+0x42>
 800c012:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c016:	d100      	bne.n	800c01a <__cvt+0x3e>
 800c018:	3401      	adds	r4, #1
 800c01a:	2102      	movs	r1, #2
 800c01c:	e000      	b.n	800c020 <__cvt+0x44>
 800c01e:	2103      	movs	r1, #3
 800c020:	ab03      	add	r3, sp, #12
 800c022:	9301      	str	r3, [sp, #4]
 800c024:	ab02      	add	r3, sp, #8
 800c026:	9300      	str	r3, [sp, #0]
 800c028:	ec47 6b10 	vmov	d0, r6, r7
 800c02c:	4653      	mov	r3, sl
 800c02e:	4622      	mov	r2, r4
 800c030:	f001 f89e 	bl	800d170 <_dtoa_r>
 800c034:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c038:	4605      	mov	r5, r0
 800c03a:	d119      	bne.n	800c070 <__cvt+0x94>
 800c03c:	f019 0f01 	tst.w	r9, #1
 800c040:	d00e      	beq.n	800c060 <__cvt+0x84>
 800c042:	eb00 0904 	add.w	r9, r0, r4
 800c046:	2200      	movs	r2, #0
 800c048:	2300      	movs	r3, #0
 800c04a:	4630      	mov	r0, r6
 800c04c:	4639      	mov	r1, r7
 800c04e:	f7f4 fd43 	bl	8000ad8 <__aeabi_dcmpeq>
 800c052:	b108      	cbz	r0, 800c058 <__cvt+0x7c>
 800c054:	f8cd 900c 	str.w	r9, [sp, #12]
 800c058:	2230      	movs	r2, #48	@ 0x30
 800c05a:	9b03      	ldr	r3, [sp, #12]
 800c05c:	454b      	cmp	r3, r9
 800c05e:	d31e      	bcc.n	800c09e <__cvt+0xc2>
 800c060:	9b03      	ldr	r3, [sp, #12]
 800c062:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c064:	1b5b      	subs	r3, r3, r5
 800c066:	4628      	mov	r0, r5
 800c068:	6013      	str	r3, [r2, #0]
 800c06a:	b004      	add	sp, #16
 800c06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c070:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c074:	eb00 0904 	add.w	r9, r0, r4
 800c078:	d1e5      	bne.n	800c046 <__cvt+0x6a>
 800c07a:	7803      	ldrb	r3, [r0, #0]
 800c07c:	2b30      	cmp	r3, #48	@ 0x30
 800c07e:	d10a      	bne.n	800c096 <__cvt+0xba>
 800c080:	2200      	movs	r2, #0
 800c082:	2300      	movs	r3, #0
 800c084:	4630      	mov	r0, r6
 800c086:	4639      	mov	r1, r7
 800c088:	f7f4 fd26 	bl	8000ad8 <__aeabi_dcmpeq>
 800c08c:	b918      	cbnz	r0, 800c096 <__cvt+0xba>
 800c08e:	f1c4 0401 	rsb	r4, r4, #1
 800c092:	f8ca 4000 	str.w	r4, [sl]
 800c096:	f8da 3000 	ldr.w	r3, [sl]
 800c09a:	4499      	add	r9, r3
 800c09c:	e7d3      	b.n	800c046 <__cvt+0x6a>
 800c09e:	1c59      	adds	r1, r3, #1
 800c0a0:	9103      	str	r1, [sp, #12]
 800c0a2:	701a      	strb	r2, [r3, #0]
 800c0a4:	e7d9      	b.n	800c05a <__cvt+0x7e>

0800c0a6 <__exponent>:
 800c0a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0a8:	2900      	cmp	r1, #0
 800c0aa:	bfba      	itte	lt
 800c0ac:	4249      	neglt	r1, r1
 800c0ae:	232d      	movlt	r3, #45	@ 0x2d
 800c0b0:	232b      	movge	r3, #43	@ 0x2b
 800c0b2:	2909      	cmp	r1, #9
 800c0b4:	7002      	strb	r2, [r0, #0]
 800c0b6:	7043      	strb	r3, [r0, #1]
 800c0b8:	dd29      	ble.n	800c10e <__exponent+0x68>
 800c0ba:	f10d 0307 	add.w	r3, sp, #7
 800c0be:	461d      	mov	r5, r3
 800c0c0:	270a      	movs	r7, #10
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	fbb1 f6f7 	udiv	r6, r1, r7
 800c0c8:	fb07 1416 	mls	r4, r7, r6, r1
 800c0cc:	3430      	adds	r4, #48	@ 0x30
 800c0ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	2c63      	cmp	r4, #99	@ 0x63
 800c0d6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c0da:	4631      	mov	r1, r6
 800c0dc:	dcf1      	bgt.n	800c0c2 <__exponent+0x1c>
 800c0de:	3130      	adds	r1, #48	@ 0x30
 800c0e0:	1e94      	subs	r4, r2, #2
 800c0e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c0e6:	1c41      	adds	r1, r0, #1
 800c0e8:	4623      	mov	r3, r4
 800c0ea:	42ab      	cmp	r3, r5
 800c0ec:	d30a      	bcc.n	800c104 <__exponent+0x5e>
 800c0ee:	f10d 0309 	add.w	r3, sp, #9
 800c0f2:	1a9b      	subs	r3, r3, r2
 800c0f4:	42ac      	cmp	r4, r5
 800c0f6:	bf88      	it	hi
 800c0f8:	2300      	movhi	r3, #0
 800c0fa:	3302      	adds	r3, #2
 800c0fc:	4403      	add	r3, r0
 800c0fe:	1a18      	subs	r0, r3, r0
 800c100:	b003      	add	sp, #12
 800c102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c104:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c108:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c10c:	e7ed      	b.n	800c0ea <__exponent+0x44>
 800c10e:	2330      	movs	r3, #48	@ 0x30
 800c110:	3130      	adds	r1, #48	@ 0x30
 800c112:	7083      	strb	r3, [r0, #2]
 800c114:	70c1      	strb	r1, [r0, #3]
 800c116:	1d03      	adds	r3, r0, #4
 800c118:	e7f1      	b.n	800c0fe <__exponent+0x58>
	...

0800c11c <_printf_float>:
 800c11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c120:	b08d      	sub	sp, #52	@ 0x34
 800c122:	460c      	mov	r4, r1
 800c124:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c128:	4616      	mov	r6, r2
 800c12a:	461f      	mov	r7, r3
 800c12c:	4605      	mov	r5, r0
 800c12e:	f000 ff01 	bl	800cf34 <_localeconv_r>
 800c132:	6803      	ldr	r3, [r0, #0]
 800c134:	9304      	str	r3, [sp, #16]
 800c136:	4618      	mov	r0, r3
 800c138:	f7f4 f8a2 	bl	8000280 <strlen>
 800c13c:	2300      	movs	r3, #0
 800c13e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c140:	f8d8 3000 	ldr.w	r3, [r8]
 800c144:	9005      	str	r0, [sp, #20]
 800c146:	3307      	adds	r3, #7
 800c148:	f023 0307 	bic.w	r3, r3, #7
 800c14c:	f103 0208 	add.w	r2, r3, #8
 800c150:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c154:	f8d4 b000 	ldr.w	fp, [r4]
 800c158:	f8c8 2000 	str.w	r2, [r8]
 800c15c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c160:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c164:	9307      	str	r3, [sp, #28]
 800c166:	f8cd 8018 	str.w	r8, [sp, #24]
 800c16a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c16e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c172:	4b9c      	ldr	r3, [pc, #624]	@ (800c3e4 <_printf_float+0x2c8>)
 800c174:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c178:	f7f4 fce0 	bl	8000b3c <__aeabi_dcmpun>
 800c17c:	bb70      	cbnz	r0, 800c1dc <_printf_float+0xc0>
 800c17e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c182:	4b98      	ldr	r3, [pc, #608]	@ (800c3e4 <_printf_float+0x2c8>)
 800c184:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c188:	f7f4 fcba 	bl	8000b00 <__aeabi_dcmple>
 800c18c:	bb30      	cbnz	r0, 800c1dc <_printf_float+0xc0>
 800c18e:	2200      	movs	r2, #0
 800c190:	2300      	movs	r3, #0
 800c192:	4640      	mov	r0, r8
 800c194:	4649      	mov	r1, r9
 800c196:	f7f4 fca9 	bl	8000aec <__aeabi_dcmplt>
 800c19a:	b110      	cbz	r0, 800c1a2 <_printf_float+0x86>
 800c19c:	232d      	movs	r3, #45	@ 0x2d
 800c19e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1a2:	4a91      	ldr	r2, [pc, #580]	@ (800c3e8 <_printf_float+0x2cc>)
 800c1a4:	4b91      	ldr	r3, [pc, #580]	@ (800c3ec <_printf_float+0x2d0>)
 800c1a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c1aa:	bf94      	ite	ls
 800c1ac:	4690      	movls	r8, r2
 800c1ae:	4698      	movhi	r8, r3
 800c1b0:	2303      	movs	r3, #3
 800c1b2:	6123      	str	r3, [r4, #16]
 800c1b4:	f02b 0304 	bic.w	r3, fp, #4
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	f04f 0900 	mov.w	r9, #0
 800c1be:	9700      	str	r7, [sp, #0]
 800c1c0:	4633      	mov	r3, r6
 800c1c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c1c4:	4621      	mov	r1, r4
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	f000 f9d2 	bl	800c570 <_printf_common>
 800c1cc:	3001      	adds	r0, #1
 800c1ce:	f040 808d 	bne.w	800c2ec <_printf_float+0x1d0>
 800c1d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1d6:	b00d      	add	sp, #52	@ 0x34
 800c1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1dc:	4642      	mov	r2, r8
 800c1de:	464b      	mov	r3, r9
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	4649      	mov	r1, r9
 800c1e4:	f7f4 fcaa 	bl	8000b3c <__aeabi_dcmpun>
 800c1e8:	b140      	cbz	r0, 800c1fc <_printf_float+0xe0>
 800c1ea:	464b      	mov	r3, r9
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	bfbc      	itt	lt
 800c1f0:	232d      	movlt	r3, #45	@ 0x2d
 800c1f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c1f6:	4a7e      	ldr	r2, [pc, #504]	@ (800c3f0 <_printf_float+0x2d4>)
 800c1f8:	4b7e      	ldr	r3, [pc, #504]	@ (800c3f4 <_printf_float+0x2d8>)
 800c1fa:	e7d4      	b.n	800c1a6 <_printf_float+0x8a>
 800c1fc:	6863      	ldr	r3, [r4, #4]
 800c1fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c202:	9206      	str	r2, [sp, #24]
 800c204:	1c5a      	adds	r2, r3, #1
 800c206:	d13b      	bne.n	800c280 <_printf_float+0x164>
 800c208:	2306      	movs	r3, #6
 800c20a:	6063      	str	r3, [r4, #4]
 800c20c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c210:	2300      	movs	r3, #0
 800c212:	6022      	str	r2, [r4, #0]
 800c214:	9303      	str	r3, [sp, #12]
 800c216:	ab0a      	add	r3, sp, #40	@ 0x28
 800c218:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c21c:	ab09      	add	r3, sp, #36	@ 0x24
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	6861      	ldr	r1, [r4, #4]
 800c222:	ec49 8b10 	vmov	d0, r8, r9
 800c226:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c22a:	4628      	mov	r0, r5
 800c22c:	f7ff fed6 	bl	800bfdc <__cvt>
 800c230:	9b06      	ldr	r3, [sp, #24]
 800c232:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c234:	2b47      	cmp	r3, #71	@ 0x47
 800c236:	4680      	mov	r8, r0
 800c238:	d129      	bne.n	800c28e <_printf_float+0x172>
 800c23a:	1cc8      	adds	r0, r1, #3
 800c23c:	db02      	blt.n	800c244 <_printf_float+0x128>
 800c23e:	6863      	ldr	r3, [r4, #4]
 800c240:	4299      	cmp	r1, r3
 800c242:	dd41      	ble.n	800c2c8 <_printf_float+0x1ac>
 800c244:	f1aa 0a02 	sub.w	sl, sl, #2
 800c248:	fa5f fa8a 	uxtb.w	sl, sl
 800c24c:	3901      	subs	r1, #1
 800c24e:	4652      	mov	r2, sl
 800c250:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c254:	9109      	str	r1, [sp, #36]	@ 0x24
 800c256:	f7ff ff26 	bl	800c0a6 <__exponent>
 800c25a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c25c:	1813      	adds	r3, r2, r0
 800c25e:	2a01      	cmp	r2, #1
 800c260:	4681      	mov	r9, r0
 800c262:	6123      	str	r3, [r4, #16]
 800c264:	dc02      	bgt.n	800c26c <_printf_float+0x150>
 800c266:	6822      	ldr	r2, [r4, #0]
 800c268:	07d2      	lsls	r2, r2, #31
 800c26a:	d501      	bpl.n	800c270 <_printf_float+0x154>
 800c26c:	3301      	adds	r3, #1
 800c26e:	6123      	str	r3, [r4, #16]
 800c270:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c274:	2b00      	cmp	r3, #0
 800c276:	d0a2      	beq.n	800c1be <_printf_float+0xa2>
 800c278:	232d      	movs	r3, #45	@ 0x2d
 800c27a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c27e:	e79e      	b.n	800c1be <_printf_float+0xa2>
 800c280:	9a06      	ldr	r2, [sp, #24]
 800c282:	2a47      	cmp	r2, #71	@ 0x47
 800c284:	d1c2      	bne.n	800c20c <_printf_float+0xf0>
 800c286:	2b00      	cmp	r3, #0
 800c288:	d1c0      	bne.n	800c20c <_printf_float+0xf0>
 800c28a:	2301      	movs	r3, #1
 800c28c:	e7bd      	b.n	800c20a <_printf_float+0xee>
 800c28e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c292:	d9db      	bls.n	800c24c <_printf_float+0x130>
 800c294:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c298:	d118      	bne.n	800c2cc <_printf_float+0x1b0>
 800c29a:	2900      	cmp	r1, #0
 800c29c:	6863      	ldr	r3, [r4, #4]
 800c29e:	dd0b      	ble.n	800c2b8 <_printf_float+0x19c>
 800c2a0:	6121      	str	r1, [r4, #16]
 800c2a2:	b913      	cbnz	r3, 800c2aa <_printf_float+0x18e>
 800c2a4:	6822      	ldr	r2, [r4, #0]
 800c2a6:	07d0      	lsls	r0, r2, #31
 800c2a8:	d502      	bpl.n	800c2b0 <_printf_float+0x194>
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	440b      	add	r3, r1
 800c2ae:	6123      	str	r3, [r4, #16]
 800c2b0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c2b2:	f04f 0900 	mov.w	r9, #0
 800c2b6:	e7db      	b.n	800c270 <_printf_float+0x154>
 800c2b8:	b913      	cbnz	r3, 800c2c0 <_printf_float+0x1a4>
 800c2ba:	6822      	ldr	r2, [r4, #0]
 800c2bc:	07d2      	lsls	r2, r2, #31
 800c2be:	d501      	bpl.n	800c2c4 <_printf_float+0x1a8>
 800c2c0:	3302      	adds	r3, #2
 800c2c2:	e7f4      	b.n	800c2ae <_printf_float+0x192>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e7f2      	b.n	800c2ae <_printf_float+0x192>
 800c2c8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c2cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c2ce:	4299      	cmp	r1, r3
 800c2d0:	db05      	blt.n	800c2de <_printf_float+0x1c2>
 800c2d2:	6823      	ldr	r3, [r4, #0]
 800c2d4:	6121      	str	r1, [r4, #16]
 800c2d6:	07d8      	lsls	r0, r3, #31
 800c2d8:	d5ea      	bpl.n	800c2b0 <_printf_float+0x194>
 800c2da:	1c4b      	adds	r3, r1, #1
 800c2dc:	e7e7      	b.n	800c2ae <_printf_float+0x192>
 800c2de:	2900      	cmp	r1, #0
 800c2e0:	bfd4      	ite	le
 800c2e2:	f1c1 0202 	rsble	r2, r1, #2
 800c2e6:	2201      	movgt	r2, #1
 800c2e8:	4413      	add	r3, r2
 800c2ea:	e7e0      	b.n	800c2ae <_printf_float+0x192>
 800c2ec:	6823      	ldr	r3, [r4, #0]
 800c2ee:	055a      	lsls	r2, r3, #21
 800c2f0:	d407      	bmi.n	800c302 <_printf_float+0x1e6>
 800c2f2:	6923      	ldr	r3, [r4, #16]
 800c2f4:	4642      	mov	r2, r8
 800c2f6:	4631      	mov	r1, r6
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	47b8      	blx	r7
 800c2fc:	3001      	adds	r0, #1
 800c2fe:	d12b      	bne.n	800c358 <_printf_float+0x23c>
 800c300:	e767      	b.n	800c1d2 <_printf_float+0xb6>
 800c302:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c306:	f240 80dd 	bls.w	800c4c4 <_printf_float+0x3a8>
 800c30a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c30e:	2200      	movs	r2, #0
 800c310:	2300      	movs	r3, #0
 800c312:	f7f4 fbe1 	bl	8000ad8 <__aeabi_dcmpeq>
 800c316:	2800      	cmp	r0, #0
 800c318:	d033      	beq.n	800c382 <_printf_float+0x266>
 800c31a:	4a37      	ldr	r2, [pc, #220]	@ (800c3f8 <_printf_float+0x2dc>)
 800c31c:	2301      	movs	r3, #1
 800c31e:	4631      	mov	r1, r6
 800c320:	4628      	mov	r0, r5
 800c322:	47b8      	blx	r7
 800c324:	3001      	adds	r0, #1
 800c326:	f43f af54 	beq.w	800c1d2 <_printf_float+0xb6>
 800c32a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c32e:	4543      	cmp	r3, r8
 800c330:	db02      	blt.n	800c338 <_printf_float+0x21c>
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	07d8      	lsls	r0, r3, #31
 800c336:	d50f      	bpl.n	800c358 <_printf_float+0x23c>
 800c338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c33c:	4631      	mov	r1, r6
 800c33e:	4628      	mov	r0, r5
 800c340:	47b8      	blx	r7
 800c342:	3001      	adds	r0, #1
 800c344:	f43f af45 	beq.w	800c1d2 <_printf_float+0xb6>
 800c348:	f04f 0900 	mov.w	r9, #0
 800c34c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c350:	f104 0a1a 	add.w	sl, r4, #26
 800c354:	45c8      	cmp	r8, r9
 800c356:	dc09      	bgt.n	800c36c <_printf_float+0x250>
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	079b      	lsls	r3, r3, #30
 800c35c:	f100 8103 	bmi.w	800c566 <_printf_float+0x44a>
 800c360:	68e0      	ldr	r0, [r4, #12]
 800c362:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c364:	4298      	cmp	r0, r3
 800c366:	bfb8      	it	lt
 800c368:	4618      	movlt	r0, r3
 800c36a:	e734      	b.n	800c1d6 <_printf_float+0xba>
 800c36c:	2301      	movs	r3, #1
 800c36e:	4652      	mov	r2, sl
 800c370:	4631      	mov	r1, r6
 800c372:	4628      	mov	r0, r5
 800c374:	47b8      	blx	r7
 800c376:	3001      	adds	r0, #1
 800c378:	f43f af2b 	beq.w	800c1d2 <_printf_float+0xb6>
 800c37c:	f109 0901 	add.w	r9, r9, #1
 800c380:	e7e8      	b.n	800c354 <_printf_float+0x238>
 800c382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c384:	2b00      	cmp	r3, #0
 800c386:	dc39      	bgt.n	800c3fc <_printf_float+0x2e0>
 800c388:	4a1b      	ldr	r2, [pc, #108]	@ (800c3f8 <_printf_float+0x2dc>)
 800c38a:	2301      	movs	r3, #1
 800c38c:	4631      	mov	r1, r6
 800c38e:	4628      	mov	r0, r5
 800c390:	47b8      	blx	r7
 800c392:	3001      	adds	r0, #1
 800c394:	f43f af1d 	beq.w	800c1d2 <_printf_float+0xb6>
 800c398:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c39c:	ea59 0303 	orrs.w	r3, r9, r3
 800c3a0:	d102      	bne.n	800c3a8 <_printf_float+0x28c>
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	07d9      	lsls	r1, r3, #31
 800c3a6:	d5d7      	bpl.n	800c358 <_printf_float+0x23c>
 800c3a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3ac:	4631      	mov	r1, r6
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	47b8      	blx	r7
 800c3b2:	3001      	adds	r0, #1
 800c3b4:	f43f af0d 	beq.w	800c1d2 <_printf_float+0xb6>
 800c3b8:	f04f 0a00 	mov.w	sl, #0
 800c3bc:	f104 0b1a 	add.w	fp, r4, #26
 800c3c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3c2:	425b      	negs	r3, r3
 800c3c4:	4553      	cmp	r3, sl
 800c3c6:	dc01      	bgt.n	800c3cc <_printf_float+0x2b0>
 800c3c8:	464b      	mov	r3, r9
 800c3ca:	e793      	b.n	800c2f4 <_printf_float+0x1d8>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	465a      	mov	r2, fp
 800c3d0:	4631      	mov	r1, r6
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	47b8      	blx	r7
 800c3d6:	3001      	adds	r0, #1
 800c3d8:	f43f aefb 	beq.w	800c1d2 <_printf_float+0xb6>
 800c3dc:	f10a 0a01 	add.w	sl, sl, #1
 800c3e0:	e7ee      	b.n	800c3c0 <_printf_float+0x2a4>
 800c3e2:	bf00      	nop
 800c3e4:	7fefffff 	.word	0x7fefffff
 800c3e8:	0800fb78 	.word	0x0800fb78
 800c3ec:	0800fb7c 	.word	0x0800fb7c
 800c3f0:	0800fb80 	.word	0x0800fb80
 800c3f4:	0800fb84 	.word	0x0800fb84
 800c3f8:	0800fb88 	.word	0x0800fb88
 800c3fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c3fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c402:	4553      	cmp	r3, sl
 800c404:	bfa8      	it	ge
 800c406:	4653      	movge	r3, sl
 800c408:	2b00      	cmp	r3, #0
 800c40a:	4699      	mov	r9, r3
 800c40c:	dc36      	bgt.n	800c47c <_printf_float+0x360>
 800c40e:	f04f 0b00 	mov.w	fp, #0
 800c412:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c416:	f104 021a 	add.w	r2, r4, #26
 800c41a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c41c:	9306      	str	r3, [sp, #24]
 800c41e:	eba3 0309 	sub.w	r3, r3, r9
 800c422:	455b      	cmp	r3, fp
 800c424:	dc31      	bgt.n	800c48a <_printf_float+0x36e>
 800c426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c428:	459a      	cmp	sl, r3
 800c42a:	dc3a      	bgt.n	800c4a2 <_printf_float+0x386>
 800c42c:	6823      	ldr	r3, [r4, #0]
 800c42e:	07da      	lsls	r2, r3, #31
 800c430:	d437      	bmi.n	800c4a2 <_printf_float+0x386>
 800c432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c434:	ebaa 0903 	sub.w	r9, sl, r3
 800c438:	9b06      	ldr	r3, [sp, #24]
 800c43a:	ebaa 0303 	sub.w	r3, sl, r3
 800c43e:	4599      	cmp	r9, r3
 800c440:	bfa8      	it	ge
 800c442:	4699      	movge	r9, r3
 800c444:	f1b9 0f00 	cmp.w	r9, #0
 800c448:	dc33      	bgt.n	800c4b2 <_printf_float+0x396>
 800c44a:	f04f 0800 	mov.w	r8, #0
 800c44e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c452:	f104 0b1a 	add.w	fp, r4, #26
 800c456:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c458:	ebaa 0303 	sub.w	r3, sl, r3
 800c45c:	eba3 0309 	sub.w	r3, r3, r9
 800c460:	4543      	cmp	r3, r8
 800c462:	f77f af79 	ble.w	800c358 <_printf_float+0x23c>
 800c466:	2301      	movs	r3, #1
 800c468:	465a      	mov	r2, fp
 800c46a:	4631      	mov	r1, r6
 800c46c:	4628      	mov	r0, r5
 800c46e:	47b8      	blx	r7
 800c470:	3001      	adds	r0, #1
 800c472:	f43f aeae 	beq.w	800c1d2 <_printf_float+0xb6>
 800c476:	f108 0801 	add.w	r8, r8, #1
 800c47a:	e7ec      	b.n	800c456 <_printf_float+0x33a>
 800c47c:	4642      	mov	r2, r8
 800c47e:	4631      	mov	r1, r6
 800c480:	4628      	mov	r0, r5
 800c482:	47b8      	blx	r7
 800c484:	3001      	adds	r0, #1
 800c486:	d1c2      	bne.n	800c40e <_printf_float+0x2f2>
 800c488:	e6a3      	b.n	800c1d2 <_printf_float+0xb6>
 800c48a:	2301      	movs	r3, #1
 800c48c:	4631      	mov	r1, r6
 800c48e:	4628      	mov	r0, r5
 800c490:	9206      	str	r2, [sp, #24]
 800c492:	47b8      	blx	r7
 800c494:	3001      	adds	r0, #1
 800c496:	f43f ae9c 	beq.w	800c1d2 <_printf_float+0xb6>
 800c49a:	9a06      	ldr	r2, [sp, #24]
 800c49c:	f10b 0b01 	add.w	fp, fp, #1
 800c4a0:	e7bb      	b.n	800c41a <_printf_float+0x2fe>
 800c4a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	47b8      	blx	r7
 800c4ac:	3001      	adds	r0, #1
 800c4ae:	d1c0      	bne.n	800c432 <_printf_float+0x316>
 800c4b0:	e68f      	b.n	800c1d2 <_printf_float+0xb6>
 800c4b2:	9a06      	ldr	r2, [sp, #24]
 800c4b4:	464b      	mov	r3, r9
 800c4b6:	4442      	add	r2, r8
 800c4b8:	4631      	mov	r1, r6
 800c4ba:	4628      	mov	r0, r5
 800c4bc:	47b8      	blx	r7
 800c4be:	3001      	adds	r0, #1
 800c4c0:	d1c3      	bne.n	800c44a <_printf_float+0x32e>
 800c4c2:	e686      	b.n	800c1d2 <_printf_float+0xb6>
 800c4c4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c4c8:	f1ba 0f01 	cmp.w	sl, #1
 800c4cc:	dc01      	bgt.n	800c4d2 <_printf_float+0x3b6>
 800c4ce:	07db      	lsls	r3, r3, #31
 800c4d0:	d536      	bpl.n	800c540 <_printf_float+0x424>
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	4642      	mov	r2, r8
 800c4d6:	4631      	mov	r1, r6
 800c4d8:	4628      	mov	r0, r5
 800c4da:	47b8      	blx	r7
 800c4dc:	3001      	adds	r0, #1
 800c4de:	f43f ae78 	beq.w	800c1d2 <_printf_float+0xb6>
 800c4e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4e6:	4631      	mov	r1, r6
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	47b8      	blx	r7
 800c4ec:	3001      	adds	r0, #1
 800c4ee:	f43f ae70 	beq.w	800c1d2 <_printf_float+0xb6>
 800c4f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c4fe:	f7f4 faeb 	bl	8000ad8 <__aeabi_dcmpeq>
 800c502:	b9c0      	cbnz	r0, 800c536 <_printf_float+0x41a>
 800c504:	4653      	mov	r3, sl
 800c506:	f108 0201 	add.w	r2, r8, #1
 800c50a:	4631      	mov	r1, r6
 800c50c:	4628      	mov	r0, r5
 800c50e:	47b8      	blx	r7
 800c510:	3001      	adds	r0, #1
 800c512:	d10c      	bne.n	800c52e <_printf_float+0x412>
 800c514:	e65d      	b.n	800c1d2 <_printf_float+0xb6>
 800c516:	2301      	movs	r3, #1
 800c518:	465a      	mov	r2, fp
 800c51a:	4631      	mov	r1, r6
 800c51c:	4628      	mov	r0, r5
 800c51e:	47b8      	blx	r7
 800c520:	3001      	adds	r0, #1
 800c522:	f43f ae56 	beq.w	800c1d2 <_printf_float+0xb6>
 800c526:	f108 0801 	add.w	r8, r8, #1
 800c52a:	45d0      	cmp	r8, sl
 800c52c:	dbf3      	blt.n	800c516 <_printf_float+0x3fa>
 800c52e:	464b      	mov	r3, r9
 800c530:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c534:	e6df      	b.n	800c2f6 <_printf_float+0x1da>
 800c536:	f04f 0800 	mov.w	r8, #0
 800c53a:	f104 0b1a 	add.w	fp, r4, #26
 800c53e:	e7f4      	b.n	800c52a <_printf_float+0x40e>
 800c540:	2301      	movs	r3, #1
 800c542:	4642      	mov	r2, r8
 800c544:	e7e1      	b.n	800c50a <_printf_float+0x3ee>
 800c546:	2301      	movs	r3, #1
 800c548:	464a      	mov	r2, r9
 800c54a:	4631      	mov	r1, r6
 800c54c:	4628      	mov	r0, r5
 800c54e:	47b8      	blx	r7
 800c550:	3001      	adds	r0, #1
 800c552:	f43f ae3e 	beq.w	800c1d2 <_printf_float+0xb6>
 800c556:	f108 0801 	add.w	r8, r8, #1
 800c55a:	68e3      	ldr	r3, [r4, #12]
 800c55c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c55e:	1a5b      	subs	r3, r3, r1
 800c560:	4543      	cmp	r3, r8
 800c562:	dcf0      	bgt.n	800c546 <_printf_float+0x42a>
 800c564:	e6fc      	b.n	800c360 <_printf_float+0x244>
 800c566:	f04f 0800 	mov.w	r8, #0
 800c56a:	f104 0919 	add.w	r9, r4, #25
 800c56e:	e7f4      	b.n	800c55a <_printf_float+0x43e>

0800c570 <_printf_common>:
 800c570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c574:	4616      	mov	r6, r2
 800c576:	4698      	mov	r8, r3
 800c578:	688a      	ldr	r2, [r1, #8]
 800c57a:	690b      	ldr	r3, [r1, #16]
 800c57c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c580:	4293      	cmp	r3, r2
 800c582:	bfb8      	it	lt
 800c584:	4613      	movlt	r3, r2
 800c586:	6033      	str	r3, [r6, #0]
 800c588:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c58c:	4607      	mov	r7, r0
 800c58e:	460c      	mov	r4, r1
 800c590:	b10a      	cbz	r2, 800c596 <_printf_common+0x26>
 800c592:	3301      	adds	r3, #1
 800c594:	6033      	str	r3, [r6, #0]
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	0699      	lsls	r1, r3, #26
 800c59a:	bf42      	ittt	mi
 800c59c:	6833      	ldrmi	r3, [r6, #0]
 800c59e:	3302      	addmi	r3, #2
 800c5a0:	6033      	strmi	r3, [r6, #0]
 800c5a2:	6825      	ldr	r5, [r4, #0]
 800c5a4:	f015 0506 	ands.w	r5, r5, #6
 800c5a8:	d106      	bne.n	800c5b8 <_printf_common+0x48>
 800c5aa:	f104 0a19 	add.w	sl, r4, #25
 800c5ae:	68e3      	ldr	r3, [r4, #12]
 800c5b0:	6832      	ldr	r2, [r6, #0]
 800c5b2:	1a9b      	subs	r3, r3, r2
 800c5b4:	42ab      	cmp	r3, r5
 800c5b6:	dc26      	bgt.n	800c606 <_printf_common+0x96>
 800c5b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c5bc:	6822      	ldr	r2, [r4, #0]
 800c5be:	3b00      	subs	r3, #0
 800c5c0:	bf18      	it	ne
 800c5c2:	2301      	movne	r3, #1
 800c5c4:	0692      	lsls	r2, r2, #26
 800c5c6:	d42b      	bmi.n	800c620 <_printf_common+0xb0>
 800c5c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c5cc:	4641      	mov	r1, r8
 800c5ce:	4638      	mov	r0, r7
 800c5d0:	47c8      	blx	r9
 800c5d2:	3001      	adds	r0, #1
 800c5d4:	d01e      	beq.n	800c614 <_printf_common+0xa4>
 800c5d6:	6823      	ldr	r3, [r4, #0]
 800c5d8:	6922      	ldr	r2, [r4, #16]
 800c5da:	f003 0306 	and.w	r3, r3, #6
 800c5de:	2b04      	cmp	r3, #4
 800c5e0:	bf02      	ittt	eq
 800c5e2:	68e5      	ldreq	r5, [r4, #12]
 800c5e4:	6833      	ldreq	r3, [r6, #0]
 800c5e6:	1aed      	subeq	r5, r5, r3
 800c5e8:	68a3      	ldr	r3, [r4, #8]
 800c5ea:	bf0c      	ite	eq
 800c5ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c5f0:	2500      	movne	r5, #0
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	bfc4      	itt	gt
 800c5f6:	1a9b      	subgt	r3, r3, r2
 800c5f8:	18ed      	addgt	r5, r5, r3
 800c5fa:	2600      	movs	r6, #0
 800c5fc:	341a      	adds	r4, #26
 800c5fe:	42b5      	cmp	r5, r6
 800c600:	d11a      	bne.n	800c638 <_printf_common+0xc8>
 800c602:	2000      	movs	r0, #0
 800c604:	e008      	b.n	800c618 <_printf_common+0xa8>
 800c606:	2301      	movs	r3, #1
 800c608:	4652      	mov	r2, sl
 800c60a:	4641      	mov	r1, r8
 800c60c:	4638      	mov	r0, r7
 800c60e:	47c8      	blx	r9
 800c610:	3001      	adds	r0, #1
 800c612:	d103      	bne.n	800c61c <_printf_common+0xac>
 800c614:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c61c:	3501      	adds	r5, #1
 800c61e:	e7c6      	b.n	800c5ae <_printf_common+0x3e>
 800c620:	18e1      	adds	r1, r4, r3
 800c622:	1c5a      	adds	r2, r3, #1
 800c624:	2030      	movs	r0, #48	@ 0x30
 800c626:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c62a:	4422      	add	r2, r4
 800c62c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c630:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c634:	3302      	adds	r3, #2
 800c636:	e7c7      	b.n	800c5c8 <_printf_common+0x58>
 800c638:	2301      	movs	r3, #1
 800c63a:	4622      	mov	r2, r4
 800c63c:	4641      	mov	r1, r8
 800c63e:	4638      	mov	r0, r7
 800c640:	47c8      	blx	r9
 800c642:	3001      	adds	r0, #1
 800c644:	d0e6      	beq.n	800c614 <_printf_common+0xa4>
 800c646:	3601      	adds	r6, #1
 800c648:	e7d9      	b.n	800c5fe <_printf_common+0x8e>
	...

0800c64c <_printf_i>:
 800c64c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c650:	7e0f      	ldrb	r7, [r1, #24]
 800c652:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c654:	2f78      	cmp	r7, #120	@ 0x78
 800c656:	4691      	mov	r9, r2
 800c658:	4680      	mov	r8, r0
 800c65a:	460c      	mov	r4, r1
 800c65c:	469a      	mov	sl, r3
 800c65e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c662:	d807      	bhi.n	800c674 <_printf_i+0x28>
 800c664:	2f62      	cmp	r7, #98	@ 0x62
 800c666:	d80a      	bhi.n	800c67e <_printf_i+0x32>
 800c668:	2f00      	cmp	r7, #0
 800c66a:	f000 80d2 	beq.w	800c812 <_printf_i+0x1c6>
 800c66e:	2f58      	cmp	r7, #88	@ 0x58
 800c670:	f000 80b9 	beq.w	800c7e6 <_printf_i+0x19a>
 800c674:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c678:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c67c:	e03a      	b.n	800c6f4 <_printf_i+0xa8>
 800c67e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c682:	2b15      	cmp	r3, #21
 800c684:	d8f6      	bhi.n	800c674 <_printf_i+0x28>
 800c686:	a101      	add	r1, pc, #4	@ (adr r1, 800c68c <_printf_i+0x40>)
 800c688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c68c:	0800c6e5 	.word	0x0800c6e5
 800c690:	0800c6f9 	.word	0x0800c6f9
 800c694:	0800c675 	.word	0x0800c675
 800c698:	0800c675 	.word	0x0800c675
 800c69c:	0800c675 	.word	0x0800c675
 800c6a0:	0800c675 	.word	0x0800c675
 800c6a4:	0800c6f9 	.word	0x0800c6f9
 800c6a8:	0800c675 	.word	0x0800c675
 800c6ac:	0800c675 	.word	0x0800c675
 800c6b0:	0800c675 	.word	0x0800c675
 800c6b4:	0800c675 	.word	0x0800c675
 800c6b8:	0800c7f9 	.word	0x0800c7f9
 800c6bc:	0800c723 	.word	0x0800c723
 800c6c0:	0800c7b3 	.word	0x0800c7b3
 800c6c4:	0800c675 	.word	0x0800c675
 800c6c8:	0800c675 	.word	0x0800c675
 800c6cc:	0800c81b 	.word	0x0800c81b
 800c6d0:	0800c675 	.word	0x0800c675
 800c6d4:	0800c723 	.word	0x0800c723
 800c6d8:	0800c675 	.word	0x0800c675
 800c6dc:	0800c675 	.word	0x0800c675
 800c6e0:	0800c7bb 	.word	0x0800c7bb
 800c6e4:	6833      	ldr	r3, [r6, #0]
 800c6e6:	1d1a      	adds	r2, r3, #4
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	6032      	str	r2, [r6, #0]
 800c6ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c6f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e09d      	b.n	800c834 <_printf_i+0x1e8>
 800c6f8:	6833      	ldr	r3, [r6, #0]
 800c6fa:	6820      	ldr	r0, [r4, #0]
 800c6fc:	1d19      	adds	r1, r3, #4
 800c6fe:	6031      	str	r1, [r6, #0]
 800c700:	0606      	lsls	r6, r0, #24
 800c702:	d501      	bpl.n	800c708 <_printf_i+0xbc>
 800c704:	681d      	ldr	r5, [r3, #0]
 800c706:	e003      	b.n	800c710 <_printf_i+0xc4>
 800c708:	0645      	lsls	r5, r0, #25
 800c70a:	d5fb      	bpl.n	800c704 <_printf_i+0xb8>
 800c70c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c710:	2d00      	cmp	r5, #0
 800c712:	da03      	bge.n	800c71c <_printf_i+0xd0>
 800c714:	232d      	movs	r3, #45	@ 0x2d
 800c716:	426d      	negs	r5, r5
 800c718:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c71c:	4859      	ldr	r0, [pc, #356]	@ (800c884 <_printf_i+0x238>)
 800c71e:	230a      	movs	r3, #10
 800c720:	e011      	b.n	800c746 <_printf_i+0xfa>
 800c722:	6821      	ldr	r1, [r4, #0]
 800c724:	6833      	ldr	r3, [r6, #0]
 800c726:	0608      	lsls	r0, r1, #24
 800c728:	f853 5b04 	ldr.w	r5, [r3], #4
 800c72c:	d402      	bmi.n	800c734 <_printf_i+0xe8>
 800c72e:	0649      	lsls	r1, r1, #25
 800c730:	bf48      	it	mi
 800c732:	b2ad      	uxthmi	r5, r5
 800c734:	2f6f      	cmp	r7, #111	@ 0x6f
 800c736:	4853      	ldr	r0, [pc, #332]	@ (800c884 <_printf_i+0x238>)
 800c738:	6033      	str	r3, [r6, #0]
 800c73a:	bf14      	ite	ne
 800c73c:	230a      	movne	r3, #10
 800c73e:	2308      	moveq	r3, #8
 800c740:	2100      	movs	r1, #0
 800c742:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c746:	6866      	ldr	r6, [r4, #4]
 800c748:	60a6      	str	r6, [r4, #8]
 800c74a:	2e00      	cmp	r6, #0
 800c74c:	bfa2      	ittt	ge
 800c74e:	6821      	ldrge	r1, [r4, #0]
 800c750:	f021 0104 	bicge.w	r1, r1, #4
 800c754:	6021      	strge	r1, [r4, #0]
 800c756:	b90d      	cbnz	r5, 800c75c <_printf_i+0x110>
 800c758:	2e00      	cmp	r6, #0
 800c75a:	d04b      	beq.n	800c7f4 <_printf_i+0x1a8>
 800c75c:	4616      	mov	r6, r2
 800c75e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c762:	fb03 5711 	mls	r7, r3, r1, r5
 800c766:	5dc7      	ldrb	r7, [r0, r7]
 800c768:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c76c:	462f      	mov	r7, r5
 800c76e:	42bb      	cmp	r3, r7
 800c770:	460d      	mov	r5, r1
 800c772:	d9f4      	bls.n	800c75e <_printf_i+0x112>
 800c774:	2b08      	cmp	r3, #8
 800c776:	d10b      	bne.n	800c790 <_printf_i+0x144>
 800c778:	6823      	ldr	r3, [r4, #0]
 800c77a:	07df      	lsls	r7, r3, #31
 800c77c:	d508      	bpl.n	800c790 <_printf_i+0x144>
 800c77e:	6923      	ldr	r3, [r4, #16]
 800c780:	6861      	ldr	r1, [r4, #4]
 800c782:	4299      	cmp	r1, r3
 800c784:	bfde      	ittt	le
 800c786:	2330      	movle	r3, #48	@ 0x30
 800c788:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c78c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c790:	1b92      	subs	r2, r2, r6
 800c792:	6122      	str	r2, [r4, #16]
 800c794:	f8cd a000 	str.w	sl, [sp]
 800c798:	464b      	mov	r3, r9
 800c79a:	aa03      	add	r2, sp, #12
 800c79c:	4621      	mov	r1, r4
 800c79e:	4640      	mov	r0, r8
 800c7a0:	f7ff fee6 	bl	800c570 <_printf_common>
 800c7a4:	3001      	adds	r0, #1
 800c7a6:	d14a      	bne.n	800c83e <_printf_i+0x1f2>
 800c7a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7ac:	b004      	add	sp, #16
 800c7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b2:	6823      	ldr	r3, [r4, #0]
 800c7b4:	f043 0320 	orr.w	r3, r3, #32
 800c7b8:	6023      	str	r3, [r4, #0]
 800c7ba:	4833      	ldr	r0, [pc, #204]	@ (800c888 <_printf_i+0x23c>)
 800c7bc:	2778      	movs	r7, #120	@ 0x78
 800c7be:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c7c2:	6823      	ldr	r3, [r4, #0]
 800c7c4:	6831      	ldr	r1, [r6, #0]
 800c7c6:	061f      	lsls	r7, r3, #24
 800c7c8:	f851 5b04 	ldr.w	r5, [r1], #4
 800c7cc:	d402      	bmi.n	800c7d4 <_printf_i+0x188>
 800c7ce:	065f      	lsls	r7, r3, #25
 800c7d0:	bf48      	it	mi
 800c7d2:	b2ad      	uxthmi	r5, r5
 800c7d4:	6031      	str	r1, [r6, #0]
 800c7d6:	07d9      	lsls	r1, r3, #31
 800c7d8:	bf44      	itt	mi
 800c7da:	f043 0320 	orrmi.w	r3, r3, #32
 800c7de:	6023      	strmi	r3, [r4, #0]
 800c7e0:	b11d      	cbz	r5, 800c7ea <_printf_i+0x19e>
 800c7e2:	2310      	movs	r3, #16
 800c7e4:	e7ac      	b.n	800c740 <_printf_i+0xf4>
 800c7e6:	4827      	ldr	r0, [pc, #156]	@ (800c884 <_printf_i+0x238>)
 800c7e8:	e7e9      	b.n	800c7be <_printf_i+0x172>
 800c7ea:	6823      	ldr	r3, [r4, #0]
 800c7ec:	f023 0320 	bic.w	r3, r3, #32
 800c7f0:	6023      	str	r3, [r4, #0]
 800c7f2:	e7f6      	b.n	800c7e2 <_printf_i+0x196>
 800c7f4:	4616      	mov	r6, r2
 800c7f6:	e7bd      	b.n	800c774 <_printf_i+0x128>
 800c7f8:	6833      	ldr	r3, [r6, #0]
 800c7fa:	6825      	ldr	r5, [r4, #0]
 800c7fc:	6961      	ldr	r1, [r4, #20]
 800c7fe:	1d18      	adds	r0, r3, #4
 800c800:	6030      	str	r0, [r6, #0]
 800c802:	062e      	lsls	r6, r5, #24
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	d501      	bpl.n	800c80c <_printf_i+0x1c0>
 800c808:	6019      	str	r1, [r3, #0]
 800c80a:	e002      	b.n	800c812 <_printf_i+0x1c6>
 800c80c:	0668      	lsls	r0, r5, #25
 800c80e:	d5fb      	bpl.n	800c808 <_printf_i+0x1bc>
 800c810:	8019      	strh	r1, [r3, #0]
 800c812:	2300      	movs	r3, #0
 800c814:	6123      	str	r3, [r4, #16]
 800c816:	4616      	mov	r6, r2
 800c818:	e7bc      	b.n	800c794 <_printf_i+0x148>
 800c81a:	6833      	ldr	r3, [r6, #0]
 800c81c:	1d1a      	adds	r2, r3, #4
 800c81e:	6032      	str	r2, [r6, #0]
 800c820:	681e      	ldr	r6, [r3, #0]
 800c822:	6862      	ldr	r2, [r4, #4]
 800c824:	2100      	movs	r1, #0
 800c826:	4630      	mov	r0, r6
 800c828:	f7f3 fcda 	bl	80001e0 <memchr>
 800c82c:	b108      	cbz	r0, 800c832 <_printf_i+0x1e6>
 800c82e:	1b80      	subs	r0, r0, r6
 800c830:	6060      	str	r0, [r4, #4]
 800c832:	6863      	ldr	r3, [r4, #4]
 800c834:	6123      	str	r3, [r4, #16]
 800c836:	2300      	movs	r3, #0
 800c838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c83c:	e7aa      	b.n	800c794 <_printf_i+0x148>
 800c83e:	6923      	ldr	r3, [r4, #16]
 800c840:	4632      	mov	r2, r6
 800c842:	4649      	mov	r1, r9
 800c844:	4640      	mov	r0, r8
 800c846:	47d0      	blx	sl
 800c848:	3001      	adds	r0, #1
 800c84a:	d0ad      	beq.n	800c7a8 <_printf_i+0x15c>
 800c84c:	6823      	ldr	r3, [r4, #0]
 800c84e:	079b      	lsls	r3, r3, #30
 800c850:	d413      	bmi.n	800c87a <_printf_i+0x22e>
 800c852:	68e0      	ldr	r0, [r4, #12]
 800c854:	9b03      	ldr	r3, [sp, #12]
 800c856:	4298      	cmp	r0, r3
 800c858:	bfb8      	it	lt
 800c85a:	4618      	movlt	r0, r3
 800c85c:	e7a6      	b.n	800c7ac <_printf_i+0x160>
 800c85e:	2301      	movs	r3, #1
 800c860:	4632      	mov	r2, r6
 800c862:	4649      	mov	r1, r9
 800c864:	4640      	mov	r0, r8
 800c866:	47d0      	blx	sl
 800c868:	3001      	adds	r0, #1
 800c86a:	d09d      	beq.n	800c7a8 <_printf_i+0x15c>
 800c86c:	3501      	adds	r5, #1
 800c86e:	68e3      	ldr	r3, [r4, #12]
 800c870:	9903      	ldr	r1, [sp, #12]
 800c872:	1a5b      	subs	r3, r3, r1
 800c874:	42ab      	cmp	r3, r5
 800c876:	dcf2      	bgt.n	800c85e <_printf_i+0x212>
 800c878:	e7eb      	b.n	800c852 <_printf_i+0x206>
 800c87a:	2500      	movs	r5, #0
 800c87c:	f104 0619 	add.w	r6, r4, #25
 800c880:	e7f5      	b.n	800c86e <_printf_i+0x222>
 800c882:	bf00      	nop
 800c884:	0800fb8a 	.word	0x0800fb8a
 800c888:	0800fb9b 	.word	0x0800fb9b

0800c88c <_scanf_float>:
 800c88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c890:	b087      	sub	sp, #28
 800c892:	4617      	mov	r7, r2
 800c894:	9303      	str	r3, [sp, #12]
 800c896:	688b      	ldr	r3, [r1, #8]
 800c898:	1e5a      	subs	r2, r3, #1
 800c89a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c89e:	bf81      	itttt	hi
 800c8a0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c8a4:	eb03 0b05 	addhi.w	fp, r3, r5
 800c8a8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c8ac:	608b      	strhi	r3, [r1, #8]
 800c8ae:	680b      	ldr	r3, [r1, #0]
 800c8b0:	460a      	mov	r2, r1
 800c8b2:	f04f 0500 	mov.w	r5, #0
 800c8b6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800c8ba:	f842 3b1c 	str.w	r3, [r2], #28
 800c8be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c8c2:	4680      	mov	r8, r0
 800c8c4:	460c      	mov	r4, r1
 800c8c6:	bf98      	it	ls
 800c8c8:	f04f 0b00 	movls.w	fp, #0
 800c8cc:	9201      	str	r2, [sp, #4]
 800c8ce:	4616      	mov	r6, r2
 800c8d0:	46aa      	mov	sl, r5
 800c8d2:	46a9      	mov	r9, r5
 800c8d4:	9502      	str	r5, [sp, #8]
 800c8d6:	68a2      	ldr	r2, [r4, #8]
 800c8d8:	b152      	cbz	r2, 800c8f0 <_scanf_float+0x64>
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	2b4e      	cmp	r3, #78	@ 0x4e
 800c8e0:	d864      	bhi.n	800c9ac <_scanf_float+0x120>
 800c8e2:	2b40      	cmp	r3, #64	@ 0x40
 800c8e4:	d83c      	bhi.n	800c960 <_scanf_float+0xd4>
 800c8e6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800c8ea:	b2c8      	uxtb	r0, r1
 800c8ec:	280e      	cmp	r0, #14
 800c8ee:	d93a      	bls.n	800c966 <_scanf_float+0xda>
 800c8f0:	f1b9 0f00 	cmp.w	r9, #0
 800c8f4:	d003      	beq.n	800c8fe <_scanf_float+0x72>
 800c8f6:	6823      	ldr	r3, [r4, #0]
 800c8f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c8fc:	6023      	str	r3, [r4, #0]
 800c8fe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c902:	f1ba 0f01 	cmp.w	sl, #1
 800c906:	f200 8117 	bhi.w	800cb38 <_scanf_float+0x2ac>
 800c90a:	9b01      	ldr	r3, [sp, #4]
 800c90c:	429e      	cmp	r6, r3
 800c90e:	f200 8108 	bhi.w	800cb22 <_scanf_float+0x296>
 800c912:	2001      	movs	r0, #1
 800c914:	b007      	add	sp, #28
 800c916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c91a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800c91e:	2a0d      	cmp	r2, #13
 800c920:	d8e6      	bhi.n	800c8f0 <_scanf_float+0x64>
 800c922:	a101      	add	r1, pc, #4	@ (adr r1, 800c928 <_scanf_float+0x9c>)
 800c924:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c928:	0800ca6f 	.word	0x0800ca6f
 800c92c:	0800c8f1 	.word	0x0800c8f1
 800c930:	0800c8f1 	.word	0x0800c8f1
 800c934:	0800c8f1 	.word	0x0800c8f1
 800c938:	0800cacf 	.word	0x0800cacf
 800c93c:	0800caa7 	.word	0x0800caa7
 800c940:	0800c8f1 	.word	0x0800c8f1
 800c944:	0800c8f1 	.word	0x0800c8f1
 800c948:	0800ca7d 	.word	0x0800ca7d
 800c94c:	0800c8f1 	.word	0x0800c8f1
 800c950:	0800c8f1 	.word	0x0800c8f1
 800c954:	0800c8f1 	.word	0x0800c8f1
 800c958:	0800c8f1 	.word	0x0800c8f1
 800c95c:	0800ca35 	.word	0x0800ca35
 800c960:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800c964:	e7db      	b.n	800c91e <_scanf_float+0x92>
 800c966:	290e      	cmp	r1, #14
 800c968:	d8c2      	bhi.n	800c8f0 <_scanf_float+0x64>
 800c96a:	a001      	add	r0, pc, #4	@ (adr r0, 800c970 <_scanf_float+0xe4>)
 800c96c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c970:	0800ca25 	.word	0x0800ca25
 800c974:	0800c8f1 	.word	0x0800c8f1
 800c978:	0800ca25 	.word	0x0800ca25
 800c97c:	0800cabb 	.word	0x0800cabb
 800c980:	0800c8f1 	.word	0x0800c8f1
 800c984:	0800c9cd 	.word	0x0800c9cd
 800c988:	0800ca0b 	.word	0x0800ca0b
 800c98c:	0800ca0b 	.word	0x0800ca0b
 800c990:	0800ca0b 	.word	0x0800ca0b
 800c994:	0800ca0b 	.word	0x0800ca0b
 800c998:	0800ca0b 	.word	0x0800ca0b
 800c99c:	0800ca0b 	.word	0x0800ca0b
 800c9a0:	0800ca0b 	.word	0x0800ca0b
 800c9a4:	0800ca0b 	.word	0x0800ca0b
 800c9a8:	0800ca0b 	.word	0x0800ca0b
 800c9ac:	2b6e      	cmp	r3, #110	@ 0x6e
 800c9ae:	d809      	bhi.n	800c9c4 <_scanf_float+0x138>
 800c9b0:	2b60      	cmp	r3, #96	@ 0x60
 800c9b2:	d8b2      	bhi.n	800c91a <_scanf_float+0x8e>
 800c9b4:	2b54      	cmp	r3, #84	@ 0x54
 800c9b6:	d07b      	beq.n	800cab0 <_scanf_float+0x224>
 800c9b8:	2b59      	cmp	r3, #89	@ 0x59
 800c9ba:	d199      	bne.n	800c8f0 <_scanf_float+0x64>
 800c9bc:	2d07      	cmp	r5, #7
 800c9be:	d197      	bne.n	800c8f0 <_scanf_float+0x64>
 800c9c0:	2508      	movs	r5, #8
 800c9c2:	e02c      	b.n	800ca1e <_scanf_float+0x192>
 800c9c4:	2b74      	cmp	r3, #116	@ 0x74
 800c9c6:	d073      	beq.n	800cab0 <_scanf_float+0x224>
 800c9c8:	2b79      	cmp	r3, #121	@ 0x79
 800c9ca:	e7f6      	b.n	800c9ba <_scanf_float+0x12e>
 800c9cc:	6821      	ldr	r1, [r4, #0]
 800c9ce:	05c8      	lsls	r0, r1, #23
 800c9d0:	d51b      	bpl.n	800ca0a <_scanf_float+0x17e>
 800c9d2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800c9d6:	6021      	str	r1, [r4, #0]
 800c9d8:	f109 0901 	add.w	r9, r9, #1
 800c9dc:	f1bb 0f00 	cmp.w	fp, #0
 800c9e0:	d003      	beq.n	800c9ea <_scanf_float+0x15e>
 800c9e2:	3201      	adds	r2, #1
 800c9e4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800c9e8:	60a2      	str	r2, [r4, #8]
 800c9ea:	68a3      	ldr	r3, [r4, #8]
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	60a3      	str	r3, [r4, #8]
 800c9f0:	6923      	ldr	r3, [r4, #16]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	6123      	str	r3, [r4, #16]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	3b01      	subs	r3, #1
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	607b      	str	r3, [r7, #4]
 800c9fe:	f340 8087 	ble.w	800cb10 <_scanf_float+0x284>
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	3301      	adds	r3, #1
 800ca06:	603b      	str	r3, [r7, #0]
 800ca08:	e765      	b.n	800c8d6 <_scanf_float+0x4a>
 800ca0a:	eb1a 0105 	adds.w	r1, sl, r5
 800ca0e:	f47f af6f 	bne.w	800c8f0 <_scanf_float+0x64>
 800ca12:	6822      	ldr	r2, [r4, #0]
 800ca14:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ca18:	6022      	str	r2, [r4, #0]
 800ca1a:	460d      	mov	r5, r1
 800ca1c:	468a      	mov	sl, r1
 800ca1e:	f806 3b01 	strb.w	r3, [r6], #1
 800ca22:	e7e2      	b.n	800c9ea <_scanf_float+0x15e>
 800ca24:	6822      	ldr	r2, [r4, #0]
 800ca26:	0610      	lsls	r0, r2, #24
 800ca28:	f57f af62 	bpl.w	800c8f0 <_scanf_float+0x64>
 800ca2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ca30:	6022      	str	r2, [r4, #0]
 800ca32:	e7f4      	b.n	800ca1e <_scanf_float+0x192>
 800ca34:	f1ba 0f00 	cmp.w	sl, #0
 800ca38:	d10e      	bne.n	800ca58 <_scanf_float+0x1cc>
 800ca3a:	f1b9 0f00 	cmp.w	r9, #0
 800ca3e:	d10e      	bne.n	800ca5e <_scanf_float+0x1d2>
 800ca40:	6822      	ldr	r2, [r4, #0]
 800ca42:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ca46:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ca4a:	d108      	bne.n	800ca5e <_scanf_float+0x1d2>
 800ca4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ca50:	6022      	str	r2, [r4, #0]
 800ca52:	f04f 0a01 	mov.w	sl, #1
 800ca56:	e7e2      	b.n	800ca1e <_scanf_float+0x192>
 800ca58:	f1ba 0f02 	cmp.w	sl, #2
 800ca5c:	d055      	beq.n	800cb0a <_scanf_float+0x27e>
 800ca5e:	2d01      	cmp	r5, #1
 800ca60:	d002      	beq.n	800ca68 <_scanf_float+0x1dc>
 800ca62:	2d04      	cmp	r5, #4
 800ca64:	f47f af44 	bne.w	800c8f0 <_scanf_float+0x64>
 800ca68:	3501      	adds	r5, #1
 800ca6a:	b2ed      	uxtb	r5, r5
 800ca6c:	e7d7      	b.n	800ca1e <_scanf_float+0x192>
 800ca6e:	f1ba 0f01 	cmp.w	sl, #1
 800ca72:	f47f af3d 	bne.w	800c8f0 <_scanf_float+0x64>
 800ca76:	f04f 0a02 	mov.w	sl, #2
 800ca7a:	e7d0      	b.n	800ca1e <_scanf_float+0x192>
 800ca7c:	b97d      	cbnz	r5, 800ca9e <_scanf_float+0x212>
 800ca7e:	f1b9 0f00 	cmp.w	r9, #0
 800ca82:	f47f af38 	bne.w	800c8f6 <_scanf_float+0x6a>
 800ca86:	6822      	ldr	r2, [r4, #0]
 800ca88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ca8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ca90:	f040 8108 	bne.w	800cca4 <_scanf_float+0x418>
 800ca94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ca98:	6022      	str	r2, [r4, #0]
 800ca9a:	2501      	movs	r5, #1
 800ca9c:	e7bf      	b.n	800ca1e <_scanf_float+0x192>
 800ca9e:	2d03      	cmp	r5, #3
 800caa0:	d0e2      	beq.n	800ca68 <_scanf_float+0x1dc>
 800caa2:	2d05      	cmp	r5, #5
 800caa4:	e7de      	b.n	800ca64 <_scanf_float+0x1d8>
 800caa6:	2d02      	cmp	r5, #2
 800caa8:	f47f af22 	bne.w	800c8f0 <_scanf_float+0x64>
 800caac:	2503      	movs	r5, #3
 800caae:	e7b6      	b.n	800ca1e <_scanf_float+0x192>
 800cab0:	2d06      	cmp	r5, #6
 800cab2:	f47f af1d 	bne.w	800c8f0 <_scanf_float+0x64>
 800cab6:	2507      	movs	r5, #7
 800cab8:	e7b1      	b.n	800ca1e <_scanf_float+0x192>
 800caba:	6822      	ldr	r2, [r4, #0]
 800cabc:	0591      	lsls	r1, r2, #22
 800cabe:	f57f af17 	bpl.w	800c8f0 <_scanf_float+0x64>
 800cac2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800cac6:	6022      	str	r2, [r4, #0]
 800cac8:	f8cd 9008 	str.w	r9, [sp, #8]
 800cacc:	e7a7      	b.n	800ca1e <_scanf_float+0x192>
 800cace:	6822      	ldr	r2, [r4, #0]
 800cad0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cad4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cad8:	d006      	beq.n	800cae8 <_scanf_float+0x25c>
 800cada:	0550      	lsls	r0, r2, #21
 800cadc:	f57f af08 	bpl.w	800c8f0 <_scanf_float+0x64>
 800cae0:	f1b9 0f00 	cmp.w	r9, #0
 800cae4:	f000 80de 	beq.w	800cca4 <_scanf_float+0x418>
 800cae8:	0591      	lsls	r1, r2, #22
 800caea:	bf58      	it	pl
 800caec:	9902      	ldrpl	r1, [sp, #8]
 800caee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800caf2:	bf58      	it	pl
 800caf4:	eba9 0101 	subpl.w	r1, r9, r1
 800caf8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cafc:	bf58      	it	pl
 800cafe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cb02:	6022      	str	r2, [r4, #0]
 800cb04:	f04f 0900 	mov.w	r9, #0
 800cb08:	e789      	b.n	800ca1e <_scanf_float+0x192>
 800cb0a:	f04f 0a03 	mov.w	sl, #3
 800cb0e:	e786      	b.n	800ca1e <_scanf_float+0x192>
 800cb10:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cb14:	4639      	mov	r1, r7
 800cb16:	4640      	mov	r0, r8
 800cb18:	4798      	blx	r3
 800cb1a:	2800      	cmp	r0, #0
 800cb1c:	f43f aedb 	beq.w	800c8d6 <_scanf_float+0x4a>
 800cb20:	e6e6      	b.n	800c8f0 <_scanf_float+0x64>
 800cb22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb2a:	463a      	mov	r2, r7
 800cb2c:	4640      	mov	r0, r8
 800cb2e:	4798      	blx	r3
 800cb30:	6923      	ldr	r3, [r4, #16]
 800cb32:	3b01      	subs	r3, #1
 800cb34:	6123      	str	r3, [r4, #16]
 800cb36:	e6e8      	b.n	800c90a <_scanf_float+0x7e>
 800cb38:	1e6b      	subs	r3, r5, #1
 800cb3a:	2b06      	cmp	r3, #6
 800cb3c:	d824      	bhi.n	800cb88 <_scanf_float+0x2fc>
 800cb3e:	2d02      	cmp	r5, #2
 800cb40:	d836      	bhi.n	800cbb0 <_scanf_float+0x324>
 800cb42:	9b01      	ldr	r3, [sp, #4]
 800cb44:	429e      	cmp	r6, r3
 800cb46:	f67f aee4 	bls.w	800c912 <_scanf_float+0x86>
 800cb4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cb52:	463a      	mov	r2, r7
 800cb54:	4640      	mov	r0, r8
 800cb56:	4798      	blx	r3
 800cb58:	6923      	ldr	r3, [r4, #16]
 800cb5a:	3b01      	subs	r3, #1
 800cb5c:	6123      	str	r3, [r4, #16]
 800cb5e:	e7f0      	b.n	800cb42 <_scanf_float+0x2b6>
 800cb60:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb64:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cb68:	463a      	mov	r2, r7
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	4798      	blx	r3
 800cb6e:	6923      	ldr	r3, [r4, #16]
 800cb70:	3b01      	subs	r3, #1
 800cb72:	6123      	str	r3, [r4, #16]
 800cb74:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cb78:	fa5f fa8a 	uxtb.w	sl, sl
 800cb7c:	f1ba 0f02 	cmp.w	sl, #2
 800cb80:	d1ee      	bne.n	800cb60 <_scanf_float+0x2d4>
 800cb82:	3d03      	subs	r5, #3
 800cb84:	b2ed      	uxtb	r5, r5
 800cb86:	1b76      	subs	r6, r6, r5
 800cb88:	6823      	ldr	r3, [r4, #0]
 800cb8a:	05da      	lsls	r2, r3, #23
 800cb8c:	d530      	bpl.n	800cbf0 <_scanf_float+0x364>
 800cb8e:	055b      	lsls	r3, r3, #21
 800cb90:	d511      	bpl.n	800cbb6 <_scanf_float+0x32a>
 800cb92:	9b01      	ldr	r3, [sp, #4]
 800cb94:	429e      	cmp	r6, r3
 800cb96:	f67f aebc 	bls.w	800c912 <_scanf_float+0x86>
 800cb9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cb9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cba2:	463a      	mov	r2, r7
 800cba4:	4640      	mov	r0, r8
 800cba6:	4798      	blx	r3
 800cba8:	6923      	ldr	r3, [r4, #16]
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	6123      	str	r3, [r4, #16]
 800cbae:	e7f0      	b.n	800cb92 <_scanf_float+0x306>
 800cbb0:	46aa      	mov	sl, r5
 800cbb2:	46b3      	mov	fp, r6
 800cbb4:	e7de      	b.n	800cb74 <_scanf_float+0x2e8>
 800cbb6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cbba:	6923      	ldr	r3, [r4, #16]
 800cbbc:	2965      	cmp	r1, #101	@ 0x65
 800cbbe:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cbc2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800cbc6:	6123      	str	r3, [r4, #16]
 800cbc8:	d00c      	beq.n	800cbe4 <_scanf_float+0x358>
 800cbca:	2945      	cmp	r1, #69	@ 0x45
 800cbcc:	d00a      	beq.n	800cbe4 <_scanf_float+0x358>
 800cbce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbd2:	463a      	mov	r2, r7
 800cbd4:	4640      	mov	r0, r8
 800cbd6:	4798      	blx	r3
 800cbd8:	6923      	ldr	r3, [r4, #16]
 800cbda:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cbde:	3b01      	subs	r3, #1
 800cbe0:	1eb5      	subs	r5, r6, #2
 800cbe2:	6123      	str	r3, [r4, #16]
 800cbe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cbe8:	463a      	mov	r2, r7
 800cbea:	4640      	mov	r0, r8
 800cbec:	4798      	blx	r3
 800cbee:	462e      	mov	r6, r5
 800cbf0:	6822      	ldr	r2, [r4, #0]
 800cbf2:	f012 0210 	ands.w	r2, r2, #16
 800cbf6:	d001      	beq.n	800cbfc <_scanf_float+0x370>
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	e68b      	b.n	800c914 <_scanf_float+0x88>
 800cbfc:	7032      	strb	r2, [r6, #0]
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cc04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cc08:	d11c      	bne.n	800cc44 <_scanf_float+0x3b8>
 800cc0a:	9b02      	ldr	r3, [sp, #8]
 800cc0c:	454b      	cmp	r3, r9
 800cc0e:	eba3 0209 	sub.w	r2, r3, r9
 800cc12:	d123      	bne.n	800cc5c <_scanf_float+0x3d0>
 800cc14:	9901      	ldr	r1, [sp, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	4640      	mov	r0, r8
 800cc1a:	f7ff f9cd 	bl	800bfb8 <_strtod_r>
 800cc1e:	9b03      	ldr	r3, [sp, #12]
 800cc20:	6821      	ldr	r1, [r4, #0]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f011 0f02 	tst.w	r1, #2
 800cc28:	ec57 6b10 	vmov	r6, r7, d0
 800cc2c:	f103 0204 	add.w	r2, r3, #4
 800cc30:	d01f      	beq.n	800cc72 <_scanf_float+0x3e6>
 800cc32:	9903      	ldr	r1, [sp, #12]
 800cc34:	600a      	str	r2, [r1, #0]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	e9c3 6700 	strd	r6, r7, [r3]
 800cc3c:	68e3      	ldr	r3, [r4, #12]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	60e3      	str	r3, [r4, #12]
 800cc42:	e7d9      	b.n	800cbf8 <_scanf_float+0x36c>
 800cc44:	9b04      	ldr	r3, [sp, #16]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d0e4      	beq.n	800cc14 <_scanf_float+0x388>
 800cc4a:	9905      	ldr	r1, [sp, #20]
 800cc4c:	230a      	movs	r3, #10
 800cc4e:	3101      	adds	r1, #1
 800cc50:	4640      	mov	r0, r8
 800cc52:	f002 f9c9 	bl	800efe8 <_strtol_r>
 800cc56:	9b04      	ldr	r3, [sp, #16]
 800cc58:	9e05      	ldr	r6, [sp, #20]
 800cc5a:	1ac2      	subs	r2, r0, r3
 800cc5c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800cc60:	429e      	cmp	r6, r3
 800cc62:	bf28      	it	cs
 800cc64:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800cc68:	4910      	ldr	r1, [pc, #64]	@ (800ccac <_scanf_float+0x420>)
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	f000 f8e4 	bl	800ce38 <siprintf>
 800cc70:	e7d0      	b.n	800cc14 <_scanf_float+0x388>
 800cc72:	f011 0f04 	tst.w	r1, #4
 800cc76:	9903      	ldr	r1, [sp, #12]
 800cc78:	600a      	str	r2, [r1, #0]
 800cc7a:	d1dc      	bne.n	800cc36 <_scanf_float+0x3aa>
 800cc7c:	681d      	ldr	r5, [r3, #0]
 800cc7e:	4632      	mov	r2, r6
 800cc80:	463b      	mov	r3, r7
 800cc82:	4630      	mov	r0, r6
 800cc84:	4639      	mov	r1, r7
 800cc86:	f7f3 ff59 	bl	8000b3c <__aeabi_dcmpun>
 800cc8a:	b128      	cbz	r0, 800cc98 <_scanf_float+0x40c>
 800cc8c:	4808      	ldr	r0, [pc, #32]	@ (800ccb0 <_scanf_float+0x424>)
 800cc8e:	f000 f9df 	bl	800d050 <nanf>
 800cc92:	ed85 0a00 	vstr	s0, [r5]
 800cc96:	e7d1      	b.n	800cc3c <_scanf_float+0x3b0>
 800cc98:	4630      	mov	r0, r6
 800cc9a:	4639      	mov	r1, r7
 800cc9c:	f7f3 ffac 	bl	8000bf8 <__aeabi_d2f>
 800cca0:	6028      	str	r0, [r5, #0]
 800cca2:	e7cb      	b.n	800cc3c <_scanf_float+0x3b0>
 800cca4:	f04f 0900 	mov.w	r9, #0
 800cca8:	e629      	b.n	800c8fe <_scanf_float+0x72>
 800ccaa:	bf00      	nop
 800ccac:	0800fbac 	.word	0x0800fbac
 800ccb0:	0800ff4d 	.word	0x0800ff4d

0800ccb4 <std>:
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	b510      	push	{r4, lr}
 800ccb8:	4604      	mov	r4, r0
 800ccba:	e9c0 3300 	strd	r3, r3, [r0]
 800ccbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccc2:	6083      	str	r3, [r0, #8]
 800ccc4:	8181      	strh	r1, [r0, #12]
 800ccc6:	6643      	str	r3, [r0, #100]	@ 0x64
 800ccc8:	81c2      	strh	r2, [r0, #14]
 800ccca:	6183      	str	r3, [r0, #24]
 800cccc:	4619      	mov	r1, r3
 800ccce:	2208      	movs	r2, #8
 800ccd0:	305c      	adds	r0, #92	@ 0x5c
 800ccd2:	f000 f914 	bl	800cefe <memset>
 800ccd6:	4b0d      	ldr	r3, [pc, #52]	@ (800cd0c <std+0x58>)
 800ccd8:	6263      	str	r3, [r4, #36]	@ 0x24
 800ccda:	4b0d      	ldr	r3, [pc, #52]	@ (800cd10 <std+0x5c>)
 800ccdc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ccde:	4b0d      	ldr	r3, [pc, #52]	@ (800cd14 <std+0x60>)
 800cce0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cce2:	4b0d      	ldr	r3, [pc, #52]	@ (800cd18 <std+0x64>)
 800cce4:	6323      	str	r3, [r4, #48]	@ 0x30
 800cce6:	4b0d      	ldr	r3, [pc, #52]	@ (800cd1c <std+0x68>)
 800cce8:	6224      	str	r4, [r4, #32]
 800ccea:	429c      	cmp	r4, r3
 800ccec:	d006      	beq.n	800ccfc <std+0x48>
 800ccee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ccf2:	4294      	cmp	r4, r2
 800ccf4:	d002      	beq.n	800ccfc <std+0x48>
 800ccf6:	33d0      	adds	r3, #208	@ 0xd0
 800ccf8:	429c      	cmp	r4, r3
 800ccfa:	d105      	bne.n	800cd08 <std+0x54>
 800ccfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cd00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd04:	f000 b98a 	b.w	800d01c <__retarget_lock_init_recursive>
 800cd08:	bd10      	pop	{r4, pc}
 800cd0a:	bf00      	nop
 800cd0c:	0800ce79 	.word	0x0800ce79
 800cd10:	0800ce9b 	.word	0x0800ce9b
 800cd14:	0800ced3 	.word	0x0800ced3
 800cd18:	0800cef7 	.word	0x0800cef7
 800cd1c:	200022ec 	.word	0x200022ec

0800cd20 <stdio_exit_handler>:
 800cd20:	4a02      	ldr	r2, [pc, #8]	@ (800cd2c <stdio_exit_handler+0xc>)
 800cd22:	4903      	ldr	r1, [pc, #12]	@ (800cd30 <stdio_exit_handler+0x10>)
 800cd24:	4803      	ldr	r0, [pc, #12]	@ (800cd34 <stdio_exit_handler+0x14>)
 800cd26:	f000 b869 	b.w	800cdfc <_fwalk_sglue>
 800cd2a:	bf00      	nop
 800cd2c:	20000104 	.word	0x20000104
 800cd30:	0800f3bd 	.word	0x0800f3bd
 800cd34:	20000280 	.word	0x20000280

0800cd38 <cleanup_stdio>:
 800cd38:	6841      	ldr	r1, [r0, #4]
 800cd3a:	4b0c      	ldr	r3, [pc, #48]	@ (800cd6c <cleanup_stdio+0x34>)
 800cd3c:	4299      	cmp	r1, r3
 800cd3e:	b510      	push	{r4, lr}
 800cd40:	4604      	mov	r4, r0
 800cd42:	d001      	beq.n	800cd48 <cleanup_stdio+0x10>
 800cd44:	f002 fb3a 	bl	800f3bc <_fflush_r>
 800cd48:	68a1      	ldr	r1, [r4, #8]
 800cd4a:	4b09      	ldr	r3, [pc, #36]	@ (800cd70 <cleanup_stdio+0x38>)
 800cd4c:	4299      	cmp	r1, r3
 800cd4e:	d002      	beq.n	800cd56 <cleanup_stdio+0x1e>
 800cd50:	4620      	mov	r0, r4
 800cd52:	f002 fb33 	bl	800f3bc <_fflush_r>
 800cd56:	68e1      	ldr	r1, [r4, #12]
 800cd58:	4b06      	ldr	r3, [pc, #24]	@ (800cd74 <cleanup_stdio+0x3c>)
 800cd5a:	4299      	cmp	r1, r3
 800cd5c:	d004      	beq.n	800cd68 <cleanup_stdio+0x30>
 800cd5e:	4620      	mov	r0, r4
 800cd60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd64:	f002 bb2a 	b.w	800f3bc <_fflush_r>
 800cd68:	bd10      	pop	{r4, pc}
 800cd6a:	bf00      	nop
 800cd6c:	200022ec 	.word	0x200022ec
 800cd70:	20002354 	.word	0x20002354
 800cd74:	200023bc 	.word	0x200023bc

0800cd78 <global_stdio_init.part.0>:
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	4b0b      	ldr	r3, [pc, #44]	@ (800cda8 <global_stdio_init.part.0+0x30>)
 800cd7c:	4c0b      	ldr	r4, [pc, #44]	@ (800cdac <global_stdio_init.part.0+0x34>)
 800cd7e:	4a0c      	ldr	r2, [pc, #48]	@ (800cdb0 <global_stdio_init.part.0+0x38>)
 800cd80:	601a      	str	r2, [r3, #0]
 800cd82:	4620      	mov	r0, r4
 800cd84:	2200      	movs	r2, #0
 800cd86:	2104      	movs	r1, #4
 800cd88:	f7ff ff94 	bl	800ccb4 <std>
 800cd8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd90:	2201      	movs	r2, #1
 800cd92:	2109      	movs	r1, #9
 800cd94:	f7ff ff8e 	bl	800ccb4 <std>
 800cd98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd9c:	2202      	movs	r2, #2
 800cd9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cda2:	2112      	movs	r1, #18
 800cda4:	f7ff bf86 	b.w	800ccb4 <std>
 800cda8:	20002424 	.word	0x20002424
 800cdac:	200022ec 	.word	0x200022ec
 800cdb0:	0800cd21 	.word	0x0800cd21

0800cdb4 <__sfp_lock_acquire>:
 800cdb4:	4801      	ldr	r0, [pc, #4]	@ (800cdbc <__sfp_lock_acquire+0x8>)
 800cdb6:	f000 b932 	b.w	800d01e <__retarget_lock_acquire_recursive>
 800cdba:	bf00      	nop
 800cdbc:	2000242d 	.word	0x2000242d

0800cdc0 <__sfp_lock_release>:
 800cdc0:	4801      	ldr	r0, [pc, #4]	@ (800cdc8 <__sfp_lock_release+0x8>)
 800cdc2:	f000 b92d 	b.w	800d020 <__retarget_lock_release_recursive>
 800cdc6:	bf00      	nop
 800cdc8:	2000242d 	.word	0x2000242d

0800cdcc <__sinit>:
 800cdcc:	b510      	push	{r4, lr}
 800cdce:	4604      	mov	r4, r0
 800cdd0:	f7ff fff0 	bl	800cdb4 <__sfp_lock_acquire>
 800cdd4:	6a23      	ldr	r3, [r4, #32]
 800cdd6:	b11b      	cbz	r3, 800cde0 <__sinit+0x14>
 800cdd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cddc:	f7ff bff0 	b.w	800cdc0 <__sfp_lock_release>
 800cde0:	4b04      	ldr	r3, [pc, #16]	@ (800cdf4 <__sinit+0x28>)
 800cde2:	6223      	str	r3, [r4, #32]
 800cde4:	4b04      	ldr	r3, [pc, #16]	@ (800cdf8 <__sinit+0x2c>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d1f5      	bne.n	800cdd8 <__sinit+0xc>
 800cdec:	f7ff ffc4 	bl	800cd78 <global_stdio_init.part.0>
 800cdf0:	e7f2      	b.n	800cdd8 <__sinit+0xc>
 800cdf2:	bf00      	nop
 800cdf4:	0800cd39 	.word	0x0800cd39
 800cdf8:	20002424 	.word	0x20002424

0800cdfc <_fwalk_sglue>:
 800cdfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce00:	4607      	mov	r7, r0
 800ce02:	4688      	mov	r8, r1
 800ce04:	4614      	mov	r4, r2
 800ce06:	2600      	movs	r6, #0
 800ce08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce0c:	f1b9 0901 	subs.w	r9, r9, #1
 800ce10:	d505      	bpl.n	800ce1e <_fwalk_sglue+0x22>
 800ce12:	6824      	ldr	r4, [r4, #0]
 800ce14:	2c00      	cmp	r4, #0
 800ce16:	d1f7      	bne.n	800ce08 <_fwalk_sglue+0xc>
 800ce18:	4630      	mov	r0, r6
 800ce1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce1e:	89ab      	ldrh	r3, [r5, #12]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d907      	bls.n	800ce34 <_fwalk_sglue+0x38>
 800ce24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	d003      	beq.n	800ce34 <_fwalk_sglue+0x38>
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	4638      	mov	r0, r7
 800ce30:	47c0      	blx	r8
 800ce32:	4306      	orrs	r6, r0
 800ce34:	3568      	adds	r5, #104	@ 0x68
 800ce36:	e7e9      	b.n	800ce0c <_fwalk_sglue+0x10>

0800ce38 <siprintf>:
 800ce38:	b40e      	push	{r1, r2, r3}
 800ce3a:	b500      	push	{lr}
 800ce3c:	b09c      	sub	sp, #112	@ 0x70
 800ce3e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ce40:	9002      	str	r0, [sp, #8]
 800ce42:	9006      	str	r0, [sp, #24]
 800ce44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ce48:	4809      	ldr	r0, [pc, #36]	@ (800ce70 <siprintf+0x38>)
 800ce4a:	9107      	str	r1, [sp, #28]
 800ce4c:	9104      	str	r1, [sp, #16]
 800ce4e:	4909      	ldr	r1, [pc, #36]	@ (800ce74 <siprintf+0x3c>)
 800ce50:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce54:	9105      	str	r1, [sp, #20]
 800ce56:	6800      	ldr	r0, [r0, #0]
 800ce58:	9301      	str	r3, [sp, #4]
 800ce5a:	a902      	add	r1, sp, #8
 800ce5c:	f002 f92e 	bl	800f0bc <_svfiprintf_r>
 800ce60:	9b02      	ldr	r3, [sp, #8]
 800ce62:	2200      	movs	r2, #0
 800ce64:	701a      	strb	r2, [r3, #0]
 800ce66:	b01c      	add	sp, #112	@ 0x70
 800ce68:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce6c:	b003      	add	sp, #12
 800ce6e:	4770      	bx	lr
 800ce70:	2000027c 	.word	0x2000027c
 800ce74:	ffff0208 	.word	0xffff0208

0800ce78 <__sread>:
 800ce78:	b510      	push	{r4, lr}
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce80:	f000 f87e 	bl	800cf80 <_read_r>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	bfab      	itete	ge
 800ce88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ce8a:	89a3      	ldrhlt	r3, [r4, #12]
 800ce8c:	181b      	addge	r3, r3, r0
 800ce8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ce92:	bfac      	ite	ge
 800ce94:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ce96:	81a3      	strhlt	r3, [r4, #12]
 800ce98:	bd10      	pop	{r4, pc}

0800ce9a <__swrite>:
 800ce9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9e:	461f      	mov	r7, r3
 800cea0:	898b      	ldrh	r3, [r1, #12]
 800cea2:	05db      	lsls	r3, r3, #23
 800cea4:	4605      	mov	r5, r0
 800cea6:	460c      	mov	r4, r1
 800cea8:	4616      	mov	r6, r2
 800ceaa:	d505      	bpl.n	800ceb8 <__swrite+0x1e>
 800ceac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb0:	2302      	movs	r3, #2
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	f000 f852 	bl	800cf5c <_lseek_r>
 800ceb8:	89a3      	ldrh	r3, [r4, #12]
 800ceba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cebe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cec2:	81a3      	strh	r3, [r4, #12]
 800cec4:	4632      	mov	r2, r6
 800cec6:	463b      	mov	r3, r7
 800cec8:	4628      	mov	r0, r5
 800ceca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cece:	f000 b869 	b.w	800cfa4 <_write_r>

0800ced2 <__sseek>:
 800ced2:	b510      	push	{r4, lr}
 800ced4:	460c      	mov	r4, r1
 800ced6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceda:	f000 f83f 	bl	800cf5c <_lseek_r>
 800cede:	1c43      	adds	r3, r0, #1
 800cee0:	89a3      	ldrh	r3, [r4, #12]
 800cee2:	bf15      	itete	ne
 800cee4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cee6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ceea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ceee:	81a3      	strheq	r3, [r4, #12]
 800cef0:	bf18      	it	ne
 800cef2:	81a3      	strhne	r3, [r4, #12]
 800cef4:	bd10      	pop	{r4, pc}

0800cef6 <__sclose>:
 800cef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cefa:	f000 b81f 	b.w	800cf3c <_close_r>

0800cefe <memset>:
 800cefe:	4402      	add	r2, r0
 800cf00:	4603      	mov	r3, r0
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d100      	bne.n	800cf08 <memset+0xa>
 800cf06:	4770      	bx	lr
 800cf08:	f803 1b01 	strb.w	r1, [r3], #1
 800cf0c:	e7f9      	b.n	800cf02 <memset+0x4>

0800cf0e <strncmp>:
 800cf0e:	b510      	push	{r4, lr}
 800cf10:	b16a      	cbz	r2, 800cf2e <strncmp+0x20>
 800cf12:	3901      	subs	r1, #1
 800cf14:	1884      	adds	r4, r0, r2
 800cf16:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf1a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d103      	bne.n	800cf2a <strncmp+0x1c>
 800cf22:	42a0      	cmp	r0, r4
 800cf24:	d001      	beq.n	800cf2a <strncmp+0x1c>
 800cf26:	2a00      	cmp	r2, #0
 800cf28:	d1f5      	bne.n	800cf16 <strncmp+0x8>
 800cf2a:	1ad0      	subs	r0, r2, r3
 800cf2c:	bd10      	pop	{r4, pc}
 800cf2e:	4610      	mov	r0, r2
 800cf30:	e7fc      	b.n	800cf2c <strncmp+0x1e>
	...

0800cf34 <_localeconv_r>:
 800cf34:	4800      	ldr	r0, [pc, #0]	@ (800cf38 <_localeconv_r+0x4>)
 800cf36:	4770      	bx	lr
 800cf38:	20000200 	.word	0x20000200

0800cf3c <_close_r>:
 800cf3c:	b538      	push	{r3, r4, r5, lr}
 800cf3e:	4d06      	ldr	r5, [pc, #24]	@ (800cf58 <_close_r+0x1c>)
 800cf40:	2300      	movs	r3, #0
 800cf42:	4604      	mov	r4, r0
 800cf44:	4608      	mov	r0, r1
 800cf46:	602b      	str	r3, [r5, #0]
 800cf48:	f7f5 f920 	bl	800218c <_close>
 800cf4c:	1c43      	adds	r3, r0, #1
 800cf4e:	d102      	bne.n	800cf56 <_close_r+0x1a>
 800cf50:	682b      	ldr	r3, [r5, #0]
 800cf52:	b103      	cbz	r3, 800cf56 <_close_r+0x1a>
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	bd38      	pop	{r3, r4, r5, pc}
 800cf58:	20002428 	.word	0x20002428

0800cf5c <_lseek_r>:
 800cf5c:	b538      	push	{r3, r4, r5, lr}
 800cf5e:	4d07      	ldr	r5, [pc, #28]	@ (800cf7c <_lseek_r+0x20>)
 800cf60:	4604      	mov	r4, r0
 800cf62:	4608      	mov	r0, r1
 800cf64:	4611      	mov	r1, r2
 800cf66:	2200      	movs	r2, #0
 800cf68:	602a      	str	r2, [r5, #0]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	f7f5 f935 	bl	80021da <_lseek>
 800cf70:	1c43      	adds	r3, r0, #1
 800cf72:	d102      	bne.n	800cf7a <_lseek_r+0x1e>
 800cf74:	682b      	ldr	r3, [r5, #0]
 800cf76:	b103      	cbz	r3, 800cf7a <_lseek_r+0x1e>
 800cf78:	6023      	str	r3, [r4, #0]
 800cf7a:	bd38      	pop	{r3, r4, r5, pc}
 800cf7c:	20002428 	.word	0x20002428

0800cf80 <_read_r>:
 800cf80:	b538      	push	{r3, r4, r5, lr}
 800cf82:	4d07      	ldr	r5, [pc, #28]	@ (800cfa0 <_read_r+0x20>)
 800cf84:	4604      	mov	r4, r0
 800cf86:	4608      	mov	r0, r1
 800cf88:	4611      	mov	r1, r2
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	602a      	str	r2, [r5, #0]
 800cf8e:	461a      	mov	r2, r3
 800cf90:	f7f5 f8c3 	bl	800211a <_read>
 800cf94:	1c43      	adds	r3, r0, #1
 800cf96:	d102      	bne.n	800cf9e <_read_r+0x1e>
 800cf98:	682b      	ldr	r3, [r5, #0]
 800cf9a:	b103      	cbz	r3, 800cf9e <_read_r+0x1e>
 800cf9c:	6023      	str	r3, [r4, #0]
 800cf9e:	bd38      	pop	{r3, r4, r5, pc}
 800cfa0:	20002428 	.word	0x20002428

0800cfa4 <_write_r>:
 800cfa4:	b538      	push	{r3, r4, r5, lr}
 800cfa6:	4d07      	ldr	r5, [pc, #28]	@ (800cfc4 <_write_r+0x20>)
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	4608      	mov	r0, r1
 800cfac:	4611      	mov	r1, r2
 800cfae:	2200      	movs	r2, #0
 800cfb0:	602a      	str	r2, [r5, #0]
 800cfb2:	461a      	mov	r2, r3
 800cfb4:	f7f5 f8ce 	bl	8002154 <_write>
 800cfb8:	1c43      	adds	r3, r0, #1
 800cfba:	d102      	bne.n	800cfc2 <_write_r+0x1e>
 800cfbc:	682b      	ldr	r3, [r5, #0]
 800cfbe:	b103      	cbz	r3, 800cfc2 <_write_r+0x1e>
 800cfc0:	6023      	str	r3, [r4, #0]
 800cfc2:	bd38      	pop	{r3, r4, r5, pc}
 800cfc4:	20002428 	.word	0x20002428

0800cfc8 <__errno>:
 800cfc8:	4b01      	ldr	r3, [pc, #4]	@ (800cfd0 <__errno+0x8>)
 800cfca:	6818      	ldr	r0, [r3, #0]
 800cfcc:	4770      	bx	lr
 800cfce:	bf00      	nop
 800cfd0:	2000027c 	.word	0x2000027c

0800cfd4 <__libc_init_array>:
 800cfd4:	b570      	push	{r4, r5, r6, lr}
 800cfd6:	4d0d      	ldr	r5, [pc, #52]	@ (800d00c <__libc_init_array+0x38>)
 800cfd8:	4c0d      	ldr	r4, [pc, #52]	@ (800d010 <__libc_init_array+0x3c>)
 800cfda:	1b64      	subs	r4, r4, r5
 800cfdc:	10a4      	asrs	r4, r4, #2
 800cfde:	2600      	movs	r6, #0
 800cfe0:	42a6      	cmp	r6, r4
 800cfe2:	d109      	bne.n	800cff8 <__libc_init_array+0x24>
 800cfe4:	4d0b      	ldr	r5, [pc, #44]	@ (800d014 <__libc_init_array+0x40>)
 800cfe6:	4c0c      	ldr	r4, [pc, #48]	@ (800d018 <__libc_init_array+0x44>)
 800cfe8:	f002 fd58 	bl	800fa9c <_init>
 800cfec:	1b64      	subs	r4, r4, r5
 800cfee:	10a4      	asrs	r4, r4, #2
 800cff0:	2600      	movs	r6, #0
 800cff2:	42a6      	cmp	r6, r4
 800cff4:	d105      	bne.n	800d002 <__libc_init_array+0x2e>
 800cff6:	bd70      	pop	{r4, r5, r6, pc}
 800cff8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cffc:	4798      	blx	r3
 800cffe:	3601      	adds	r6, #1
 800d000:	e7ee      	b.n	800cfe0 <__libc_init_array+0xc>
 800d002:	f855 3b04 	ldr.w	r3, [r5], #4
 800d006:	4798      	blx	r3
 800d008:	3601      	adds	r6, #1
 800d00a:	e7f2      	b.n	800cff2 <__libc_init_array+0x1e>
 800d00c:	0800ff58 	.word	0x0800ff58
 800d010:	0800ff58 	.word	0x0800ff58
 800d014:	0800ff58 	.word	0x0800ff58
 800d018:	0800ff5c 	.word	0x0800ff5c

0800d01c <__retarget_lock_init_recursive>:
 800d01c:	4770      	bx	lr

0800d01e <__retarget_lock_acquire_recursive>:
 800d01e:	4770      	bx	lr

0800d020 <__retarget_lock_release_recursive>:
 800d020:	4770      	bx	lr

0800d022 <memcpy>:
 800d022:	440a      	add	r2, r1
 800d024:	4291      	cmp	r1, r2
 800d026:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d02a:	d100      	bne.n	800d02e <memcpy+0xc>
 800d02c:	4770      	bx	lr
 800d02e:	b510      	push	{r4, lr}
 800d030:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d034:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d038:	4291      	cmp	r1, r2
 800d03a:	d1f9      	bne.n	800d030 <memcpy+0xe>
 800d03c:	bd10      	pop	{r4, pc}
	...

0800d040 <nan>:
 800d040:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d048 <nan+0x8>
 800d044:	4770      	bx	lr
 800d046:	bf00      	nop
 800d048:	00000000 	.word	0x00000000
 800d04c:	7ff80000 	.word	0x7ff80000

0800d050 <nanf>:
 800d050:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d058 <nanf+0x8>
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	7fc00000 	.word	0x7fc00000

0800d05c <quorem>:
 800d05c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d060:	6903      	ldr	r3, [r0, #16]
 800d062:	690c      	ldr	r4, [r1, #16]
 800d064:	42a3      	cmp	r3, r4
 800d066:	4607      	mov	r7, r0
 800d068:	db7e      	blt.n	800d168 <quorem+0x10c>
 800d06a:	3c01      	subs	r4, #1
 800d06c:	f101 0814 	add.w	r8, r1, #20
 800d070:	00a3      	lsls	r3, r4, #2
 800d072:	f100 0514 	add.w	r5, r0, #20
 800d076:	9300      	str	r3, [sp, #0]
 800d078:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d07c:	9301      	str	r3, [sp, #4]
 800d07e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d082:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d086:	3301      	adds	r3, #1
 800d088:	429a      	cmp	r2, r3
 800d08a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d08e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d092:	d32e      	bcc.n	800d0f2 <quorem+0x96>
 800d094:	f04f 0a00 	mov.w	sl, #0
 800d098:	46c4      	mov	ip, r8
 800d09a:	46ae      	mov	lr, r5
 800d09c:	46d3      	mov	fp, sl
 800d09e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d0a2:	b298      	uxth	r0, r3
 800d0a4:	fb06 a000 	mla	r0, r6, r0, sl
 800d0a8:	0c02      	lsrs	r2, r0, #16
 800d0aa:	0c1b      	lsrs	r3, r3, #16
 800d0ac:	fb06 2303 	mla	r3, r6, r3, r2
 800d0b0:	f8de 2000 	ldr.w	r2, [lr]
 800d0b4:	b280      	uxth	r0, r0
 800d0b6:	b292      	uxth	r2, r2
 800d0b8:	1a12      	subs	r2, r2, r0
 800d0ba:	445a      	add	r2, fp
 800d0bc:	f8de 0000 	ldr.w	r0, [lr]
 800d0c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d0ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d0ce:	b292      	uxth	r2, r2
 800d0d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d0d4:	45e1      	cmp	r9, ip
 800d0d6:	f84e 2b04 	str.w	r2, [lr], #4
 800d0da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d0de:	d2de      	bcs.n	800d09e <quorem+0x42>
 800d0e0:	9b00      	ldr	r3, [sp, #0]
 800d0e2:	58eb      	ldr	r3, [r5, r3]
 800d0e4:	b92b      	cbnz	r3, 800d0f2 <quorem+0x96>
 800d0e6:	9b01      	ldr	r3, [sp, #4]
 800d0e8:	3b04      	subs	r3, #4
 800d0ea:	429d      	cmp	r5, r3
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	d32f      	bcc.n	800d150 <quorem+0xf4>
 800d0f0:	613c      	str	r4, [r7, #16]
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	f001 fd10 	bl	800eb18 <__mcmp>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	db25      	blt.n	800d148 <quorem+0xec>
 800d0fc:	4629      	mov	r1, r5
 800d0fe:	2000      	movs	r0, #0
 800d100:	f858 2b04 	ldr.w	r2, [r8], #4
 800d104:	f8d1 c000 	ldr.w	ip, [r1]
 800d108:	fa1f fe82 	uxth.w	lr, r2
 800d10c:	fa1f f38c 	uxth.w	r3, ip
 800d110:	eba3 030e 	sub.w	r3, r3, lr
 800d114:	4403      	add	r3, r0
 800d116:	0c12      	lsrs	r2, r2, #16
 800d118:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d11c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d120:	b29b      	uxth	r3, r3
 800d122:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d126:	45c1      	cmp	r9, r8
 800d128:	f841 3b04 	str.w	r3, [r1], #4
 800d12c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d130:	d2e6      	bcs.n	800d100 <quorem+0xa4>
 800d132:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d136:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d13a:	b922      	cbnz	r2, 800d146 <quorem+0xea>
 800d13c:	3b04      	subs	r3, #4
 800d13e:	429d      	cmp	r5, r3
 800d140:	461a      	mov	r2, r3
 800d142:	d30b      	bcc.n	800d15c <quorem+0x100>
 800d144:	613c      	str	r4, [r7, #16]
 800d146:	3601      	adds	r6, #1
 800d148:	4630      	mov	r0, r6
 800d14a:	b003      	add	sp, #12
 800d14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d150:	6812      	ldr	r2, [r2, #0]
 800d152:	3b04      	subs	r3, #4
 800d154:	2a00      	cmp	r2, #0
 800d156:	d1cb      	bne.n	800d0f0 <quorem+0x94>
 800d158:	3c01      	subs	r4, #1
 800d15a:	e7c6      	b.n	800d0ea <quorem+0x8e>
 800d15c:	6812      	ldr	r2, [r2, #0]
 800d15e:	3b04      	subs	r3, #4
 800d160:	2a00      	cmp	r2, #0
 800d162:	d1ef      	bne.n	800d144 <quorem+0xe8>
 800d164:	3c01      	subs	r4, #1
 800d166:	e7ea      	b.n	800d13e <quorem+0xe2>
 800d168:	2000      	movs	r0, #0
 800d16a:	e7ee      	b.n	800d14a <quorem+0xee>
 800d16c:	0000      	movs	r0, r0
	...

0800d170 <_dtoa_r>:
 800d170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d174:	69c7      	ldr	r7, [r0, #28]
 800d176:	b099      	sub	sp, #100	@ 0x64
 800d178:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d17c:	ec55 4b10 	vmov	r4, r5, d0
 800d180:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d182:	9109      	str	r1, [sp, #36]	@ 0x24
 800d184:	4683      	mov	fp, r0
 800d186:	920e      	str	r2, [sp, #56]	@ 0x38
 800d188:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d18a:	b97f      	cbnz	r7, 800d1ac <_dtoa_r+0x3c>
 800d18c:	2010      	movs	r0, #16
 800d18e:	f001 f937 	bl	800e400 <malloc>
 800d192:	4602      	mov	r2, r0
 800d194:	f8cb 001c 	str.w	r0, [fp, #28]
 800d198:	b920      	cbnz	r0, 800d1a4 <_dtoa_r+0x34>
 800d19a:	4ba7      	ldr	r3, [pc, #668]	@ (800d438 <_dtoa_r+0x2c8>)
 800d19c:	21ef      	movs	r1, #239	@ 0xef
 800d19e:	48a7      	ldr	r0, [pc, #668]	@ (800d43c <_dtoa_r+0x2cc>)
 800d1a0:	f002 f95e 	bl	800f460 <__assert_func>
 800d1a4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d1a8:	6007      	str	r7, [r0, #0]
 800d1aa:	60c7      	str	r7, [r0, #12]
 800d1ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d1b0:	6819      	ldr	r1, [r3, #0]
 800d1b2:	b159      	cbz	r1, 800d1cc <_dtoa_r+0x5c>
 800d1b4:	685a      	ldr	r2, [r3, #4]
 800d1b6:	604a      	str	r2, [r1, #4]
 800d1b8:	2301      	movs	r3, #1
 800d1ba:	4093      	lsls	r3, r2
 800d1bc:	608b      	str	r3, [r1, #8]
 800d1be:	4658      	mov	r0, fp
 800d1c0:	f001 fa26 	bl	800e610 <_Bfree>
 800d1c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	601a      	str	r2, [r3, #0]
 800d1cc:	1e2b      	subs	r3, r5, #0
 800d1ce:	bfb9      	ittee	lt
 800d1d0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d1d4:	9303      	strlt	r3, [sp, #12]
 800d1d6:	2300      	movge	r3, #0
 800d1d8:	6033      	strge	r3, [r6, #0]
 800d1da:	9f03      	ldr	r7, [sp, #12]
 800d1dc:	4b98      	ldr	r3, [pc, #608]	@ (800d440 <_dtoa_r+0x2d0>)
 800d1de:	bfbc      	itt	lt
 800d1e0:	2201      	movlt	r2, #1
 800d1e2:	6032      	strlt	r2, [r6, #0]
 800d1e4:	43bb      	bics	r3, r7
 800d1e6:	d112      	bne.n	800d20e <_dtoa_r+0x9e>
 800d1e8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d1ea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d1ee:	6013      	str	r3, [r2, #0]
 800d1f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d1f4:	4323      	orrs	r3, r4
 800d1f6:	f000 854d 	beq.w	800dc94 <_dtoa_r+0xb24>
 800d1fa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d1fc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d454 <_dtoa_r+0x2e4>
 800d200:	2b00      	cmp	r3, #0
 800d202:	f000 854f 	beq.w	800dca4 <_dtoa_r+0xb34>
 800d206:	f10a 0303 	add.w	r3, sl, #3
 800d20a:	f000 bd49 	b.w	800dca0 <_dtoa_r+0xb30>
 800d20e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d212:	2200      	movs	r2, #0
 800d214:	ec51 0b17 	vmov	r0, r1, d7
 800d218:	2300      	movs	r3, #0
 800d21a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d21e:	f7f3 fc5b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d222:	4680      	mov	r8, r0
 800d224:	b158      	cbz	r0, 800d23e <_dtoa_r+0xce>
 800d226:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d228:	2301      	movs	r3, #1
 800d22a:	6013      	str	r3, [r2, #0]
 800d22c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d22e:	b113      	cbz	r3, 800d236 <_dtoa_r+0xc6>
 800d230:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d232:	4b84      	ldr	r3, [pc, #528]	@ (800d444 <_dtoa_r+0x2d4>)
 800d234:	6013      	str	r3, [r2, #0]
 800d236:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d458 <_dtoa_r+0x2e8>
 800d23a:	f000 bd33 	b.w	800dca4 <_dtoa_r+0xb34>
 800d23e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d242:	aa16      	add	r2, sp, #88	@ 0x58
 800d244:	a917      	add	r1, sp, #92	@ 0x5c
 800d246:	4658      	mov	r0, fp
 800d248:	f001 fd86 	bl	800ed58 <__d2b>
 800d24c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d250:	4681      	mov	r9, r0
 800d252:	2e00      	cmp	r6, #0
 800d254:	d077      	beq.n	800d346 <_dtoa_r+0x1d6>
 800d256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d258:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d25c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d260:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d264:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d268:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d26c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d270:	4619      	mov	r1, r3
 800d272:	2200      	movs	r2, #0
 800d274:	4b74      	ldr	r3, [pc, #464]	@ (800d448 <_dtoa_r+0x2d8>)
 800d276:	f7f3 f80f 	bl	8000298 <__aeabi_dsub>
 800d27a:	a369      	add	r3, pc, #420	@ (adr r3, 800d420 <_dtoa_r+0x2b0>)
 800d27c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d280:	f7f3 f9c2 	bl	8000608 <__aeabi_dmul>
 800d284:	a368      	add	r3, pc, #416	@ (adr r3, 800d428 <_dtoa_r+0x2b8>)
 800d286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28a:	f7f3 f807 	bl	800029c <__adddf3>
 800d28e:	4604      	mov	r4, r0
 800d290:	4630      	mov	r0, r6
 800d292:	460d      	mov	r5, r1
 800d294:	f7f3 f94e 	bl	8000534 <__aeabi_i2d>
 800d298:	a365      	add	r3, pc, #404	@ (adr r3, 800d430 <_dtoa_r+0x2c0>)
 800d29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29e:	f7f3 f9b3 	bl	8000608 <__aeabi_dmul>
 800d2a2:	4602      	mov	r2, r0
 800d2a4:	460b      	mov	r3, r1
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	4629      	mov	r1, r5
 800d2aa:	f7f2 fff7 	bl	800029c <__adddf3>
 800d2ae:	4604      	mov	r4, r0
 800d2b0:	460d      	mov	r5, r1
 800d2b2:	f7f3 fc59 	bl	8000b68 <__aeabi_d2iz>
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	4607      	mov	r7, r0
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	4620      	mov	r0, r4
 800d2be:	4629      	mov	r1, r5
 800d2c0:	f7f3 fc14 	bl	8000aec <__aeabi_dcmplt>
 800d2c4:	b140      	cbz	r0, 800d2d8 <_dtoa_r+0x168>
 800d2c6:	4638      	mov	r0, r7
 800d2c8:	f7f3 f934 	bl	8000534 <__aeabi_i2d>
 800d2cc:	4622      	mov	r2, r4
 800d2ce:	462b      	mov	r3, r5
 800d2d0:	f7f3 fc02 	bl	8000ad8 <__aeabi_dcmpeq>
 800d2d4:	b900      	cbnz	r0, 800d2d8 <_dtoa_r+0x168>
 800d2d6:	3f01      	subs	r7, #1
 800d2d8:	2f16      	cmp	r7, #22
 800d2da:	d851      	bhi.n	800d380 <_dtoa_r+0x210>
 800d2dc:	4b5b      	ldr	r3, [pc, #364]	@ (800d44c <_dtoa_r+0x2dc>)
 800d2de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d2ea:	f7f3 fbff 	bl	8000aec <__aeabi_dcmplt>
 800d2ee:	2800      	cmp	r0, #0
 800d2f0:	d048      	beq.n	800d384 <_dtoa_r+0x214>
 800d2f2:	3f01      	subs	r7, #1
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	9312      	str	r3, [sp, #72]	@ 0x48
 800d2f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d2fa:	1b9b      	subs	r3, r3, r6
 800d2fc:	1e5a      	subs	r2, r3, #1
 800d2fe:	bf44      	itt	mi
 800d300:	f1c3 0801 	rsbmi	r8, r3, #1
 800d304:	2300      	movmi	r3, #0
 800d306:	9208      	str	r2, [sp, #32]
 800d308:	bf54      	ite	pl
 800d30a:	f04f 0800 	movpl.w	r8, #0
 800d30e:	9308      	strmi	r3, [sp, #32]
 800d310:	2f00      	cmp	r7, #0
 800d312:	db39      	blt.n	800d388 <_dtoa_r+0x218>
 800d314:	9b08      	ldr	r3, [sp, #32]
 800d316:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d318:	443b      	add	r3, r7
 800d31a:	9308      	str	r3, [sp, #32]
 800d31c:	2300      	movs	r3, #0
 800d31e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d320:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d322:	2b09      	cmp	r3, #9
 800d324:	d864      	bhi.n	800d3f0 <_dtoa_r+0x280>
 800d326:	2b05      	cmp	r3, #5
 800d328:	bfc4      	itt	gt
 800d32a:	3b04      	subgt	r3, #4
 800d32c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d32e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d330:	f1a3 0302 	sub.w	r3, r3, #2
 800d334:	bfcc      	ite	gt
 800d336:	2400      	movgt	r4, #0
 800d338:	2401      	movle	r4, #1
 800d33a:	2b03      	cmp	r3, #3
 800d33c:	d863      	bhi.n	800d406 <_dtoa_r+0x296>
 800d33e:	e8df f003 	tbb	[pc, r3]
 800d342:	372a      	.short	0x372a
 800d344:	5535      	.short	0x5535
 800d346:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d34a:	441e      	add	r6, r3
 800d34c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d350:	2b20      	cmp	r3, #32
 800d352:	bfc1      	itttt	gt
 800d354:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d358:	409f      	lslgt	r7, r3
 800d35a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d35e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d362:	bfd6      	itet	le
 800d364:	f1c3 0320 	rsble	r3, r3, #32
 800d368:	ea47 0003 	orrgt.w	r0, r7, r3
 800d36c:	fa04 f003 	lslle.w	r0, r4, r3
 800d370:	f7f3 f8d0 	bl	8000514 <__aeabi_ui2d>
 800d374:	2201      	movs	r2, #1
 800d376:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d37a:	3e01      	subs	r6, #1
 800d37c:	9214      	str	r2, [sp, #80]	@ 0x50
 800d37e:	e777      	b.n	800d270 <_dtoa_r+0x100>
 800d380:	2301      	movs	r3, #1
 800d382:	e7b8      	b.n	800d2f6 <_dtoa_r+0x186>
 800d384:	9012      	str	r0, [sp, #72]	@ 0x48
 800d386:	e7b7      	b.n	800d2f8 <_dtoa_r+0x188>
 800d388:	427b      	negs	r3, r7
 800d38a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d38c:	2300      	movs	r3, #0
 800d38e:	eba8 0807 	sub.w	r8, r8, r7
 800d392:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d394:	e7c4      	b.n	800d320 <_dtoa_r+0x1b0>
 800d396:	2300      	movs	r3, #0
 800d398:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d39a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	dc35      	bgt.n	800d40c <_dtoa_r+0x29c>
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	9300      	str	r3, [sp, #0]
 800d3a4:	9307      	str	r3, [sp, #28]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800d3aa:	e00b      	b.n	800d3c4 <_dtoa_r+0x254>
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	e7f3      	b.n	800d398 <_dtoa_r+0x228>
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d3b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3b6:	18fb      	adds	r3, r7, r3
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	2b01      	cmp	r3, #1
 800d3be:	9307      	str	r3, [sp, #28]
 800d3c0:	bfb8      	it	lt
 800d3c2:	2301      	movlt	r3, #1
 800d3c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d3c8:	2100      	movs	r1, #0
 800d3ca:	2204      	movs	r2, #4
 800d3cc:	f102 0514 	add.w	r5, r2, #20
 800d3d0:	429d      	cmp	r5, r3
 800d3d2:	d91f      	bls.n	800d414 <_dtoa_r+0x2a4>
 800d3d4:	6041      	str	r1, [r0, #4]
 800d3d6:	4658      	mov	r0, fp
 800d3d8:	f001 f8da 	bl	800e590 <_Balloc>
 800d3dc:	4682      	mov	sl, r0
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d13c      	bne.n	800d45c <_dtoa_r+0x2ec>
 800d3e2:	4b1b      	ldr	r3, [pc, #108]	@ (800d450 <_dtoa_r+0x2e0>)
 800d3e4:	4602      	mov	r2, r0
 800d3e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800d3ea:	e6d8      	b.n	800d19e <_dtoa_r+0x2e>
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	e7e0      	b.n	800d3b2 <_dtoa_r+0x242>
 800d3f0:	2401      	movs	r4, #1
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d3f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	9307      	str	r3, [sp, #28]
 800d400:	2200      	movs	r2, #0
 800d402:	2312      	movs	r3, #18
 800d404:	e7d0      	b.n	800d3a8 <_dtoa_r+0x238>
 800d406:	2301      	movs	r3, #1
 800d408:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d40a:	e7f5      	b.n	800d3f8 <_dtoa_r+0x288>
 800d40c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	9307      	str	r3, [sp, #28]
 800d412:	e7d7      	b.n	800d3c4 <_dtoa_r+0x254>
 800d414:	3101      	adds	r1, #1
 800d416:	0052      	lsls	r2, r2, #1
 800d418:	e7d8      	b.n	800d3cc <_dtoa_r+0x25c>
 800d41a:	bf00      	nop
 800d41c:	f3af 8000 	nop.w
 800d420:	636f4361 	.word	0x636f4361
 800d424:	3fd287a7 	.word	0x3fd287a7
 800d428:	8b60c8b3 	.word	0x8b60c8b3
 800d42c:	3fc68a28 	.word	0x3fc68a28
 800d430:	509f79fb 	.word	0x509f79fb
 800d434:	3fd34413 	.word	0x3fd34413
 800d438:	0800fbc6 	.word	0x0800fbc6
 800d43c:	0800fbdd 	.word	0x0800fbdd
 800d440:	7ff00000 	.word	0x7ff00000
 800d444:	0800fb89 	.word	0x0800fb89
 800d448:	3ff80000 	.word	0x3ff80000
 800d44c:	0800fd38 	.word	0x0800fd38
 800d450:	0800fc35 	.word	0x0800fc35
 800d454:	0800fbc2 	.word	0x0800fbc2
 800d458:	0800fb88 	.word	0x0800fb88
 800d45c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d460:	6018      	str	r0, [r3, #0]
 800d462:	9b07      	ldr	r3, [sp, #28]
 800d464:	2b0e      	cmp	r3, #14
 800d466:	f200 80a4 	bhi.w	800d5b2 <_dtoa_r+0x442>
 800d46a:	2c00      	cmp	r4, #0
 800d46c:	f000 80a1 	beq.w	800d5b2 <_dtoa_r+0x442>
 800d470:	2f00      	cmp	r7, #0
 800d472:	dd33      	ble.n	800d4dc <_dtoa_r+0x36c>
 800d474:	4bad      	ldr	r3, [pc, #692]	@ (800d72c <_dtoa_r+0x5bc>)
 800d476:	f007 020f 	and.w	r2, r7, #15
 800d47a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d47e:	ed93 7b00 	vldr	d7, [r3]
 800d482:	05f8      	lsls	r0, r7, #23
 800d484:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d488:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d48c:	d516      	bpl.n	800d4bc <_dtoa_r+0x34c>
 800d48e:	4ba8      	ldr	r3, [pc, #672]	@ (800d730 <_dtoa_r+0x5c0>)
 800d490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d494:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d498:	f7f3 f9e0 	bl	800085c <__aeabi_ddiv>
 800d49c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4a0:	f004 040f 	and.w	r4, r4, #15
 800d4a4:	2603      	movs	r6, #3
 800d4a6:	4da2      	ldr	r5, [pc, #648]	@ (800d730 <_dtoa_r+0x5c0>)
 800d4a8:	b954      	cbnz	r4, 800d4c0 <_dtoa_r+0x350>
 800d4aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d4ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d4b2:	f7f3 f9d3 	bl	800085c <__aeabi_ddiv>
 800d4b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4ba:	e028      	b.n	800d50e <_dtoa_r+0x39e>
 800d4bc:	2602      	movs	r6, #2
 800d4be:	e7f2      	b.n	800d4a6 <_dtoa_r+0x336>
 800d4c0:	07e1      	lsls	r1, r4, #31
 800d4c2:	d508      	bpl.n	800d4d6 <_dtoa_r+0x366>
 800d4c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d4cc:	f7f3 f89c 	bl	8000608 <__aeabi_dmul>
 800d4d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4d4:	3601      	adds	r6, #1
 800d4d6:	1064      	asrs	r4, r4, #1
 800d4d8:	3508      	adds	r5, #8
 800d4da:	e7e5      	b.n	800d4a8 <_dtoa_r+0x338>
 800d4dc:	f000 80d2 	beq.w	800d684 <_dtoa_r+0x514>
 800d4e0:	427c      	negs	r4, r7
 800d4e2:	4b92      	ldr	r3, [pc, #584]	@ (800d72c <_dtoa_r+0x5bc>)
 800d4e4:	4d92      	ldr	r5, [pc, #584]	@ (800d730 <_dtoa_r+0x5c0>)
 800d4e6:	f004 020f 	and.w	r2, r4, #15
 800d4ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4f6:	f7f3 f887 	bl	8000608 <__aeabi_dmul>
 800d4fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4fe:	1124      	asrs	r4, r4, #4
 800d500:	2300      	movs	r3, #0
 800d502:	2602      	movs	r6, #2
 800d504:	2c00      	cmp	r4, #0
 800d506:	f040 80b2 	bne.w	800d66e <_dtoa_r+0x4fe>
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d1d3      	bne.n	800d4b6 <_dtoa_r+0x346>
 800d50e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d510:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d514:	2b00      	cmp	r3, #0
 800d516:	f000 80b7 	beq.w	800d688 <_dtoa_r+0x518>
 800d51a:	4b86      	ldr	r3, [pc, #536]	@ (800d734 <_dtoa_r+0x5c4>)
 800d51c:	2200      	movs	r2, #0
 800d51e:	4620      	mov	r0, r4
 800d520:	4629      	mov	r1, r5
 800d522:	f7f3 fae3 	bl	8000aec <__aeabi_dcmplt>
 800d526:	2800      	cmp	r0, #0
 800d528:	f000 80ae 	beq.w	800d688 <_dtoa_r+0x518>
 800d52c:	9b07      	ldr	r3, [sp, #28]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	f000 80aa 	beq.w	800d688 <_dtoa_r+0x518>
 800d534:	9b00      	ldr	r3, [sp, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	dd37      	ble.n	800d5aa <_dtoa_r+0x43a>
 800d53a:	1e7b      	subs	r3, r7, #1
 800d53c:	9304      	str	r3, [sp, #16]
 800d53e:	4620      	mov	r0, r4
 800d540:	4b7d      	ldr	r3, [pc, #500]	@ (800d738 <_dtoa_r+0x5c8>)
 800d542:	2200      	movs	r2, #0
 800d544:	4629      	mov	r1, r5
 800d546:	f7f3 f85f 	bl	8000608 <__aeabi_dmul>
 800d54a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d54e:	9c00      	ldr	r4, [sp, #0]
 800d550:	3601      	adds	r6, #1
 800d552:	4630      	mov	r0, r6
 800d554:	f7f2 ffee 	bl	8000534 <__aeabi_i2d>
 800d558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d55c:	f7f3 f854 	bl	8000608 <__aeabi_dmul>
 800d560:	4b76      	ldr	r3, [pc, #472]	@ (800d73c <_dtoa_r+0x5cc>)
 800d562:	2200      	movs	r2, #0
 800d564:	f7f2 fe9a 	bl	800029c <__adddf3>
 800d568:	4605      	mov	r5, r0
 800d56a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d56e:	2c00      	cmp	r4, #0
 800d570:	f040 808d 	bne.w	800d68e <_dtoa_r+0x51e>
 800d574:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d578:	4b71      	ldr	r3, [pc, #452]	@ (800d740 <_dtoa_r+0x5d0>)
 800d57a:	2200      	movs	r2, #0
 800d57c:	f7f2 fe8c 	bl	8000298 <__aeabi_dsub>
 800d580:	4602      	mov	r2, r0
 800d582:	460b      	mov	r3, r1
 800d584:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d588:	462a      	mov	r2, r5
 800d58a:	4633      	mov	r3, r6
 800d58c:	f7f3 facc 	bl	8000b28 <__aeabi_dcmpgt>
 800d590:	2800      	cmp	r0, #0
 800d592:	f040 828b 	bne.w	800daac <_dtoa_r+0x93c>
 800d596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d59a:	462a      	mov	r2, r5
 800d59c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d5a0:	f7f3 faa4 	bl	8000aec <__aeabi_dcmplt>
 800d5a4:	2800      	cmp	r0, #0
 800d5a6:	f040 8128 	bne.w	800d7fa <_dtoa_r+0x68a>
 800d5aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d5ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d5b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	f2c0 815a 	blt.w	800d86e <_dtoa_r+0x6fe>
 800d5ba:	2f0e      	cmp	r7, #14
 800d5bc:	f300 8157 	bgt.w	800d86e <_dtoa_r+0x6fe>
 800d5c0:	4b5a      	ldr	r3, [pc, #360]	@ (800d72c <_dtoa_r+0x5bc>)
 800d5c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5c6:	ed93 7b00 	vldr	d7, [r3]
 800d5ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	ed8d 7b00 	vstr	d7, [sp]
 800d5d2:	da03      	bge.n	800d5dc <_dtoa_r+0x46c>
 800d5d4:	9b07      	ldr	r3, [sp, #28]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	f340 8101 	ble.w	800d7de <_dtoa_r+0x66e>
 800d5dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d5e0:	4656      	mov	r6, sl
 800d5e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5e6:	4620      	mov	r0, r4
 800d5e8:	4629      	mov	r1, r5
 800d5ea:	f7f3 f937 	bl	800085c <__aeabi_ddiv>
 800d5ee:	f7f3 fabb 	bl	8000b68 <__aeabi_d2iz>
 800d5f2:	4680      	mov	r8, r0
 800d5f4:	f7f2 ff9e 	bl	8000534 <__aeabi_i2d>
 800d5f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5fc:	f7f3 f804 	bl	8000608 <__aeabi_dmul>
 800d600:	4602      	mov	r2, r0
 800d602:	460b      	mov	r3, r1
 800d604:	4620      	mov	r0, r4
 800d606:	4629      	mov	r1, r5
 800d608:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d60c:	f7f2 fe44 	bl	8000298 <__aeabi_dsub>
 800d610:	f806 4b01 	strb.w	r4, [r6], #1
 800d614:	9d07      	ldr	r5, [sp, #28]
 800d616:	eba6 040a 	sub.w	r4, r6, sl
 800d61a:	42a5      	cmp	r5, r4
 800d61c:	4602      	mov	r2, r0
 800d61e:	460b      	mov	r3, r1
 800d620:	f040 8117 	bne.w	800d852 <_dtoa_r+0x6e2>
 800d624:	f7f2 fe3a 	bl	800029c <__adddf3>
 800d628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d62c:	4604      	mov	r4, r0
 800d62e:	460d      	mov	r5, r1
 800d630:	f7f3 fa7a 	bl	8000b28 <__aeabi_dcmpgt>
 800d634:	2800      	cmp	r0, #0
 800d636:	f040 80f9 	bne.w	800d82c <_dtoa_r+0x6bc>
 800d63a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d63e:	4620      	mov	r0, r4
 800d640:	4629      	mov	r1, r5
 800d642:	f7f3 fa49 	bl	8000ad8 <__aeabi_dcmpeq>
 800d646:	b118      	cbz	r0, 800d650 <_dtoa_r+0x4e0>
 800d648:	f018 0f01 	tst.w	r8, #1
 800d64c:	f040 80ee 	bne.w	800d82c <_dtoa_r+0x6bc>
 800d650:	4649      	mov	r1, r9
 800d652:	4658      	mov	r0, fp
 800d654:	f000 ffdc 	bl	800e610 <_Bfree>
 800d658:	2300      	movs	r3, #0
 800d65a:	7033      	strb	r3, [r6, #0]
 800d65c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d65e:	3701      	adds	r7, #1
 800d660:	601f      	str	r7, [r3, #0]
 800d662:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d664:	2b00      	cmp	r3, #0
 800d666:	f000 831d 	beq.w	800dca4 <_dtoa_r+0xb34>
 800d66a:	601e      	str	r6, [r3, #0]
 800d66c:	e31a      	b.n	800dca4 <_dtoa_r+0xb34>
 800d66e:	07e2      	lsls	r2, r4, #31
 800d670:	d505      	bpl.n	800d67e <_dtoa_r+0x50e>
 800d672:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d676:	f7f2 ffc7 	bl	8000608 <__aeabi_dmul>
 800d67a:	3601      	adds	r6, #1
 800d67c:	2301      	movs	r3, #1
 800d67e:	1064      	asrs	r4, r4, #1
 800d680:	3508      	adds	r5, #8
 800d682:	e73f      	b.n	800d504 <_dtoa_r+0x394>
 800d684:	2602      	movs	r6, #2
 800d686:	e742      	b.n	800d50e <_dtoa_r+0x39e>
 800d688:	9c07      	ldr	r4, [sp, #28]
 800d68a:	9704      	str	r7, [sp, #16]
 800d68c:	e761      	b.n	800d552 <_dtoa_r+0x3e2>
 800d68e:	4b27      	ldr	r3, [pc, #156]	@ (800d72c <_dtoa_r+0x5bc>)
 800d690:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d692:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d696:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d69a:	4454      	add	r4, sl
 800d69c:	2900      	cmp	r1, #0
 800d69e:	d053      	beq.n	800d748 <_dtoa_r+0x5d8>
 800d6a0:	4928      	ldr	r1, [pc, #160]	@ (800d744 <_dtoa_r+0x5d4>)
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	f7f3 f8da 	bl	800085c <__aeabi_ddiv>
 800d6a8:	4633      	mov	r3, r6
 800d6aa:	462a      	mov	r2, r5
 800d6ac:	f7f2 fdf4 	bl	8000298 <__aeabi_dsub>
 800d6b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d6b4:	4656      	mov	r6, sl
 800d6b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6ba:	f7f3 fa55 	bl	8000b68 <__aeabi_d2iz>
 800d6be:	4605      	mov	r5, r0
 800d6c0:	f7f2 ff38 	bl	8000534 <__aeabi_i2d>
 800d6c4:	4602      	mov	r2, r0
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d6cc:	f7f2 fde4 	bl	8000298 <__aeabi_dsub>
 800d6d0:	3530      	adds	r5, #48	@ 0x30
 800d6d2:	4602      	mov	r2, r0
 800d6d4:	460b      	mov	r3, r1
 800d6d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d6da:	f806 5b01 	strb.w	r5, [r6], #1
 800d6de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d6e2:	f7f3 fa03 	bl	8000aec <__aeabi_dcmplt>
 800d6e6:	2800      	cmp	r0, #0
 800d6e8:	d171      	bne.n	800d7ce <_dtoa_r+0x65e>
 800d6ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6ee:	4911      	ldr	r1, [pc, #68]	@ (800d734 <_dtoa_r+0x5c4>)
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	f7f2 fdd1 	bl	8000298 <__aeabi_dsub>
 800d6f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d6fa:	f7f3 f9f7 	bl	8000aec <__aeabi_dcmplt>
 800d6fe:	2800      	cmp	r0, #0
 800d700:	f040 8095 	bne.w	800d82e <_dtoa_r+0x6be>
 800d704:	42a6      	cmp	r6, r4
 800d706:	f43f af50 	beq.w	800d5aa <_dtoa_r+0x43a>
 800d70a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d70e:	4b0a      	ldr	r3, [pc, #40]	@ (800d738 <_dtoa_r+0x5c8>)
 800d710:	2200      	movs	r2, #0
 800d712:	f7f2 ff79 	bl	8000608 <__aeabi_dmul>
 800d716:	4b08      	ldr	r3, [pc, #32]	@ (800d738 <_dtoa_r+0x5c8>)
 800d718:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d71c:	2200      	movs	r2, #0
 800d71e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d722:	f7f2 ff71 	bl	8000608 <__aeabi_dmul>
 800d726:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d72a:	e7c4      	b.n	800d6b6 <_dtoa_r+0x546>
 800d72c:	0800fd38 	.word	0x0800fd38
 800d730:	0800fd10 	.word	0x0800fd10
 800d734:	3ff00000 	.word	0x3ff00000
 800d738:	40240000 	.word	0x40240000
 800d73c:	401c0000 	.word	0x401c0000
 800d740:	40140000 	.word	0x40140000
 800d744:	3fe00000 	.word	0x3fe00000
 800d748:	4631      	mov	r1, r6
 800d74a:	4628      	mov	r0, r5
 800d74c:	f7f2 ff5c 	bl	8000608 <__aeabi_dmul>
 800d750:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d754:	9415      	str	r4, [sp, #84]	@ 0x54
 800d756:	4656      	mov	r6, sl
 800d758:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d75c:	f7f3 fa04 	bl	8000b68 <__aeabi_d2iz>
 800d760:	4605      	mov	r5, r0
 800d762:	f7f2 fee7 	bl	8000534 <__aeabi_i2d>
 800d766:	4602      	mov	r2, r0
 800d768:	460b      	mov	r3, r1
 800d76a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d76e:	f7f2 fd93 	bl	8000298 <__aeabi_dsub>
 800d772:	3530      	adds	r5, #48	@ 0x30
 800d774:	f806 5b01 	strb.w	r5, [r6], #1
 800d778:	4602      	mov	r2, r0
 800d77a:	460b      	mov	r3, r1
 800d77c:	42a6      	cmp	r6, r4
 800d77e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d782:	f04f 0200 	mov.w	r2, #0
 800d786:	d124      	bne.n	800d7d2 <_dtoa_r+0x662>
 800d788:	4bac      	ldr	r3, [pc, #688]	@ (800da3c <_dtoa_r+0x8cc>)
 800d78a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d78e:	f7f2 fd85 	bl	800029c <__adddf3>
 800d792:	4602      	mov	r2, r0
 800d794:	460b      	mov	r3, r1
 800d796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d79a:	f7f3 f9c5 	bl	8000b28 <__aeabi_dcmpgt>
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	d145      	bne.n	800d82e <_dtoa_r+0x6be>
 800d7a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d7a6:	49a5      	ldr	r1, [pc, #660]	@ (800da3c <_dtoa_r+0x8cc>)
 800d7a8:	2000      	movs	r0, #0
 800d7aa:	f7f2 fd75 	bl	8000298 <__aeabi_dsub>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
 800d7b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7b6:	f7f3 f999 	bl	8000aec <__aeabi_dcmplt>
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	f43f aef5 	beq.w	800d5aa <_dtoa_r+0x43a>
 800d7c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d7c2:	1e73      	subs	r3, r6, #1
 800d7c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d7c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d7ca:	2b30      	cmp	r3, #48	@ 0x30
 800d7cc:	d0f8      	beq.n	800d7c0 <_dtoa_r+0x650>
 800d7ce:	9f04      	ldr	r7, [sp, #16]
 800d7d0:	e73e      	b.n	800d650 <_dtoa_r+0x4e0>
 800d7d2:	4b9b      	ldr	r3, [pc, #620]	@ (800da40 <_dtoa_r+0x8d0>)
 800d7d4:	f7f2 ff18 	bl	8000608 <__aeabi_dmul>
 800d7d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7dc:	e7bc      	b.n	800d758 <_dtoa_r+0x5e8>
 800d7de:	d10c      	bne.n	800d7fa <_dtoa_r+0x68a>
 800d7e0:	4b98      	ldr	r3, [pc, #608]	@ (800da44 <_dtoa_r+0x8d4>)
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7e8:	f7f2 ff0e 	bl	8000608 <__aeabi_dmul>
 800d7ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7f0:	f7f3 f990 	bl	8000b14 <__aeabi_dcmpge>
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	f000 8157 	beq.w	800daa8 <_dtoa_r+0x938>
 800d7fa:	2400      	movs	r4, #0
 800d7fc:	4625      	mov	r5, r4
 800d7fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d800:	43db      	mvns	r3, r3
 800d802:	9304      	str	r3, [sp, #16]
 800d804:	4656      	mov	r6, sl
 800d806:	2700      	movs	r7, #0
 800d808:	4621      	mov	r1, r4
 800d80a:	4658      	mov	r0, fp
 800d80c:	f000 ff00 	bl	800e610 <_Bfree>
 800d810:	2d00      	cmp	r5, #0
 800d812:	d0dc      	beq.n	800d7ce <_dtoa_r+0x65e>
 800d814:	b12f      	cbz	r7, 800d822 <_dtoa_r+0x6b2>
 800d816:	42af      	cmp	r7, r5
 800d818:	d003      	beq.n	800d822 <_dtoa_r+0x6b2>
 800d81a:	4639      	mov	r1, r7
 800d81c:	4658      	mov	r0, fp
 800d81e:	f000 fef7 	bl	800e610 <_Bfree>
 800d822:	4629      	mov	r1, r5
 800d824:	4658      	mov	r0, fp
 800d826:	f000 fef3 	bl	800e610 <_Bfree>
 800d82a:	e7d0      	b.n	800d7ce <_dtoa_r+0x65e>
 800d82c:	9704      	str	r7, [sp, #16]
 800d82e:	4633      	mov	r3, r6
 800d830:	461e      	mov	r6, r3
 800d832:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d836:	2a39      	cmp	r2, #57	@ 0x39
 800d838:	d107      	bne.n	800d84a <_dtoa_r+0x6da>
 800d83a:	459a      	cmp	sl, r3
 800d83c:	d1f8      	bne.n	800d830 <_dtoa_r+0x6c0>
 800d83e:	9a04      	ldr	r2, [sp, #16]
 800d840:	3201      	adds	r2, #1
 800d842:	9204      	str	r2, [sp, #16]
 800d844:	2230      	movs	r2, #48	@ 0x30
 800d846:	f88a 2000 	strb.w	r2, [sl]
 800d84a:	781a      	ldrb	r2, [r3, #0]
 800d84c:	3201      	adds	r2, #1
 800d84e:	701a      	strb	r2, [r3, #0]
 800d850:	e7bd      	b.n	800d7ce <_dtoa_r+0x65e>
 800d852:	4b7b      	ldr	r3, [pc, #492]	@ (800da40 <_dtoa_r+0x8d0>)
 800d854:	2200      	movs	r2, #0
 800d856:	f7f2 fed7 	bl	8000608 <__aeabi_dmul>
 800d85a:	2200      	movs	r2, #0
 800d85c:	2300      	movs	r3, #0
 800d85e:	4604      	mov	r4, r0
 800d860:	460d      	mov	r5, r1
 800d862:	f7f3 f939 	bl	8000ad8 <__aeabi_dcmpeq>
 800d866:	2800      	cmp	r0, #0
 800d868:	f43f aebb 	beq.w	800d5e2 <_dtoa_r+0x472>
 800d86c:	e6f0      	b.n	800d650 <_dtoa_r+0x4e0>
 800d86e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d870:	2a00      	cmp	r2, #0
 800d872:	f000 80db 	beq.w	800da2c <_dtoa_r+0x8bc>
 800d876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d878:	2a01      	cmp	r2, #1
 800d87a:	f300 80bf 	bgt.w	800d9fc <_dtoa_r+0x88c>
 800d87e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d880:	2a00      	cmp	r2, #0
 800d882:	f000 80b7 	beq.w	800d9f4 <_dtoa_r+0x884>
 800d886:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d88a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d88c:	4646      	mov	r6, r8
 800d88e:	9a08      	ldr	r2, [sp, #32]
 800d890:	2101      	movs	r1, #1
 800d892:	441a      	add	r2, r3
 800d894:	4658      	mov	r0, fp
 800d896:	4498      	add	r8, r3
 800d898:	9208      	str	r2, [sp, #32]
 800d89a:	f000 ffb7 	bl	800e80c <__i2b>
 800d89e:	4605      	mov	r5, r0
 800d8a0:	b15e      	cbz	r6, 800d8ba <_dtoa_r+0x74a>
 800d8a2:	9b08      	ldr	r3, [sp, #32]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	dd08      	ble.n	800d8ba <_dtoa_r+0x74a>
 800d8a8:	42b3      	cmp	r3, r6
 800d8aa:	9a08      	ldr	r2, [sp, #32]
 800d8ac:	bfa8      	it	ge
 800d8ae:	4633      	movge	r3, r6
 800d8b0:	eba8 0803 	sub.w	r8, r8, r3
 800d8b4:	1af6      	subs	r6, r6, r3
 800d8b6:	1ad3      	subs	r3, r2, r3
 800d8b8:	9308      	str	r3, [sp, #32]
 800d8ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8bc:	b1f3      	cbz	r3, 800d8fc <_dtoa_r+0x78c>
 800d8be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f000 80b7 	beq.w	800da34 <_dtoa_r+0x8c4>
 800d8c6:	b18c      	cbz	r4, 800d8ec <_dtoa_r+0x77c>
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	4622      	mov	r2, r4
 800d8cc:	4658      	mov	r0, fp
 800d8ce:	f001 f85d 	bl	800e98c <__pow5mult>
 800d8d2:	464a      	mov	r2, r9
 800d8d4:	4601      	mov	r1, r0
 800d8d6:	4605      	mov	r5, r0
 800d8d8:	4658      	mov	r0, fp
 800d8da:	f000 ffad 	bl	800e838 <__multiply>
 800d8de:	4649      	mov	r1, r9
 800d8e0:	9004      	str	r0, [sp, #16]
 800d8e2:	4658      	mov	r0, fp
 800d8e4:	f000 fe94 	bl	800e610 <_Bfree>
 800d8e8:	9b04      	ldr	r3, [sp, #16]
 800d8ea:	4699      	mov	r9, r3
 800d8ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8ee:	1b1a      	subs	r2, r3, r4
 800d8f0:	d004      	beq.n	800d8fc <_dtoa_r+0x78c>
 800d8f2:	4649      	mov	r1, r9
 800d8f4:	4658      	mov	r0, fp
 800d8f6:	f001 f849 	bl	800e98c <__pow5mult>
 800d8fa:	4681      	mov	r9, r0
 800d8fc:	2101      	movs	r1, #1
 800d8fe:	4658      	mov	r0, fp
 800d900:	f000 ff84 	bl	800e80c <__i2b>
 800d904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d906:	4604      	mov	r4, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	f000 81cf 	beq.w	800dcac <_dtoa_r+0xb3c>
 800d90e:	461a      	mov	r2, r3
 800d910:	4601      	mov	r1, r0
 800d912:	4658      	mov	r0, fp
 800d914:	f001 f83a 	bl	800e98c <__pow5mult>
 800d918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	4604      	mov	r4, r0
 800d91e:	f300 8095 	bgt.w	800da4c <_dtoa_r+0x8dc>
 800d922:	9b02      	ldr	r3, [sp, #8]
 800d924:	2b00      	cmp	r3, #0
 800d926:	f040 8087 	bne.w	800da38 <_dtoa_r+0x8c8>
 800d92a:	9b03      	ldr	r3, [sp, #12]
 800d92c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d930:	2b00      	cmp	r3, #0
 800d932:	f040 8089 	bne.w	800da48 <_dtoa_r+0x8d8>
 800d936:	9b03      	ldr	r3, [sp, #12]
 800d938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d93c:	0d1b      	lsrs	r3, r3, #20
 800d93e:	051b      	lsls	r3, r3, #20
 800d940:	b12b      	cbz	r3, 800d94e <_dtoa_r+0x7de>
 800d942:	9b08      	ldr	r3, [sp, #32]
 800d944:	3301      	adds	r3, #1
 800d946:	9308      	str	r3, [sp, #32]
 800d948:	f108 0801 	add.w	r8, r8, #1
 800d94c:	2301      	movs	r3, #1
 800d94e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d952:	2b00      	cmp	r3, #0
 800d954:	f000 81b0 	beq.w	800dcb8 <_dtoa_r+0xb48>
 800d958:	6923      	ldr	r3, [r4, #16]
 800d95a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d95e:	6918      	ldr	r0, [r3, #16]
 800d960:	f000 ff08 	bl	800e774 <__hi0bits>
 800d964:	f1c0 0020 	rsb	r0, r0, #32
 800d968:	9b08      	ldr	r3, [sp, #32]
 800d96a:	4418      	add	r0, r3
 800d96c:	f010 001f 	ands.w	r0, r0, #31
 800d970:	d077      	beq.n	800da62 <_dtoa_r+0x8f2>
 800d972:	f1c0 0320 	rsb	r3, r0, #32
 800d976:	2b04      	cmp	r3, #4
 800d978:	dd6b      	ble.n	800da52 <_dtoa_r+0x8e2>
 800d97a:	9b08      	ldr	r3, [sp, #32]
 800d97c:	f1c0 001c 	rsb	r0, r0, #28
 800d980:	4403      	add	r3, r0
 800d982:	4480      	add	r8, r0
 800d984:	4406      	add	r6, r0
 800d986:	9308      	str	r3, [sp, #32]
 800d988:	f1b8 0f00 	cmp.w	r8, #0
 800d98c:	dd05      	ble.n	800d99a <_dtoa_r+0x82a>
 800d98e:	4649      	mov	r1, r9
 800d990:	4642      	mov	r2, r8
 800d992:	4658      	mov	r0, fp
 800d994:	f001 f854 	bl	800ea40 <__lshift>
 800d998:	4681      	mov	r9, r0
 800d99a:	9b08      	ldr	r3, [sp, #32]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	dd05      	ble.n	800d9ac <_dtoa_r+0x83c>
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	4658      	mov	r0, fp
 800d9a6:	f001 f84b 	bl	800ea40 <__lshift>
 800d9aa:	4604      	mov	r4, r0
 800d9ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d059      	beq.n	800da66 <_dtoa_r+0x8f6>
 800d9b2:	4621      	mov	r1, r4
 800d9b4:	4648      	mov	r0, r9
 800d9b6:	f001 f8af 	bl	800eb18 <__mcmp>
 800d9ba:	2800      	cmp	r0, #0
 800d9bc:	da53      	bge.n	800da66 <_dtoa_r+0x8f6>
 800d9be:	1e7b      	subs	r3, r7, #1
 800d9c0:	9304      	str	r3, [sp, #16]
 800d9c2:	4649      	mov	r1, r9
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	220a      	movs	r2, #10
 800d9c8:	4658      	mov	r0, fp
 800d9ca:	f000 fe43 	bl	800e654 <__multadd>
 800d9ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9d0:	4681      	mov	r9, r0
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	f000 8172 	beq.w	800dcbc <_dtoa_r+0xb4c>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	4629      	mov	r1, r5
 800d9dc:	220a      	movs	r2, #10
 800d9de:	4658      	mov	r0, fp
 800d9e0:	f000 fe38 	bl	800e654 <__multadd>
 800d9e4:	9b00      	ldr	r3, [sp, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	4605      	mov	r5, r0
 800d9ea:	dc67      	bgt.n	800dabc <_dtoa_r+0x94c>
 800d9ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9ee:	2b02      	cmp	r3, #2
 800d9f0:	dc41      	bgt.n	800da76 <_dtoa_r+0x906>
 800d9f2:	e063      	b.n	800dabc <_dtoa_r+0x94c>
 800d9f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d9f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d9fa:	e746      	b.n	800d88a <_dtoa_r+0x71a>
 800d9fc:	9b07      	ldr	r3, [sp, #28]
 800d9fe:	1e5c      	subs	r4, r3, #1
 800da00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da02:	42a3      	cmp	r3, r4
 800da04:	bfbf      	itttt	lt
 800da06:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800da08:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800da0a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800da0c:	1ae3      	sublt	r3, r4, r3
 800da0e:	bfb4      	ite	lt
 800da10:	18d2      	addlt	r2, r2, r3
 800da12:	1b1c      	subge	r4, r3, r4
 800da14:	9b07      	ldr	r3, [sp, #28]
 800da16:	bfbc      	itt	lt
 800da18:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800da1a:	2400      	movlt	r4, #0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	bfb5      	itete	lt
 800da20:	eba8 0603 	sublt.w	r6, r8, r3
 800da24:	9b07      	ldrge	r3, [sp, #28]
 800da26:	2300      	movlt	r3, #0
 800da28:	4646      	movge	r6, r8
 800da2a:	e730      	b.n	800d88e <_dtoa_r+0x71e>
 800da2c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800da2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800da30:	4646      	mov	r6, r8
 800da32:	e735      	b.n	800d8a0 <_dtoa_r+0x730>
 800da34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da36:	e75c      	b.n	800d8f2 <_dtoa_r+0x782>
 800da38:	2300      	movs	r3, #0
 800da3a:	e788      	b.n	800d94e <_dtoa_r+0x7de>
 800da3c:	3fe00000 	.word	0x3fe00000
 800da40:	40240000 	.word	0x40240000
 800da44:	40140000 	.word	0x40140000
 800da48:	9b02      	ldr	r3, [sp, #8]
 800da4a:	e780      	b.n	800d94e <_dtoa_r+0x7de>
 800da4c:	2300      	movs	r3, #0
 800da4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800da50:	e782      	b.n	800d958 <_dtoa_r+0x7e8>
 800da52:	d099      	beq.n	800d988 <_dtoa_r+0x818>
 800da54:	9a08      	ldr	r2, [sp, #32]
 800da56:	331c      	adds	r3, #28
 800da58:	441a      	add	r2, r3
 800da5a:	4498      	add	r8, r3
 800da5c:	441e      	add	r6, r3
 800da5e:	9208      	str	r2, [sp, #32]
 800da60:	e792      	b.n	800d988 <_dtoa_r+0x818>
 800da62:	4603      	mov	r3, r0
 800da64:	e7f6      	b.n	800da54 <_dtoa_r+0x8e4>
 800da66:	9b07      	ldr	r3, [sp, #28]
 800da68:	9704      	str	r7, [sp, #16]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	dc20      	bgt.n	800dab0 <_dtoa_r+0x940>
 800da6e:	9300      	str	r3, [sp, #0]
 800da70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da72:	2b02      	cmp	r3, #2
 800da74:	dd1e      	ble.n	800dab4 <_dtoa_r+0x944>
 800da76:	9b00      	ldr	r3, [sp, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f47f aec0 	bne.w	800d7fe <_dtoa_r+0x68e>
 800da7e:	4621      	mov	r1, r4
 800da80:	2205      	movs	r2, #5
 800da82:	4658      	mov	r0, fp
 800da84:	f000 fde6 	bl	800e654 <__multadd>
 800da88:	4601      	mov	r1, r0
 800da8a:	4604      	mov	r4, r0
 800da8c:	4648      	mov	r0, r9
 800da8e:	f001 f843 	bl	800eb18 <__mcmp>
 800da92:	2800      	cmp	r0, #0
 800da94:	f77f aeb3 	ble.w	800d7fe <_dtoa_r+0x68e>
 800da98:	4656      	mov	r6, sl
 800da9a:	2331      	movs	r3, #49	@ 0x31
 800da9c:	f806 3b01 	strb.w	r3, [r6], #1
 800daa0:	9b04      	ldr	r3, [sp, #16]
 800daa2:	3301      	adds	r3, #1
 800daa4:	9304      	str	r3, [sp, #16]
 800daa6:	e6ae      	b.n	800d806 <_dtoa_r+0x696>
 800daa8:	9c07      	ldr	r4, [sp, #28]
 800daaa:	9704      	str	r7, [sp, #16]
 800daac:	4625      	mov	r5, r4
 800daae:	e7f3      	b.n	800da98 <_dtoa_r+0x928>
 800dab0:	9b07      	ldr	r3, [sp, #28]
 800dab2:	9300      	str	r3, [sp, #0]
 800dab4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f000 8104 	beq.w	800dcc4 <_dtoa_r+0xb54>
 800dabc:	2e00      	cmp	r6, #0
 800dabe:	dd05      	ble.n	800dacc <_dtoa_r+0x95c>
 800dac0:	4629      	mov	r1, r5
 800dac2:	4632      	mov	r2, r6
 800dac4:	4658      	mov	r0, fp
 800dac6:	f000 ffbb 	bl	800ea40 <__lshift>
 800daca:	4605      	mov	r5, r0
 800dacc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d05a      	beq.n	800db88 <_dtoa_r+0xa18>
 800dad2:	6869      	ldr	r1, [r5, #4]
 800dad4:	4658      	mov	r0, fp
 800dad6:	f000 fd5b 	bl	800e590 <_Balloc>
 800dada:	4606      	mov	r6, r0
 800dadc:	b928      	cbnz	r0, 800daea <_dtoa_r+0x97a>
 800dade:	4b84      	ldr	r3, [pc, #528]	@ (800dcf0 <_dtoa_r+0xb80>)
 800dae0:	4602      	mov	r2, r0
 800dae2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800dae6:	f7ff bb5a 	b.w	800d19e <_dtoa_r+0x2e>
 800daea:	692a      	ldr	r2, [r5, #16]
 800daec:	3202      	adds	r2, #2
 800daee:	0092      	lsls	r2, r2, #2
 800daf0:	f105 010c 	add.w	r1, r5, #12
 800daf4:	300c      	adds	r0, #12
 800daf6:	f7ff fa94 	bl	800d022 <memcpy>
 800dafa:	2201      	movs	r2, #1
 800dafc:	4631      	mov	r1, r6
 800dafe:	4658      	mov	r0, fp
 800db00:	f000 ff9e 	bl	800ea40 <__lshift>
 800db04:	f10a 0301 	add.w	r3, sl, #1
 800db08:	9307      	str	r3, [sp, #28]
 800db0a:	9b00      	ldr	r3, [sp, #0]
 800db0c:	4453      	add	r3, sl
 800db0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800db10:	9b02      	ldr	r3, [sp, #8]
 800db12:	f003 0301 	and.w	r3, r3, #1
 800db16:	462f      	mov	r7, r5
 800db18:	930a      	str	r3, [sp, #40]	@ 0x28
 800db1a:	4605      	mov	r5, r0
 800db1c:	9b07      	ldr	r3, [sp, #28]
 800db1e:	4621      	mov	r1, r4
 800db20:	3b01      	subs	r3, #1
 800db22:	4648      	mov	r0, r9
 800db24:	9300      	str	r3, [sp, #0]
 800db26:	f7ff fa99 	bl	800d05c <quorem>
 800db2a:	4639      	mov	r1, r7
 800db2c:	9002      	str	r0, [sp, #8]
 800db2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800db32:	4648      	mov	r0, r9
 800db34:	f000 fff0 	bl	800eb18 <__mcmp>
 800db38:	462a      	mov	r2, r5
 800db3a:	9008      	str	r0, [sp, #32]
 800db3c:	4621      	mov	r1, r4
 800db3e:	4658      	mov	r0, fp
 800db40:	f001 f806 	bl	800eb50 <__mdiff>
 800db44:	68c2      	ldr	r2, [r0, #12]
 800db46:	4606      	mov	r6, r0
 800db48:	bb02      	cbnz	r2, 800db8c <_dtoa_r+0xa1c>
 800db4a:	4601      	mov	r1, r0
 800db4c:	4648      	mov	r0, r9
 800db4e:	f000 ffe3 	bl	800eb18 <__mcmp>
 800db52:	4602      	mov	r2, r0
 800db54:	4631      	mov	r1, r6
 800db56:	4658      	mov	r0, fp
 800db58:	920e      	str	r2, [sp, #56]	@ 0x38
 800db5a:	f000 fd59 	bl	800e610 <_Bfree>
 800db5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db60:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db62:	9e07      	ldr	r6, [sp, #28]
 800db64:	ea43 0102 	orr.w	r1, r3, r2
 800db68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db6a:	4319      	orrs	r1, r3
 800db6c:	d110      	bne.n	800db90 <_dtoa_r+0xa20>
 800db6e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800db72:	d029      	beq.n	800dbc8 <_dtoa_r+0xa58>
 800db74:	9b08      	ldr	r3, [sp, #32]
 800db76:	2b00      	cmp	r3, #0
 800db78:	dd02      	ble.n	800db80 <_dtoa_r+0xa10>
 800db7a:	9b02      	ldr	r3, [sp, #8]
 800db7c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800db80:	9b00      	ldr	r3, [sp, #0]
 800db82:	f883 8000 	strb.w	r8, [r3]
 800db86:	e63f      	b.n	800d808 <_dtoa_r+0x698>
 800db88:	4628      	mov	r0, r5
 800db8a:	e7bb      	b.n	800db04 <_dtoa_r+0x994>
 800db8c:	2201      	movs	r2, #1
 800db8e:	e7e1      	b.n	800db54 <_dtoa_r+0x9e4>
 800db90:	9b08      	ldr	r3, [sp, #32]
 800db92:	2b00      	cmp	r3, #0
 800db94:	db04      	blt.n	800dba0 <_dtoa_r+0xa30>
 800db96:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800db98:	430b      	orrs	r3, r1
 800db9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800db9c:	430b      	orrs	r3, r1
 800db9e:	d120      	bne.n	800dbe2 <_dtoa_r+0xa72>
 800dba0:	2a00      	cmp	r2, #0
 800dba2:	dded      	ble.n	800db80 <_dtoa_r+0xa10>
 800dba4:	4649      	mov	r1, r9
 800dba6:	2201      	movs	r2, #1
 800dba8:	4658      	mov	r0, fp
 800dbaa:	f000 ff49 	bl	800ea40 <__lshift>
 800dbae:	4621      	mov	r1, r4
 800dbb0:	4681      	mov	r9, r0
 800dbb2:	f000 ffb1 	bl	800eb18 <__mcmp>
 800dbb6:	2800      	cmp	r0, #0
 800dbb8:	dc03      	bgt.n	800dbc2 <_dtoa_r+0xa52>
 800dbba:	d1e1      	bne.n	800db80 <_dtoa_r+0xa10>
 800dbbc:	f018 0f01 	tst.w	r8, #1
 800dbc0:	d0de      	beq.n	800db80 <_dtoa_r+0xa10>
 800dbc2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dbc6:	d1d8      	bne.n	800db7a <_dtoa_r+0xa0a>
 800dbc8:	9a00      	ldr	r2, [sp, #0]
 800dbca:	2339      	movs	r3, #57	@ 0x39
 800dbcc:	7013      	strb	r3, [r2, #0]
 800dbce:	4633      	mov	r3, r6
 800dbd0:	461e      	mov	r6, r3
 800dbd2:	3b01      	subs	r3, #1
 800dbd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800dbd8:	2a39      	cmp	r2, #57	@ 0x39
 800dbda:	d052      	beq.n	800dc82 <_dtoa_r+0xb12>
 800dbdc:	3201      	adds	r2, #1
 800dbde:	701a      	strb	r2, [r3, #0]
 800dbe0:	e612      	b.n	800d808 <_dtoa_r+0x698>
 800dbe2:	2a00      	cmp	r2, #0
 800dbe4:	dd07      	ble.n	800dbf6 <_dtoa_r+0xa86>
 800dbe6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dbea:	d0ed      	beq.n	800dbc8 <_dtoa_r+0xa58>
 800dbec:	9a00      	ldr	r2, [sp, #0]
 800dbee:	f108 0301 	add.w	r3, r8, #1
 800dbf2:	7013      	strb	r3, [r2, #0]
 800dbf4:	e608      	b.n	800d808 <_dtoa_r+0x698>
 800dbf6:	9b07      	ldr	r3, [sp, #28]
 800dbf8:	9a07      	ldr	r2, [sp, #28]
 800dbfa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800dbfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dc00:	4293      	cmp	r3, r2
 800dc02:	d028      	beq.n	800dc56 <_dtoa_r+0xae6>
 800dc04:	4649      	mov	r1, r9
 800dc06:	2300      	movs	r3, #0
 800dc08:	220a      	movs	r2, #10
 800dc0a:	4658      	mov	r0, fp
 800dc0c:	f000 fd22 	bl	800e654 <__multadd>
 800dc10:	42af      	cmp	r7, r5
 800dc12:	4681      	mov	r9, r0
 800dc14:	f04f 0300 	mov.w	r3, #0
 800dc18:	f04f 020a 	mov.w	r2, #10
 800dc1c:	4639      	mov	r1, r7
 800dc1e:	4658      	mov	r0, fp
 800dc20:	d107      	bne.n	800dc32 <_dtoa_r+0xac2>
 800dc22:	f000 fd17 	bl	800e654 <__multadd>
 800dc26:	4607      	mov	r7, r0
 800dc28:	4605      	mov	r5, r0
 800dc2a:	9b07      	ldr	r3, [sp, #28]
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	9307      	str	r3, [sp, #28]
 800dc30:	e774      	b.n	800db1c <_dtoa_r+0x9ac>
 800dc32:	f000 fd0f 	bl	800e654 <__multadd>
 800dc36:	4629      	mov	r1, r5
 800dc38:	4607      	mov	r7, r0
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	220a      	movs	r2, #10
 800dc3e:	4658      	mov	r0, fp
 800dc40:	f000 fd08 	bl	800e654 <__multadd>
 800dc44:	4605      	mov	r5, r0
 800dc46:	e7f0      	b.n	800dc2a <_dtoa_r+0xaba>
 800dc48:	9b00      	ldr	r3, [sp, #0]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	bfcc      	ite	gt
 800dc4e:	461e      	movgt	r6, r3
 800dc50:	2601      	movle	r6, #1
 800dc52:	4456      	add	r6, sl
 800dc54:	2700      	movs	r7, #0
 800dc56:	4649      	mov	r1, r9
 800dc58:	2201      	movs	r2, #1
 800dc5a:	4658      	mov	r0, fp
 800dc5c:	f000 fef0 	bl	800ea40 <__lshift>
 800dc60:	4621      	mov	r1, r4
 800dc62:	4681      	mov	r9, r0
 800dc64:	f000 ff58 	bl	800eb18 <__mcmp>
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	dcb0      	bgt.n	800dbce <_dtoa_r+0xa5e>
 800dc6c:	d102      	bne.n	800dc74 <_dtoa_r+0xb04>
 800dc6e:	f018 0f01 	tst.w	r8, #1
 800dc72:	d1ac      	bne.n	800dbce <_dtoa_r+0xa5e>
 800dc74:	4633      	mov	r3, r6
 800dc76:	461e      	mov	r6, r3
 800dc78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dc7c:	2a30      	cmp	r2, #48	@ 0x30
 800dc7e:	d0fa      	beq.n	800dc76 <_dtoa_r+0xb06>
 800dc80:	e5c2      	b.n	800d808 <_dtoa_r+0x698>
 800dc82:	459a      	cmp	sl, r3
 800dc84:	d1a4      	bne.n	800dbd0 <_dtoa_r+0xa60>
 800dc86:	9b04      	ldr	r3, [sp, #16]
 800dc88:	3301      	adds	r3, #1
 800dc8a:	9304      	str	r3, [sp, #16]
 800dc8c:	2331      	movs	r3, #49	@ 0x31
 800dc8e:	f88a 3000 	strb.w	r3, [sl]
 800dc92:	e5b9      	b.n	800d808 <_dtoa_r+0x698>
 800dc94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dc96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800dcf4 <_dtoa_r+0xb84>
 800dc9a:	b11b      	cbz	r3, 800dca4 <_dtoa_r+0xb34>
 800dc9c:	f10a 0308 	add.w	r3, sl, #8
 800dca0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dca2:	6013      	str	r3, [r2, #0]
 800dca4:	4650      	mov	r0, sl
 800dca6:	b019      	add	sp, #100	@ 0x64
 800dca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	f77f ae37 	ble.w	800d922 <_dtoa_r+0x7b2>
 800dcb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcb6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcb8:	2001      	movs	r0, #1
 800dcba:	e655      	b.n	800d968 <_dtoa_r+0x7f8>
 800dcbc:	9b00      	ldr	r3, [sp, #0]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	f77f aed6 	ble.w	800da70 <_dtoa_r+0x900>
 800dcc4:	4656      	mov	r6, sl
 800dcc6:	4621      	mov	r1, r4
 800dcc8:	4648      	mov	r0, r9
 800dcca:	f7ff f9c7 	bl	800d05c <quorem>
 800dcce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dcd2:	f806 8b01 	strb.w	r8, [r6], #1
 800dcd6:	9b00      	ldr	r3, [sp, #0]
 800dcd8:	eba6 020a 	sub.w	r2, r6, sl
 800dcdc:	4293      	cmp	r3, r2
 800dcde:	ddb3      	ble.n	800dc48 <_dtoa_r+0xad8>
 800dce0:	4649      	mov	r1, r9
 800dce2:	2300      	movs	r3, #0
 800dce4:	220a      	movs	r2, #10
 800dce6:	4658      	mov	r0, fp
 800dce8:	f000 fcb4 	bl	800e654 <__multadd>
 800dcec:	4681      	mov	r9, r0
 800dcee:	e7ea      	b.n	800dcc6 <_dtoa_r+0xb56>
 800dcf0:	0800fc35 	.word	0x0800fc35
 800dcf4:	0800fbb9 	.word	0x0800fbb9

0800dcf8 <_free_r>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	4605      	mov	r5, r0
 800dcfc:	2900      	cmp	r1, #0
 800dcfe:	d041      	beq.n	800dd84 <_free_r+0x8c>
 800dd00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd04:	1f0c      	subs	r4, r1, #4
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	bfb8      	it	lt
 800dd0a:	18e4      	addlt	r4, r4, r3
 800dd0c:	f000 fc34 	bl	800e578 <__malloc_lock>
 800dd10:	4a1d      	ldr	r2, [pc, #116]	@ (800dd88 <_free_r+0x90>)
 800dd12:	6813      	ldr	r3, [r2, #0]
 800dd14:	b933      	cbnz	r3, 800dd24 <_free_r+0x2c>
 800dd16:	6063      	str	r3, [r4, #4]
 800dd18:	6014      	str	r4, [r2, #0]
 800dd1a:	4628      	mov	r0, r5
 800dd1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dd20:	f000 bc30 	b.w	800e584 <__malloc_unlock>
 800dd24:	42a3      	cmp	r3, r4
 800dd26:	d908      	bls.n	800dd3a <_free_r+0x42>
 800dd28:	6820      	ldr	r0, [r4, #0]
 800dd2a:	1821      	adds	r1, r4, r0
 800dd2c:	428b      	cmp	r3, r1
 800dd2e:	bf01      	itttt	eq
 800dd30:	6819      	ldreq	r1, [r3, #0]
 800dd32:	685b      	ldreq	r3, [r3, #4]
 800dd34:	1809      	addeq	r1, r1, r0
 800dd36:	6021      	streq	r1, [r4, #0]
 800dd38:	e7ed      	b.n	800dd16 <_free_r+0x1e>
 800dd3a:	461a      	mov	r2, r3
 800dd3c:	685b      	ldr	r3, [r3, #4]
 800dd3e:	b10b      	cbz	r3, 800dd44 <_free_r+0x4c>
 800dd40:	42a3      	cmp	r3, r4
 800dd42:	d9fa      	bls.n	800dd3a <_free_r+0x42>
 800dd44:	6811      	ldr	r1, [r2, #0]
 800dd46:	1850      	adds	r0, r2, r1
 800dd48:	42a0      	cmp	r0, r4
 800dd4a:	d10b      	bne.n	800dd64 <_free_r+0x6c>
 800dd4c:	6820      	ldr	r0, [r4, #0]
 800dd4e:	4401      	add	r1, r0
 800dd50:	1850      	adds	r0, r2, r1
 800dd52:	4283      	cmp	r3, r0
 800dd54:	6011      	str	r1, [r2, #0]
 800dd56:	d1e0      	bne.n	800dd1a <_free_r+0x22>
 800dd58:	6818      	ldr	r0, [r3, #0]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	6053      	str	r3, [r2, #4]
 800dd5e:	4408      	add	r0, r1
 800dd60:	6010      	str	r0, [r2, #0]
 800dd62:	e7da      	b.n	800dd1a <_free_r+0x22>
 800dd64:	d902      	bls.n	800dd6c <_free_r+0x74>
 800dd66:	230c      	movs	r3, #12
 800dd68:	602b      	str	r3, [r5, #0]
 800dd6a:	e7d6      	b.n	800dd1a <_free_r+0x22>
 800dd6c:	6820      	ldr	r0, [r4, #0]
 800dd6e:	1821      	adds	r1, r4, r0
 800dd70:	428b      	cmp	r3, r1
 800dd72:	bf04      	itt	eq
 800dd74:	6819      	ldreq	r1, [r3, #0]
 800dd76:	685b      	ldreq	r3, [r3, #4]
 800dd78:	6063      	str	r3, [r4, #4]
 800dd7a:	bf04      	itt	eq
 800dd7c:	1809      	addeq	r1, r1, r0
 800dd7e:	6021      	streq	r1, [r4, #0]
 800dd80:	6054      	str	r4, [r2, #4]
 800dd82:	e7ca      	b.n	800dd1a <_free_r+0x22>
 800dd84:	bd38      	pop	{r3, r4, r5, pc}
 800dd86:	bf00      	nop
 800dd88:	20002434 	.word	0x20002434

0800dd8c <rshift>:
 800dd8c:	6903      	ldr	r3, [r0, #16]
 800dd8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dd92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd96:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dd9a:	f100 0414 	add.w	r4, r0, #20
 800dd9e:	dd45      	ble.n	800de2c <rshift+0xa0>
 800dda0:	f011 011f 	ands.w	r1, r1, #31
 800dda4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dda8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ddac:	d10c      	bne.n	800ddc8 <rshift+0x3c>
 800ddae:	f100 0710 	add.w	r7, r0, #16
 800ddb2:	4629      	mov	r1, r5
 800ddb4:	42b1      	cmp	r1, r6
 800ddb6:	d334      	bcc.n	800de22 <rshift+0x96>
 800ddb8:	1a9b      	subs	r3, r3, r2
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	1eea      	subs	r2, r5, #3
 800ddbe:	4296      	cmp	r6, r2
 800ddc0:	bf38      	it	cc
 800ddc2:	2300      	movcc	r3, #0
 800ddc4:	4423      	add	r3, r4
 800ddc6:	e015      	b.n	800ddf4 <rshift+0x68>
 800ddc8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ddcc:	f1c1 0820 	rsb	r8, r1, #32
 800ddd0:	40cf      	lsrs	r7, r1
 800ddd2:	f105 0e04 	add.w	lr, r5, #4
 800ddd6:	46a1      	mov	r9, r4
 800ddd8:	4576      	cmp	r6, lr
 800ddda:	46f4      	mov	ip, lr
 800dddc:	d815      	bhi.n	800de0a <rshift+0x7e>
 800ddde:	1a9a      	subs	r2, r3, r2
 800dde0:	0092      	lsls	r2, r2, #2
 800dde2:	3a04      	subs	r2, #4
 800dde4:	3501      	adds	r5, #1
 800dde6:	42ae      	cmp	r6, r5
 800dde8:	bf38      	it	cc
 800ddea:	2200      	movcc	r2, #0
 800ddec:	18a3      	adds	r3, r4, r2
 800ddee:	50a7      	str	r7, [r4, r2]
 800ddf0:	b107      	cbz	r7, 800ddf4 <rshift+0x68>
 800ddf2:	3304      	adds	r3, #4
 800ddf4:	1b1a      	subs	r2, r3, r4
 800ddf6:	42a3      	cmp	r3, r4
 800ddf8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ddfc:	bf08      	it	eq
 800ddfe:	2300      	moveq	r3, #0
 800de00:	6102      	str	r2, [r0, #16]
 800de02:	bf08      	it	eq
 800de04:	6143      	streq	r3, [r0, #20]
 800de06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de0a:	f8dc c000 	ldr.w	ip, [ip]
 800de0e:	fa0c fc08 	lsl.w	ip, ip, r8
 800de12:	ea4c 0707 	orr.w	r7, ip, r7
 800de16:	f849 7b04 	str.w	r7, [r9], #4
 800de1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800de1e:	40cf      	lsrs	r7, r1
 800de20:	e7da      	b.n	800ddd8 <rshift+0x4c>
 800de22:	f851 cb04 	ldr.w	ip, [r1], #4
 800de26:	f847 cf04 	str.w	ip, [r7, #4]!
 800de2a:	e7c3      	b.n	800ddb4 <rshift+0x28>
 800de2c:	4623      	mov	r3, r4
 800de2e:	e7e1      	b.n	800ddf4 <rshift+0x68>

0800de30 <__hexdig_fun>:
 800de30:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800de34:	2b09      	cmp	r3, #9
 800de36:	d802      	bhi.n	800de3e <__hexdig_fun+0xe>
 800de38:	3820      	subs	r0, #32
 800de3a:	b2c0      	uxtb	r0, r0
 800de3c:	4770      	bx	lr
 800de3e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800de42:	2b05      	cmp	r3, #5
 800de44:	d801      	bhi.n	800de4a <__hexdig_fun+0x1a>
 800de46:	3847      	subs	r0, #71	@ 0x47
 800de48:	e7f7      	b.n	800de3a <__hexdig_fun+0xa>
 800de4a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800de4e:	2b05      	cmp	r3, #5
 800de50:	d801      	bhi.n	800de56 <__hexdig_fun+0x26>
 800de52:	3827      	subs	r0, #39	@ 0x27
 800de54:	e7f1      	b.n	800de3a <__hexdig_fun+0xa>
 800de56:	2000      	movs	r0, #0
 800de58:	4770      	bx	lr
	...

0800de5c <__gethex>:
 800de5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de60:	b085      	sub	sp, #20
 800de62:	468a      	mov	sl, r1
 800de64:	9302      	str	r3, [sp, #8]
 800de66:	680b      	ldr	r3, [r1, #0]
 800de68:	9001      	str	r0, [sp, #4]
 800de6a:	4690      	mov	r8, r2
 800de6c:	1c9c      	adds	r4, r3, #2
 800de6e:	46a1      	mov	r9, r4
 800de70:	f814 0b01 	ldrb.w	r0, [r4], #1
 800de74:	2830      	cmp	r0, #48	@ 0x30
 800de76:	d0fa      	beq.n	800de6e <__gethex+0x12>
 800de78:	eba9 0303 	sub.w	r3, r9, r3
 800de7c:	f1a3 0b02 	sub.w	fp, r3, #2
 800de80:	f7ff ffd6 	bl	800de30 <__hexdig_fun>
 800de84:	4605      	mov	r5, r0
 800de86:	2800      	cmp	r0, #0
 800de88:	d168      	bne.n	800df5c <__gethex+0x100>
 800de8a:	49a0      	ldr	r1, [pc, #640]	@ (800e10c <__gethex+0x2b0>)
 800de8c:	2201      	movs	r2, #1
 800de8e:	4648      	mov	r0, r9
 800de90:	f7ff f83d 	bl	800cf0e <strncmp>
 800de94:	4607      	mov	r7, r0
 800de96:	2800      	cmp	r0, #0
 800de98:	d167      	bne.n	800df6a <__gethex+0x10e>
 800de9a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800de9e:	4626      	mov	r6, r4
 800dea0:	f7ff ffc6 	bl	800de30 <__hexdig_fun>
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d062      	beq.n	800df6e <__gethex+0x112>
 800dea8:	4623      	mov	r3, r4
 800deaa:	7818      	ldrb	r0, [r3, #0]
 800deac:	2830      	cmp	r0, #48	@ 0x30
 800deae:	4699      	mov	r9, r3
 800deb0:	f103 0301 	add.w	r3, r3, #1
 800deb4:	d0f9      	beq.n	800deaa <__gethex+0x4e>
 800deb6:	f7ff ffbb 	bl	800de30 <__hexdig_fun>
 800deba:	fab0 f580 	clz	r5, r0
 800debe:	096d      	lsrs	r5, r5, #5
 800dec0:	f04f 0b01 	mov.w	fp, #1
 800dec4:	464a      	mov	r2, r9
 800dec6:	4616      	mov	r6, r2
 800dec8:	3201      	adds	r2, #1
 800deca:	7830      	ldrb	r0, [r6, #0]
 800decc:	f7ff ffb0 	bl	800de30 <__hexdig_fun>
 800ded0:	2800      	cmp	r0, #0
 800ded2:	d1f8      	bne.n	800dec6 <__gethex+0x6a>
 800ded4:	498d      	ldr	r1, [pc, #564]	@ (800e10c <__gethex+0x2b0>)
 800ded6:	2201      	movs	r2, #1
 800ded8:	4630      	mov	r0, r6
 800deda:	f7ff f818 	bl	800cf0e <strncmp>
 800dede:	2800      	cmp	r0, #0
 800dee0:	d13f      	bne.n	800df62 <__gethex+0x106>
 800dee2:	b944      	cbnz	r4, 800def6 <__gethex+0x9a>
 800dee4:	1c74      	adds	r4, r6, #1
 800dee6:	4622      	mov	r2, r4
 800dee8:	4616      	mov	r6, r2
 800deea:	3201      	adds	r2, #1
 800deec:	7830      	ldrb	r0, [r6, #0]
 800deee:	f7ff ff9f 	bl	800de30 <__hexdig_fun>
 800def2:	2800      	cmp	r0, #0
 800def4:	d1f8      	bne.n	800dee8 <__gethex+0x8c>
 800def6:	1ba4      	subs	r4, r4, r6
 800def8:	00a7      	lsls	r7, r4, #2
 800defa:	7833      	ldrb	r3, [r6, #0]
 800defc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800df00:	2b50      	cmp	r3, #80	@ 0x50
 800df02:	d13e      	bne.n	800df82 <__gethex+0x126>
 800df04:	7873      	ldrb	r3, [r6, #1]
 800df06:	2b2b      	cmp	r3, #43	@ 0x2b
 800df08:	d033      	beq.n	800df72 <__gethex+0x116>
 800df0a:	2b2d      	cmp	r3, #45	@ 0x2d
 800df0c:	d034      	beq.n	800df78 <__gethex+0x11c>
 800df0e:	1c71      	adds	r1, r6, #1
 800df10:	2400      	movs	r4, #0
 800df12:	7808      	ldrb	r0, [r1, #0]
 800df14:	f7ff ff8c 	bl	800de30 <__hexdig_fun>
 800df18:	1e43      	subs	r3, r0, #1
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	2b18      	cmp	r3, #24
 800df1e:	d830      	bhi.n	800df82 <__gethex+0x126>
 800df20:	f1a0 0210 	sub.w	r2, r0, #16
 800df24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800df28:	f7ff ff82 	bl	800de30 <__hexdig_fun>
 800df2c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800df30:	fa5f fc8c 	uxtb.w	ip, ip
 800df34:	f1bc 0f18 	cmp.w	ip, #24
 800df38:	f04f 030a 	mov.w	r3, #10
 800df3c:	d91e      	bls.n	800df7c <__gethex+0x120>
 800df3e:	b104      	cbz	r4, 800df42 <__gethex+0xe6>
 800df40:	4252      	negs	r2, r2
 800df42:	4417      	add	r7, r2
 800df44:	f8ca 1000 	str.w	r1, [sl]
 800df48:	b1ed      	cbz	r5, 800df86 <__gethex+0x12a>
 800df4a:	f1bb 0f00 	cmp.w	fp, #0
 800df4e:	bf0c      	ite	eq
 800df50:	2506      	moveq	r5, #6
 800df52:	2500      	movne	r5, #0
 800df54:	4628      	mov	r0, r5
 800df56:	b005      	add	sp, #20
 800df58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df5c:	2500      	movs	r5, #0
 800df5e:	462c      	mov	r4, r5
 800df60:	e7b0      	b.n	800dec4 <__gethex+0x68>
 800df62:	2c00      	cmp	r4, #0
 800df64:	d1c7      	bne.n	800def6 <__gethex+0x9a>
 800df66:	4627      	mov	r7, r4
 800df68:	e7c7      	b.n	800defa <__gethex+0x9e>
 800df6a:	464e      	mov	r6, r9
 800df6c:	462f      	mov	r7, r5
 800df6e:	2501      	movs	r5, #1
 800df70:	e7c3      	b.n	800defa <__gethex+0x9e>
 800df72:	2400      	movs	r4, #0
 800df74:	1cb1      	adds	r1, r6, #2
 800df76:	e7cc      	b.n	800df12 <__gethex+0xb6>
 800df78:	2401      	movs	r4, #1
 800df7a:	e7fb      	b.n	800df74 <__gethex+0x118>
 800df7c:	fb03 0002 	mla	r0, r3, r2, r0
 800df80:	e7ce      	b.n	800df20 <__gethex+0xc4>
 800df82:	4631      	mov	r1, r6
 800df84:	e7de      	b.n	800df44 <__gethex+0xe8>
 800df86:	eba6 0309 	sub.w	r3, r6, r9
 800df8a:	3b01      	subs	r3, #1
 800df8c:	4629      	mov	r1, r5
 800df8e:	2b07      	cmp	r3, #7
 800df90:	dc0a      	bgt.n	800dfa8 <__gethex+0x14c>
 800df92:	9801      	ldr	r0, [sp, #4]
 800df94:	f000 fafc 	bl	800e590 <_Balloc>
 800df98:	4604      	mov	r4, r0
 800df9a:	b940      	cbnz	r0, 800dfae <__gethex+0x152>
 800df9c:	4b5c      	ldr	r3, [pc, #368]	@ (800e110 <__gethex+0x2b4>)
 800df9e:	4602      	mov	r2, r0
 800dfa0:	21e4      	movs	r1, #228	@ 0xe4
 800dfa2:	485c      	ldr	r0, [pc, #368]	@ (800e114 <__gethex+0x2b8>)
 800dfa4:	f001 fa5c 	bl	800f460 <__assert_func>
 800dfa8:	3101      	adds	r1, #1
 800dfaa:	105b      	asrs	r3, r3, #1
 800dfac:	e7ef      	b.n	800df8e <__gethex+0x132>
 800dfae:	f100 0a14 	add.w	sl, r0, #20
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	4655      	mov	r5, sl
 800dfb6:	469b      	mov	fp, r3
 800dfb8:	45b1      	cmp	r9, r6
 800dfba:	d337      	bcc.n	800e02c <__gethex+0x1d0>
 800dfbc:	f845 bb04 	str.w	fp, [r5], #4
 800dfc0:	eba5 050a 	sub.w	r5, r5, sl
 800dfc4:	10ad      	asrs	r5, r5, #2
 800dfc6:	6125      	str	r5, [r4, #16]
 800dfc8:	4658      	mov	r0, fp
 800dfca:	f000 fbd3 	bl	800e774 <__hi0bits>
 800dfce:	016d      	lsls	r5, r5, #5
 800dfd0:	f8d8 6000 	ldr.w	r6, [r8]
 800dfd4:	1a2d      	subs	r5, r5, r0
 800dfd6:	42b5      	cmp	r5, r6
 800dfd8:	dd54      	ble.n	800e084 <__gethex+0x228>
 800dfda:	1bad      	subs	r5, r5, r6
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4620      	mov	r0, r4
 800dfe0:	f000 ff67 	bl	800eeb2 <__any_on>
 800dfe4:	4681      	mov	r9, r0
 800dfe6:	b178      	cbz	r0, 800e008 <__gethex+0x1ac>
 800dfe8:	1e6b      	subs	r3, r5, #1
 800dfea:	1159      	asrs	r1, r3, #5
 800dfec:	f003 021f 	and.w	r2, r3, #31
 800dff0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800dff4:	f04f 0901 	mov.w	r9, #1
 800dff8:	fa09 f202 	lsl.w	r2, r9, r2
 800dffc:	420a      	tst	r2, r1
 800dffe:	d003      	beq.n	800e008 <__gethex+0x1ac>
 800e000:	454b      	cmp	r3, r9
 800e002:	dc36      	bgt.n	800e072 <__gethex+0x216>
 800e004:	f04f 0902 	mov.w	r9, #2
 800e008:	4629      	mov	r1, r5
 800e00a:	4620      	mov	r0, r4
 800e00c:	f7ff febe 	bl	800dd8c <rshift>
 800e010:	442f      	add	r7, r5
 800e012:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e016:	42bb      	cmp	r3, r7
 800e018:	da42      	bge.n	800e0a0 <__gethex+0x244>
 800e01a:	9801      	ldr	r0, [sp, #4]
 800e01c:	4621      	mov	r1, r4
 800e01e:	f000 faf7 	bl	800e610 <_Bfree>
 800e022:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e024:	2300      	movs	r3, #0
 800e026:	6013      	str	r3, [r2, #0]
 800e028:	25a3      	movs	r5, #163	@ 0xa3
 800e02a:	e793      	b.n	800df54 <__gethex+0xf8>
 800e02c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e030:	2a2e      	cmp	r2, #46	@ 0x2e
 800e032:	d012      	beq.n	800e05a <__gethex+0x1fe>
 800e034:	2b20      	cmp	r3, #32
 800e036:	d104      	bne.n	800e042 <__gethex+0x1e6>
 800e038:	f845 bb04 	str.w	fp, [r5], #4
 800e03c:	f04f 0b00 	mov.w	fp, #0
 800e040:	465b      	mov	r3, fp
 800e042:	7830      	ldrb	r0, [r6, #0]
 800e044:	9303      	str	r3, [sp, #12]
 800e046:	f7ff fef3 	bl	800de30 <__hexdig_fun>
 800e04a:	9b03      	ldr	r3, [sp, #12]
 800e04c:	f000 000f 	and.w	r0, r0, #15
 800e050:	4098      	lsls	r0, r3
 800e052:	ea4b 0b00 	orr.w	fp, fp, r0
 800e056:	3304      	adds	r3, #4
 800e058:	e7ae      	b.n	800dfb8 <__gethex+0x15c>
 800e05a:	45b1      	cmp	r9, r6
 800e05c:	d8ea      	bhi.n	800e034 <__gethex+0x1d8>
 800e05e:	492b      	ldr	r1, [pc, #172]	@ (800e10c <__gethex+0x2b0>)
 800e060:	9303      	str	r3, [sp, #12]
 800e062:	2201      	movs	r2, #1
 800e064:	4630      	mov	r0, r6
 800e066:	f7fe ff52 	bl	800cf0e <strncmp>
 800e06a:	9b03      	ldr	r3, [sp, #12]
 800e06c:	2800      	cmp	r0, #0
 800e06e:	d1e1      	bne.n	800e034 <__gethex+0x1d8>
 800e070:	e7a2      	b.n	800dfb8 <__gethex+0x15c>
 800e072:	1ea9      	subs	r1, r5, #2
 800e074:	4620      	mov	r0, r4
 800e076:	f000 ff1c 	bl	800eeb2 <__any_on>
 800e07a:	2800      	cmp	r0, #0
 800e07c:	d0c2      	beq.n	800e004 <__gethex+0x1a8>
 800e07e:	f04f 0903 	mov.w	r9, #3
 800e082:	e7c1      	b.n	800e008 <__gethex+0x1ac>
 800e084:	da09      	bge.n	800e09a <__gethex+0x23e>
 800e086:	1b75      	subs	r5, r6, r5
 800e088:	4621      	mov	r1, r4
 800e08a:	9801      	ldr	r0, [sp, #4]
 800e08c:	462a      	mov	r2, r5
 800e08e:	f000 fcd7 	bl	800ea40 <__lshift>
 800e092:	1b7f      	subs	r7, r7, r5
 800e094:	4604      	mov	r4, r0
 800e096:	f100 0a14 	add.w	sl, r0, #20
 800e09a:	f04f 0900 	mov.w	r9, #0
 800e09e:	e7b8      	b.n	800e012 <__gethex+0x1b6>
 800e0a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e0a4:	42bd      	cmp	r5, r7
 800e0a6:	dd6f      	ble.n	800e188 <__gethex+0x32c>
 800e0a8:	1bed      	subs	r5, r5, r7
 800e0aa:	42ae      	cmp	r6, r5
 800e0ac:	dc34      	bgt.n	800e118 <__gethex+0x2bc>
 800e0ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0b2:	2b02      	cmp	r3, #2
 800e0b4:	d022      	beq.n	800e0fc <__gethex+0x2a0>
 800e0b6:	2b03      	cmp	r3, #3
 800e0b8:	d024      	beq.n	800e104 <__gethex+0x2a8>
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d115      	bne.n	800e0ea <__gethex+0x28e>
 800e0be:	42ae      	cmp	r6, r5
 800e0c0:	d113      	bne.n	800e0ea <__gethex+0x28e>
 800e0c2:	2e01      	cmp	r6, #1
 800e0c4:	d10b      	bne.n	800e0de <__gethex+0x282>
 800e0c6:	9a02      	ldr	r2, [sp, #8]
 800e0c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e0cc:	6013      	str	r3, [r2, #0]
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	6123      	str	r3, [r4, #16]
 800e0d2:	f8ca 3000 	str.w	r3, [sl]
 800e0d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e0d8:	2562      	movs	r5, #98	@ 0x62
 800e0da:	601c      	str	r4, [r3, #0]
 800e0dc:	e73a      	b.n	800df54 <__gethex+0xf8>
 800e0de:	1e71      	subs	r1, r6, #1
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f000 fee6 	bl	800eeb2 <__any_on>
 800e0e6:	2800      	cmp	r0, #0
 800e0e8:	d1ed      	bne.n	800e0c6 <__gethex+0x26a>
 800e0ea:	9801      	ldr	r0, [sp, #4]
 800e0ec:	4621      	mov	r1, r4
 800e0ee:	f000 fa8f 	bl	800e610 <_Bfree>
 800e0f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	6013      	str	r3, [r2, #0]
 800e0f8:	2550      	movs	r5, #80	@ 0x50
 800e0fa:	e72b      	b.n	800df54 <__gethex+0xf8>
 800e0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d1f3      	bne.n	800e0ea <__gethex+0x28e>
 800e102:	e7e0      	b.n	800e0c6 <__gethex+0x26a>
 800e104:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e106:	2b00      	cmp	r3, #0
 800e108:	d1dd      	bne.n	800e0c6 <__gethex+0x26a>
 800e10a:	e7ee      	b.n	800e0ea <__gethex+0x28e>
 800e10c:	0800fb20 	.word	0x0800fb20
 800e110:	0800fc35 	.word	0x0800fc35
 800e114:	0800fc46 	.word	0x0800fc46
 800e118:	1e6f      	subs	r7, r5, #1
 800e11a:	f1b9 0f00 	cmp.w	r9, #0
 800e11e:	d130      	bne.n	800e182 <__gethex+0x326>
 800e120:	b127      	cbz	r7, 800e12c <__gethex+0x2d0>
 800e122:	4639      	mov	r1, r7
 800e124:	4620      	mov	r0, r4
 800e126:	f000 fec4 	bl	800eeb2 <__any_on>
 800e12a:	4681      	mov	r9, r0
 800e12c:	117a      	asrs	r2, r7, #5
 800e12e:	2301      	movs	r3, #1
 800e130:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e134:	f007 071f 	and.w	r7, r7, #31
 800e138:	40bb      	lsls	r3, r7
 800e13a:	4213      	tst	r3, r2
 800e13c:	4629      	mov	r1, r5
 800e13e:	4620      	mov	r0, r4
 800e140:	bf18      	it	ne
 800e142:	f049 0902 	orrne.w	r9, r9, #2
 800e146:	f7ff fe21 	bl	800dd8c <rshift>
 800e14a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e14e:	1b76      	subs	r6, r6, r5
 800e150:	2502      	movs	r5, #2
 800e152:	f1b9 0f00 	cmp.w	r9, #0
 800e156:	d047      	beq.n	800e1e8 <__gethex+0x38c>
 800e158:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e15c:	2b02      	cmp	r3, #2
 800e15e:	d015      	beq.n	800e18c <__gethex+0x330>
 800e160:	2b03      	cmp	r3, #3
 800e162:	d017      	beq.n	800e194 <__gethex+0x338>
 800e164:	2b01      	cmp	r3, #1
 800e166:	d109      	bne.n	800e17c <__gethex+0x320>
 800e168:	f019 0f02 	tst.w	r9, #2
 800e16c:	d006      	beq.n	800e17c <__gethex+0x320>
 800e16e:	f8da 3000 	ldr.w	r3, [sl]
 800e172:	ea49 0903 	orr.w	r9, r9, r3
 800e176:	f019 0f01 	tst.w	r9, #1
 800e17a:	d10e      	bne.n	800e19a <__gethex+0x33e>
 800e17c:	f045 0510 	orr.w	r5, r5, #16
 800e180:	e032      	b.n	800e1e8 <__gethex+0x38c>
 800e182:	f04f 0901 	mov.w	r9, #1
 800e186:	e7d1      	b.n	800e12c <__gethex+0x2d0>
 800e188:	2501      	movs	r5, #1
 800e18a:	e7e2      	b.n	800e152 <__gethex+0x2f6>
 800e18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e18e:	f1c3 0301 	rsb	r3, r3, #1
 800e192:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e196:	2b00      	cmp	r3, #0
 800e198:	d0f0      	beq.n	800e17c <__gethex+0x320>
 800e19a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e19e:	f104 0314 	add.w	r3, r4, #20
 800e1a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e1a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e1aa:	f04f 0c00 	mov.w	ip, #0
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1b4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800e1b8:	d01b      	beq.n	800e1f2 <__gethex+0x396>
 800e1ba:	3201      	adds	r2, #1
 800e1bc:	6002      	str	r2, [r0, #0]
 800e1be:	2d02      	cmp	r5, #2
 800e1c0:	f104 0314 	add.w	r3, r4, #20
 800e1c4:	d13c      	bne.n	800e240 <__gethex+0x3e4>
 800e1c6:	f8d8 2000 	ldr.w	r2, [r8]
 800e1ca:	3a01      	subs	r2, #1
 800e1cc:	42b2      	cmp	r2, r6
 800e1ce:	d109      	bne.n	800e1e4 <__gethex+0x388>
 800e1d0:	1171      	asrs	r1, r6, #5
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e1d8:	f006 061f 	and.w	r6, r6, #31
 800e1dc:	fa02 f606 	lsl.w	r6, r2, r6
 800e1e0:	421e      	tst	r6, r3
 800e1e2:	d13a      	bne.n	800e25a <__gethex+0x3fe>
 800e1e4:	f045 0520 	orr.w	r5, r5, #32
 800e1e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1ea:	601c      	str	r4, [r3, #0]
 800e1ec:	9b02      	ldr	r3, [sp, #8]
 800e1ee:	601f      	str	r7, [r3, #0]
 800e1f0:	e6b0      	b.n	800df54 <__gethex+0xf8>
 800e1f2:	4299      	cmp	r1, r3
 800e1f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e1f8:	d8d9      	bhi.n	800e1ae <__gethex+0x352>
 800e1fa:	68a3      	ldr	r3, [r4, #8]
 800e1fc:	459b      	cmp	fp, r3
 800e1fe:	db17      	blt.n	800e230 <__gethex+0x3d4>
 800e200:	6861      	ldr	r1, [r4, #4]
 800e202:	9801      	ldr	r0, [sp, #4]
 800e204:	3101      	adds	r1, #1
 800e206:	f000 f9c3 	bl	800e590 <_Balloc>
 800e20a:	4681      	mov	r9, r0
 800e20c:	b918      	cbnz	r0, 800e216 <__gethex+0x3ba>
 800e20e:	4b1a      	ldr	r3, [pc, #104]	@ (800e278 <__gethex+0x41c>)
 800e210:	4602      	mov	r2, r0
 800e212:	2184      	movs	r1, #132	@ 0x84
 800e214:	e6c5      	b.n	800dfa2 <__gethex+0x146>
 800e216:	6922      	ldr	r2, [r4, #16]
 800e218:	3202      	adds	r2, #2
 800e21a:	f104 010c 	add.w	r1, r4, #12
 800e21e:	0092      	lsls	r2, r2, #2
 800e220:	300c      	adds	r0, #12
 800e222:	f7fe fefe 	bl	800d022 <memcpy>
 800e226:	4621      	mov	r1, r4
 800e228:	9801      	ldr	r0, [sp, #4]
 800e22a:	f000 f9f1 	bl	800e610 <_Bfree>
 800e22e:	464c      	mov	r4, r9
 800e230:	6923      	ldr	r3, [r4, #16]
 800e232:	1c5a      	adds	r2, r3, #1
 800e234:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e238:	6122      	str	r2, [r4, #16]
 800e23a:	2201      	movs	r2, #1
 800e23c:	615a      	str	r2, [r3, #20]
 800e23e:	e7be      	b.n	800e1be <__gethex+0x362>
 800e240:	6922      	ldr	r2, [r4, #16]
 800e242:	455a      	cmp	r2, fp
 800e244:	dd0b      	ble.n	800e25e <__gethex+0x402>
 800e246:	2101      	movs	r1, #1
 800e248:	4620      	mov	r0, r4
 800e24a:	f7ff fd9f 	bl	800dd8c <rshift>
 800e24e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e252:	3701      	adds	r7, #1
 800e254:	42bb      	cmp	r3, r7
 800e256:	f6ff aee0 	blt.w	800e01a <__gethex+0x1be>
 800e25a:	2501      	movs	r5, #1
 800e25c:	e7c2      	b.n	800e1e4 <__gethex+0x388>
 800e25e:	f016 061f 	ands.w	r6, r6, #31
 800e262:	d0fa      	beq.n	800e25a <__gethex+0x3fe>
 800e264:	4453      	add	r3, sl
 800e266:	f1c6 0620 	rsb	r6, r6, #32
 800e26a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e26e:	f000 fa81 	bl	800e774 <__hi0bits>
 800e272:	42b0      	cmp	r0, r6
 800e274:	dbe7      	blt.n	800e246 <__gethex+0x3ea>
 800e276:	e7f0      	b.n	800e25a <__gethex+0x3fe>
 800e278:	0800fc35 	.word	0x0800fc35

0800e27c <L_shift>:
 800e27c:	f1c2 0208 	rsb	r2, r2, #8
 800e280:	0092      	lsls	r2, r2, #2
 800e282:	b570      	push	{r4, r5, r6, lr}
 800e284:	f1c2 0620 	rsb	r6, r2, #32
 800e288:	6843      	ldr	r3, [r0, #4]
 800e28a:	6804      	ldr	r4, [r0, #0]
 800e28c:	fa03 f506 	lsl.w	r5, r3, r6
 800e290:	432c      	orrs	r4, r5
 800e292:	40d3      	lsrs	r3, r2
 800e294:	6004      	str	r4, [r0, #0]
 800e296:	f840 3f04 	str.w	r3, [r0, #4]!
 800e29a:	4288      	cmp	r0, r1
 800e29c:	d3f4      	bcc.n	800e288 <L_shift+0xc>
 800e29e:	bd70      	pop	{r4, r5, r6, pc}

0800e2a0 <__match>:
 800e2a0:	b530      	push	{r4, r5, lr}
 800e2a2:	6803      	ldr	r3, [r0, #0]
 800e2a4:	3301      	adds	r3, #1
 800e2a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e2aa:	b914      	cbnz	r4, 800e2b2 <__match+0x12>
 800e2ac:	6003      	str	r3, [r0, #0]
 800e2ae:	2001      	movs	r0, #1
 800e2b0:	bd30      	pop	{r4, r5, pc}
 800e2b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e2ba:	2d19      	cmp	r5, #25
 800e2bc:	bf98      	it	ls
 800e2be:	3220      	addls	r2, #32
 800e2c0:	42a2      	cmp	r2, r4
 800e2c2:	d0f0      	beq.n	800e2a6 <__match+0x6>
 800e2c4:	2000      	movs	r0, #0
 800e2c6:	e7f3      	b.n	800e2b0 <__match+0x10>

0800e2c8 <__hexnan>:
 800e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	680b      	ldr	r3, [r1, #0]
 800e2ce:	6801      	ldr	r1, [r0, #0]
 800e2d0:	115e      	asrs	r6, r3, #5
 800e2d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e2d6:	f013 031f 	ands.w	r3, r3, #31
 800e2da:	b087      	sub	sp, #28
 800e2dc:	bf18      	it	ne
 800e2de:	3604      	addne	r6, #4
 800e2e0:	2500      	movs	r5, #0
 800e2e2:	1f37      	subs	r7, r6, #4
 800e2e4:	4682      	mov	sl, r0
 800e2e6:	4690      	mov	r8, r2
 800e2e8:	9301      	str	r3, [sp, #4]
 800e2ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800e2ee:	46b9      	mov	r9, r7
 800e2f0:	463c      	mov	r4, r7
 800e2f2:	9502      	str	r5, [sp, #8]
 800e2f4:	46ab      	mov	fp, r5
 800e2f6:	784a      	ldrb	r2, [r1, #1]
 800e2f8:	1c4b      	adds	r3, r1, #1
 800e2fa:	9303      	str	r3, [sp, #12]
 800e2fc:	b342      	cbz	r2, 800e350 <__hexnan+0x88>
 800e2fe:	4610      	mov	r0, r2
 800e300:	9105      	str	r1, [sp, #20]
 800e302:	9204      	str	r2, [sp, #16]
 800e304:	f7ff fd94 	bl	800de30 <__hexdig_fun>
 800e308:	2800      	cmp	r0, #0
 800e30a:	d151      	bne.n	800e3b0 <__hexnan+0xe8>
 800e30c:	9a04      	ldr	r2, [sp, #16]
 800e30e:	9905      	ldr	r1, [sp, #20]
 800e310:	2a20      	cmp	r2, #32
 800e312:	d818      	bhi.n	800e346 <__hexnan+0x7e>
 800e314:	9b02      	ldr	r3, [sp, #8]
 800e316:	459b      	cmp	fp, r3
 800e318:	dd13      	ble.n	800e342 <__hexnan+0x7a>
 800e31a:	454c      	cmp	r4, r9
 800e31c:	d206      	bcs.n	800e32c <__hexnan+0x64>
 800e31e:	2d07      	cmp	r5, #7
 800e320:	dc04      	bgt.n	800e32c <__hexnan+0x64>
 800e322:	462a      	mov	r2, r5
 800e324:	4649      	mov	r1, r9
 800e326:	4620      	mov	r0, r4
 800e328:	f7ff ffa8 	bl	800e27c <L_shift>
 800e32c:	4544      	cmp	r4, r8
 800e32e:	d952      	bls.n	800e3d6 <__hexnan+0x10e>
 800e330:	2300      	movs	r3, #0
 800e332:	f1a4 0904 	sub.w	r9, r4, #4
 800e336:	f844 3c04 	str.w	r3, [r4, #-4]
 800e33a:	f8cd b008 	str.w	fp, [sp, #8]
 800e33e:	464c      	mov	r4, r9
 800e340:	461d      	mov	r5, r3
 800e342:	9903      	ldr	r1, [sp, #12]
 800e344:	e7d7      	b.n	800e2f6 <__hexnan+0x2e>
 800e346:	2a29      	cmp	r2, #41	@ 0x29
 800e348:	d157      	bne.n	800e3fa <__hexnan+0x132>
 800e34a:	3102      	adds	r1, #2
 800e34c:	f8ca 1000 	str.w	r1, [sl]
 800e350:	f1bb 0f00 	cmp.w	fp, #0
 800e354:	d051      	beq.n	800e3fa <__hexnan+0x132>
 800e356:	454c      	cmp	r4, r9
 800e358:	d206      	bcs.n	800e368 <__hexnan+0xa0>
 800e35a:	2d07      	cmp	r5, #7
 800e35c:	dc04      	bgt.n	800e368 <__hexnan+0xa0>
 800e35e:	462a      	mov	r2, r5
 800e360:	4649      	mov	r1, r9
 800e362:	4620      	mov	r0, r4
 800e364:	f7ff ff8a 	bl	800e27c <L_shift>
 800e368:	4544      	cmp	r4, r8
 800e36a:	d936      	bls.n	800e3da <__hexnan+0x112>
 800e36c:	f1a8 0204 	sub.w	r2, r8, #4
 800e370:	4623      	mov	r3, r4
 800e372:	f853 1b04 	ldr.w	r1, [r3], #4
 800e376:	f842 1f04 	str.w	r1, [r2, #4]!
 800e37a:	429f      	cmp	r7, r3
 800e37c:	d2f9      	bcs.n	800e372 <__hexnan+0xaa>
 800e37e:	1b3b      	subs	r3, r7, r4
 800e380:	f023 0303 	bic.w	r3, r3, #3
 800e384:	3304      	adds	r3, #4
 800e386:	3401      	adds	r4, #1
 800e388:	3e03      	subs	r6, #3
 800e38a:	42b4      	cmp	r4, r6
 800e38c:	bf88      	it	hi
 800e38e:	2304      	movhi	r3, #4
 800e390:	4443      	add	r3, r8
 800e392:	2200      	movs	r2, #0
 800e394:	f843 2b04 	str.w	r2, [r3], #4
 800e398:	429f      	cmp	r7, r3
 800e39a:	d2fb      	bcs.n	800e394 <__hexnan+0xcc>
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	b91b      	cbnz	r3, 800e3a8 <__hexnan+0xe0>
 800e3a0:	4547      	cmp	r7, r8
 800e3a2:	d128      	bne.n	800e3f6 <__hexnan+0x12e>
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	603b      	str	r3, [r7, #0]
 800e3a8:	2005      	movs	r0, #5
 800e3aa:	b007      	add	sp, #28
 800e3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3b0:	3501      	adds	r5, #1
 800e3b2:	2d08      	cmp	r5, #8
 800e3b4:	f10b 0b01 	add.w	fp, fp, #1
 800e3b8:	dd06      	ble.n	800e3c8 <__hexnan+0x100>
 800e3ba:	4544      	cmp	r4, r8
 800e3bc:	d9c1      	bls.n	800e342 <__hexnan+0x7a>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800e3c4:	2501      	movs	r5, #1
 800e3c6:	3c04      	subs	r4, #4
 800e3c8:	6822      	ldr	r2, [r4, #0]
 800e3ca:	f000 000f 	and.w	r0, r0, #15
 800e3ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e3d2:	6020      	str	r0, [r4, #0]
 800e3d4:	e7b5      	b.n	800e342 <__hexnan+0x7a>
 800e3d6:	2508      	movs	r5, #8
 800e3d8:	e7b3      	b.n	800e342 <__hexnan+0x7a>
 800e3da:	9b01      	ldr	r3, [sp, #4]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d0dd      	beq.n	800e39c <__hexnan+0xd4>
 800e3e0:	f1c3 0320 	rsb	r3, r3, #32
 800e3e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e3e8:	40da      	lsrs	r2, r3
 800e3ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e3ee:	4013      	ands	r3, r2
 800e3f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800e3f4:	e7d2      	b.n	800e39c <__hexnan+0xd4>
 800e3f6:	3f04      	subs	r7, #4
 800e3f8:	e7d0      	b.n	800e39c <__hexnan+0xd4>
 800e3fa:	2004      	movs	r0, #4
 800e3fc:	e7d5      	b.n	800e3aa <__hexnan+0xe2>
	...

0800e400 <malloc>:
 800e400:	4b02      	ldr	r3, [pc, #8]	@ (800e40c <malloc+0xc>)
 800e402:	4601      	mov	r1, r0
 800e404:	6818      	ldr	r0, [r3, #0]
 800e406:	f000 b825 	b.w	800e454 <_malloc_r>
 800e40a:	bf00      	nop
 800e40c:	2000027c 	.word	0x2000027c

0800e410 <sbrk_aligned>:
 800e410:	b570      	push	{r4, r5, r6, lr}
 800e412:	4e0f      	ldr	r6, [pc, #60]	@ (800e450 <sbrk_aligned+0x40>)
 800e414:	460c      	mov	r4, r1
 800e416:	6831      	ldr	r1, [r6, #0]
 800e418:	4605      	mov	r5, r0
 800e41a:	b911      	cbnz	r1, 800e422 <sbrk_aligned+0x12>
 800e41c:	f001 f810 	bl	800f440 <_sbrk_r>
 800e420:	6030      	str	r0, [r6, #0]
 800e422:	4621      	mov	r1, r4
 800e424:	4628      	mov	r0, r5
 800e426:	f001 f80b 	bl	800f440 <_sbrk_r>
 800e42a:	1c43      	adds	r3, r0, #1
 800e42c:	d103      	bne.n	800e436 <sbrk_aligned+0x26>
 800e42e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e432:	4620      	mov	r0, r4
 800e434:	bd70      	pop	{r4, r5, r6, pc}
 800e436:	1cc4      	adds	r4, r0, #3
 800e438:	f024 0403 	bic.w	r4, r4, #3
 800e43c:	42a0      	cmp	r0, r4
 800e43e:	d0f8      	beq.n	800e432 <sbrk_aligned+0x22>
 800e440:	1a21      	subs	r1, r4, r0
 800e442:	4628      	mov	r0, r5
 800e444:	f000 fffc 	bl	800f440 <_sbrk_r>
 800e448:	3001      	adds	r0, #1
 800e44a:	d1f2      	bne.n	800e432 <sbrk_aligned+0x22>
 800e44c:	e7ef      	b.n	800e42e <sbrk_aligned+0x1e>
 800e44e:	bf00      	nop
 800e450:	20002430 	.word	0x20002430

0800e454 <_malloc_r>:
 800e454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e458:	1ccd      	adds	r5, r1, #3
 800e45a:	f025 0503 	bic.w	r5, r5, #3
 800e45e:	3508      	adds	r5, #8
 800e460:	2d0c      	cmp	r5, #12
 800e462:	bf38      	it	cc
 800e464:	250c      	movcc	r5, #12
 800e466:	2d00      	cmp	r5, #0
 800e468:	4606      	mov	r6, r0
 800e46a:	db01      	blt.n	800e470 <_malloc_r+0x1c>
 800e46c:	42a9      	cmp	r1, r5
 800e46e:	d904      	bls.n	800e47a <_malloc_r+0x26>
 800e470:	230c      	movs	r3, #12
 800e472:	6033      	str	r3, [r6, #0]
 800e474:	2000      	movs	r0, #0
 800e476:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e47a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e550 <_malloc_r+0xfc>
 800e47e:	f000 f87b 	bl	800e578 <__malloc_lock>
 800e482:	f8d8 3000 	ldr.w	r3, [r8]
 800e486:	461c      	mov	r4, r3
 800e488:	bb44      	cbnz	r4, 800e4dc <_malloc_r+0x88>
 800e48a:	4629      	mov	r1, r5
 800e48c:	4630      	mov	r0, r6
 800e48e:	f7ff ffbf 	bl	800e410 <sbrk_aligned>
 800e492:	1c43      	adds	r3, r0, #1
 800e494:	4604      	mov	r4, r0
 800e496:	d158      	bne.n	800e54a <_malloc_r+0xf6>
 800e498:	f8d8 4000 	ldr.w	r4, [r8]
 800e49c:	4627      	mov	r7, r4
 800e49e:	2f00      	cmp	r7, #0
 800e4a0:	d143      	bne.n	800e52a <_malloc_r+0xd6>
 800e4a2:	2c00      	cmp	r4, #0
 800e4a4:	d04b      	beq.n	800e53e <_malloc_r+0xea>
 800e4a6:	6823      	ldr	r3, [r4, #0]
 800e4a8:	4639      	mov	r1, r7
 800e4aa:	4630      	mov	r0, r6
 800e4ac:	eb04 0903 	add.w	r9, r4, r3
 800e4b0:	f000 ffc6 	bl	800f440 <_sbrk_r>
 800e4b4:	4581      	cmp	r9, r0
 800e4b6:	d142      	bne.n	800e53e <_malloc_r+0xea>
 800e4b8:	6821      	ldr	r1, [r4, #0]
 800e4ba:	1a6d      	subs	r5, r5, r1
 800e4bc:	4629      	mov	r1, r5
 800e4be:	4630      	mov	r0, r6
 800e4c0:	f7ff ffa6 	bl	800e410 <sbrk_aligned>
 800e4c4:	3001      	adds	r0, #1
 800e4c6:	d03a      	beq.n	800e53e <_malloc_r+0xea>
 800e4c8:	6823      	ldr	r3, [r4, #0]
 800e4ca:	442b      	add	r3, r5
 800e4cc:	6023      	str	r3, [r4, #0]
 800e4ce:	f8d8 3000 	ldr.w	r3, [r8]
 800e4d2:	685a      	ldr	r2, [r3, #4]
 800e4d4:	bb62      	cbnz	r2, 800e530 <_malloc_r+0xdc>
 800e4d6:	f8c8 7000 	str.w	r7, [r8]
 800e4da:	e00f      	b.n	800e4fc <_malloc_r+0xa8>
 800e4dc:	6822      	ldr	r2, [r4, #0]
 800e4de:	1b52      	subs	r2, r2, r5
 800e4e0:	d420      	bmi.n	800e524 <_malloc_r+0xd0>
 800e4e2:	2a0b      	cmp	r2, #11
 800e4e4:	d917      	bls.n	800e516 <_malloc_r+0xc2>
 800e4e6:	1961      	adds	r1, r4, r5
 800e4e8:	42a3      	cmp	r3, r4
 800e4ea:	6025      	str	r5, [r4, #0]
 800e4ec:	bf18      	it	ne
 800e4ee:	6059      	strne	r1, [r3, #4]
 800e4f0:	6863      	ldr	r3, [r4, #4]
 800e4f2:	bf08      	it	eq
 800e4f4:	f8c8 1000 	streq.w	r1, [r8]
 800e4f8:	5162      	str	r2, [r4, r5]
 800e4fa:	604b      	str	r3, [r1, #4]
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	f000 f841 	bl	800e584 <__malloc_unlock>
 800e502:	f104 000b 	add.w	r0, r4, #11
 800e506:	1d23      	adds	r3, r4, #4
 800e508:	f020 0007 	bic.w	r0, r0, #7
 800e50c:	1ac2      	subs	r2, r0, r3
 800e50e:	bf1c      	itt	ne
 800e510:	1a1b      	subne	r3, r3, r0
 800e512:	50a3      	strne	r3, [r4, r2]
 800e514:	e7af      	b.n	800e476 <_malloc_r+0x22>
 800e516:	6862      	ldr	r2, [r4, #4]
 800e518:	42a3      	cmp	r3, r4
 800e51a:	bf0c      	ite	eq
 800e51c:	f8c8 2000 	streq.w	r2, [r8]
 800e520:	605a      	strne	r2, [r3, #4]
 800e522:	e7eb      	b.n	800e4fc <_malloc_r+0xa8>
 800e524:	4623      	mov	r3, r4
 800e526:	6864      	ldr	r4, [r4, #4]
 800e528:	e7ae      	b.n	800e488 <_malloc_r+0x34>
 800e52a:	463c      	mov	r4, r7
 800e52c:	687f      	ldr	r7, [r7, #4]
 800e52e:	e7b6      	b.n	800e49e <_malloc_r+0x4a>
 800e530:	461a      	mov	r2, r3
 800e532:	685b      	ldr	r3, [r3, #4]
 800e534:	42a3      	cmp	r3, r4
 800e536:	d1fb      	bne.n	800e530 <_malloc_r+0xdc>
 800e538:	2300      	movs	r3, #0
 800e53a:	6053      	str	r3, [r2, #4]
 800e53c:	e7de      	b.n	800e4fc <_malloc_r+0xa8>
 800e53e:	230c      	movs	r3, #12
 800e540:	6033      	str	r3, [r6, #0]
 800e542:	4630      	mov	r0, r6
 800e544:	f000 f81e 	bl	800e584 <__malloc_unlock>
 800e548:	e794      	b.n	800e474 <_malloc_r+0x20>
 800e54a:	6005      	str	r5, [r0, #0]
 800e54c:	e7d6      	b.n	800e4fc <_malloc_r+0xa8>
 800e54e:	bf00      	nop
 800e550:	20002434 	.word	0x20002434

0800e554 <__ascii_mbtowc>:
 800e554:	b082      	sub	sp, #8
 800e556:	b901      	cbnz	r1, 800e55a <__ascii_mbtowc+0x6>
 800e558:	a901      	add	r1, sp, #4
 800e55a:	b142      	cbz	r2, 800e56e <__ascii_mbtowc+0x1a>
 800e55c:	b14b      	cbz	r3, 800e572 <__ascii_mbtowc+0x1e>
 800e55e:	7813      	ldrb	r3, [r2, #0]
 800e560:	600b      	str	r3, [r1, #0]
 800e562:	7812      	ldrb	r2, [r2, #0]
 800e564:	1e10      	subs	r0, r2, #0
 800e566:	bf18      	it	ne
 800e568:	2001      	movne	r0, #1
 800e56a:	b002      	add	sp, #8
 800e56c:	4770      	bx	lr
 800e56e:	4610      	mov	r0, r2
 800e570:	e7fb      	b.n	800e56a <__ascii_mbtowc+0x16>
 800e572:	f06f 0001 	mvn.w	r0, #1
 800e576:	e7f8      	b.n	800e56a <__ascii_mbtowc+0x16>

0800e578 <__malloc_lock>:
 800e578:	4801      	ldr	r0, [pc, #4]	@ (800e580 <__malloc_lock+0x8>)
 800e57a:	f7fe bd50 	b.w	800d01e <__retarget_lock_acquire_recursive>
 800e57e:	bf00      	nop
 800e580:	2000242c 	.word	0x2000242c

0800e584 <__malloc_unlock>:
 800e584:	4801      	ldr	r0, [pc, #4]	@ (800e58c <__malloc_unlock+0x8>)
 800e586:	f7fe bd4b 	b.w	800d020 <__retarget_lock_release_recursive>
 800e58a:	bf00      	nop
 800e58c:	2000242c 	.word	0x2000242c

0800e590 <_Balloc>:
 800e590:	b570      	push	{r4, r5, r6, lr}
 800e592:	69c6      	ldr	r6, [r0, #28]
 800e594:	4604      	mov	r4, r0
 800e596:	460d      	mov	r5, r1
 800e598:	b976      	cbnz	r6, 800e5b8 <_Balloc+0x28>
 800e59a:	2010      	movs	r0, #16
 800e59c:	f7ff ff30 	bl	800e400 <malloc>
 800e5a0:	4602      	mov	r2, r0
 800e5a2:	61e0      	str	r0, [r4, #28]
 800e5a4:	b920      	cbnz	r0, 800e5b0 <_Balloc+0x20>
 800e5a6:	4b18      	ldr	r3, [pc, #96]	@ (800e608 <_Balloc+0x78>)
 800e5a8:	4818      	ldr	r0, [pc, #96]	@ (800e60c <_Balloc+0x7c>)
 800e5aa:	216b      	movs	r1, #107	@ 0x6b
 800e5ac:	f000 ff58 	bl	800f460 <__assert_func>
 800e5b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e5b4:	6006      	str	r6, [r0, #0]
 800e5b6:	60c6      	str	r6, [r0, #12]
 800e5b8:	69e6      	ldr	r6, [r4, #28]
 800e5ba:	68f3      	ldr	r3, [r6, #12]
 800e5bc:	b183      	cbz	r3, 800e5e0 <_Balloc+0x50>
 800e5be:	69e3      	ldr	r3, [r4, #28]
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e5c6:	b9b8      	cbnz	r0, 800e5f8 <_Balloc+0x68>
 800e5c8:	2101      	movs	r1, #1
 800e5ca:	fa01 f605 	lsl.w	r6, r1, r5
 800e5ce:	1d72      	adds	r2, r6, #5
 800e5d0:	0092      	lsls	r2, r2, #2
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	f000 ff62 	bl	800f49c <_calloc_r>
 800e5d8:	b160      	cbz	r0, 800e5f4 <_Balloc+0x64>
 800e5da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e5de:	e00e      	b.n	800e5fe <_Balloc+0x6e>
 800e5e0:	2221      	movs	r2, #33	@ 0x21
 800e5e2:	2104      	movs	r1, #4
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	f000 ff59 	bl	800f49c <_calloc_r>
 800e5ea:	69e3      	ldr	r3, [r4, #28]
 800e5ec:	60f0      	str	r0, [r6, #12]
 800e5ee:	68db      	ldr	r3, [r3, #12]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d1e4      	bne.n	800e5be <_Balloc+0x2e>
 800e5f4:	2000      	movs	r0, #0
 800e5f6:	bd70      	pop	{r4, r5, r6, pc}
 800e5f8:	6802      	ldr	r2, [r0, #0]
 800e5fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e5fe:	2300      	movs	r3, #0
 800e600:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e604:	e7f7      	b.n	800e5f6 <_Balloc+0x66>
 800e606:	bf00      	nop
 800e608:	0800fbc6 	.word	0x0800fbc6
 800e60c:	0800fca6 	.word	0x0800fca6

0800e610 <_Bfree>:
 800e610:	b570      	push	{r4, r5, r6, lr}
 800e612:	69c6      	ldr	r6, [r0, #28]
 800e614:	4605      	mov	r5, r0
 800e616:	460c      	mov	r4, r1
 800e618:	b976      	cbnz	r6, 800e638 <_Bfree+0x28>
 800e61a:	2010      	movs	r0, #16
 800e61c:	f7ff fef0 	bl	800e400 <malloc>
 800e620:	4602      	mov	r2, r0
 800e622:	61e8      	str	r0, [r5, #28]
 800e624:	b920      	cbnz	r0, 800e630 <_Bfree+0x20>
 800e626:	4b09      	ldr	r3, [pc, #36]	@ (800e64c <_Bfree+0x3c>)
 800e628:	4809      	ldr	r0, [pc, #36]	@ (800e650 <_Bfree+0x40>)
 800e62a:	218f      	movs	r1, #143	@ 0x8f
 800e62c:	f000 ff18 	bl	800f460 <__assert_func>
 800e630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e634:	6006      	str	r6, [r0, #0]
 800e636:	60c6      	str	r6, [r0, #12]
 800e638:	b13c      	cbz	r4, 800e64a <_Bfree+0x3a>
 800e63a:	69eb      	ldr	r3, [r5, #28]
 800e63c:	6862      	ldr	r2, [r4, #4]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e644:	6021      	str	r1, [r4, #0]
 800e646:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e64a:	bd70      	pop	{r4, r5, r6, pc}
 800e64c:	0800fbc6 	.word	0x0800fbc6
 800e650:	0800fca6 	.word	0x0800fca6

0800e654 <__multadd>:
 800e654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e658:	690d      	ldr	r5, [r1, #16]
 800e65a:	4607      	mov	r7, r0
 800e65c:	460c      	mov	r4, r1
 800e65e:	461e      	mov	r6, r3
 800e660:	f101 0c14 	add.w	ip, r1, #20
 800e664:	2000      	movs	r0, #0
 800e666:	f8dc 3000 	ldr.w	r3, [ip]
 800e66a:	b299      	uxth	r1, r3
 800e66c:	fb02 6101 	mla	r1, r2, r1, r6
 800e670:	0c1e      	lsrs	r6, r3, #16
 800e672:	0c0b      	lsrs	r3, r1, #16
 800e674:	fb02 3306 	mla	r3, r2, r6, r3
 800e678:	b289      	uxth	r1, r1
 800e67a:	3001      	adds	r0, #1
 800e67c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e680:	4285      	cmp	r5, r0
 800e682:	f84c 1b04 	str.w	r1, [ip], #4
 800e686:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e68a:	dcec      	bgt.n	800e666 <__multadd+0x12>
 800e68c:	b30e      	cbz	r6, 800e6d2 <__multadd+0x7e>
 800e68e:	68a3      	ldr	r3, [r4, #8]
 800e690:	42ab      	cmp	r3, r5
 800e692:	dc19      	bgt.n	800e6c8 <__multadd+0x74>
 800e694:	6861      	ldr	r1, [r4, #4]
 800e696:	4638      	mov	r0, r7
 800e698:	3101      	adds	r1, #1
 800e69a:	f7ff ff79 	bl	800e590 <_Balloc>
 800e69e:	4680      	mov	r8, r0
 800e6a0:	b928      	cbnz	r0, 800e6ae <__multadd+0x5a>
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e6d8 <__multadd+0x84>)
 800e6a6:	480d      	ldr	r0, [pc, #52]	@ (800e6dc <__multadd+0x88>)
 800e6a8:	21ba      	movs	r1, #186	@ 0xba
 800e6aa:	f000 fed9 	bl	800f460 <__assert_func>
 800e6ae:	6922      	ldr	r2, [r4, #16]
 800e6b0:	3202      	adds	r2, #2
 800e6b2:	f104 010c 	add.w	r1, r4, #12
 800e6b6:	0092      	lsls	r2, r2, #2
 800e6b8:	300c      	adds	r0, #12
 800e6ba:	f7fe fcb2 	bl	800d022 <memcpy>
 800e6be:	4621      	mov	r1, r4
 800e6c0:	4638      	mov	r0, r7
 800e6c2:	f7ff ffa5 	bl	800e610 <_Bfree>
 800e6c6:	4644      	mov	r4, r8
 800e6c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e6cc:	3501      	adds	r5, #1
 800e6ce:	615e      	str	r6, [r3, #20]
 800e6d0:	6125      	str	r5, [r4, #16]
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6d8:	0800fc35 	.word	0x0800fc35
 800e6dc:	0800fca6 	.word	0x0800fca6

0800e6e0 <__s2b>:
 800e6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6e4:	460c      	mov	r4, r1
 800e6e6:	4615      	mov	r5, r2
 800e6e8:	461f      	mov	r7, r3
 800e6ea:	2209      	movs	r2, #9
 800e6ec:	3308      	adds	r3, #8
 800e6ee:	4606      	mov	r6, r0
 800e6f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e6f4:	2100      	movs	r1, #0
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	db09      	blt.n	800e710 <__s2b+0x30>
 800e6fc:	4630      	mov	r0, r6
 800e6fe:	f7ff ff47 	bl	800e590 <_Balloc>
 800e702:	b940      	cbnz	r0, 800e716 <__s2b+0x36>
 800e704:	4602      	mov	r2, r0
 800e706:	4b19      	ldr	r3, [pc, #100]	@ (800e76c <__s2b+0x8c>)
 800e708:	4819      	ldr	r0, [pc, #100]	@ (800e770 <__s2b+0x90>)
 800e70a:	21d3      	movs	r1, #211	@ 0xd3
 800e70c:	f000 fea8 	bl	800f460 <__assert_func>
 800e710:	0052      	lsls	r2, r2, #1
 800e712:	3101      	adds	r1, #1
 800e714:	e7f0      	b.n	800e6f8 <__s2b+0x18>
 800e716:	9b08      	ldr	r3, [sp, #32]
 800e718:	6143      	str	r3, [r0, #20]
 800e71a:	2d09      	cmp	r5, #9
 800e71c:	f04f 0301 	mov.w	r3, #1
 800e720:	6103      	str	r3, [r0, #16]
 800e722:	dd16      	ble.n	800e752 <__s2b+0x72>
 800e724:	f104 0909 	add.w	r9, r4, #9
 800e728:	46c8      	mov	r8, r9
 800e72a:	442c      	add	r4, r5
 800e72c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e730:	4601      	mov	r1, r0
 800e732:	3b30      	subs	r3, #48	@ 0x30
 800e734:	220a      	movs	r2, #10
 800e736:	4630      	mov	r0, r6
 800e738:	f7ff ff8c 	bl	800e654 <__multadd>
 800e73c:	45a0      	cmp	r8, r4
 800e73e:	d1f5      	bne.n	800e72c <__s2b+0x4c>
 800e740:	f1a5 0408 	sub.w	r4, r5, #8
 800e744:	444c      	add	r4, r9
 800e746:	1b2d      	subs	r5, r5, r4
 800e748:	1963      	adds	r3, r4, r5
 800e74a:	42bb      	cmp	r3, r7
 800e74c:	db04      	blt.n	800e758 <__s2b+0x78>
 800e74e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e752:	340a      	adds	r4, #10
 800e754:	2509      	movs	r5, #9
 800e756:	e7f6      	b.n	800e746 <__s2b+0x66>
 800e758:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e75c:	4601      	mov	r1, r0
 800e75e:	3b30      	subs	r3, #48	@ 0x30
 800e760:	220a      	movs	r2, #10
 800e762:	4630      	mov	r0, r6
 800e764:	f7ff ff76 	bl	800e654 <__multadd>
 800e768:	e7ee      	b.n	800e748 <__s2b+0x68>
 800e76a:	bf00      	nop
 800e76c:	0800fc35 	.word	0x0800fc35
 800e770:	0800fca6 	.word	0x0800fca6

0800e774 <__hi0bits>:
 800e774:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e778:	4603      	mov	r3, r0
 800e77a:	bf36      	itet	cc
 800e77c:	0403      	lslcc	r3, r0, #16
 800e77e:	2000      	movcs	r0, #0
 800e780:	2010      	movcc	r0, #16
 800e782:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e786:	bf3c      	itt	cc
 800e788:	021b      	lslcc	r3, r3, #8
 800e78a:	3008      	addcc	r0, #8
 800e78c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e790:	bf3c      	itt	cc
 800e792:	011b      	lslcc	r3, r3, #4
 800e794:	3004      	addcc	r0, #4
 800e796:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e79a:	bf3c      	itt	cc
 800e79c:	009b      	lslcc	r3, r3, #2
 800e79e:	3002      	addcc	r0, #2
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	db05      	blt.n	800e7b0 <__hi0bits+0x3c>
 800e7a4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e7a8:	f100 0001 	add.w	r0, r0, #1
 800e7ac:	bf08      	it	eq
 800e7ae:	2020      	moveq	r0, #32
 800e7b0:	4770      	bx	lr

0800e7b2 <__lo0bits>:
 800e7b2:	6803      	ldr	r3, [r0, #0]
 800e7b4:	4602      	mov	r2, r0
 800e7b6:	f013 0007 	ands.w	r0, r3, #7
 800e7ba:	d00b      	beq.n	800e7d4 <__lo0bits+0x22>
 800e7bc:	07d9      	lsls	r1, r3, #31
 800e7be:	d421      	bmi.n	800e804 <__lo0bits+0x52>
 800e7c0:	0798      	lsls	r0, r3, #30
 800e7c2:	bf49      	itett	mi
 800e7c4:	085b      	lsrmi	r3, r3, #1
 800e7c6:	089b      	lsrpl	r3, r3, #2
 800e7c8:	2001      	movmi	r0, #1
 800e7ca:	6013      	strmi	r3, [r2, #0]
 800e7cc:	bf5c      	itt	pl
 800e7ce:	6013      	strpl	r3, [r2, #0]
 800e7d0:	2002      	movpl	r0, #2
 800e7d2:	4770      	bx	lr
 800e7d4:	b299      	uxth	r1, r3
 800e7d6:	b909      	cbnz	r1, 800e7dc <__lo0bits+0x2a>
 800e7d8:	0c1b      	lsrs	r3, r3, #16
 800e7da:	2010      	movs	r0, #16
 800e7dc:	b2d9      	uxtb	r1, r3
 800e7de:	b909      	cbnz	r1, 800e7e4 <__lo0bits+0x32>
 800e7e0:	3008      	adds	r0, #8
 800e7e2:	0a1b      	lsrs	r3, r3, #8
 800e7e4:	0719      	lsls	r1, r3, #28
 800e7e6:	bf04      	itt	eq
 800e7e8:	091b      	lsreq	r3, r3, #4
 800e7ea:	3004      	addeq	r0, #4
 800e7ec:	0799      	lsls	r1, r3, #30
 800e7ee:	bf04      	itt	eq
 800e7f0:	089b      	lsreq	r3, r3, #2
 800e7f2:	3002      	addeq	r0, #2
 800e7f4:	07d9      	lsls	r1, r3, #31
 800e7f6:	d403      	bmi.n	800e800 <__lo0bits+0x4e>
 800e7f8:	085b      	lsrs	r3, r3, #1
 800e7fa:	f100 0001 	add.w	r0, r0, #1
 800e7fe:	d003      	beq.n	800e808 <__lo0bits+0x56>
 800e800:	6013      	str	r3, [r2, #0]
 800e802:	4770      	bx	lr
 800e804:	2000      	movs	r0, #0
 800e806:	4770      	bx	lr
 800e808:	2020      	movs	r0, #32
 800e80a:	4770      	bx	lr

0800e80c <__i2b>:
 800e80c:	b510      	push	{r4, lr}
 800e80e:	460c      	mov	r4, r1
 800e810:	2101      	movs	r1, #1
 800e812:	f7ff febd 	bl	800e590 <_Balloc>
 800e816:	4602      	mov	r2, r0
 800e818:	b928      	cbnz	r0, 800e826 <__i2b+0x1a>
 800e81a:	4b05      	ldr	r3, [pc, #20]	@ (800e830 <__i2b+0x24>)
 800e81c:	4805      	ldr	r0, [pc, #20]	@ (800e834 <__i2b+0x28>)
 800e81e:	f240 1145 	movw	r1, #325	@ 0x145
 800e822:	f000 fe1d 	bl	800f460 <__assert_func>
 800e826:	2301      	movs	r3, #1
 800e828:	6144      	str	r4, [r0, #20]
 800e82a:	6103      	str	r3, [r0, #16]
 800e82c:	bd10      	pop	{r4, pc}
 800e82e:	bf00      	nop
 800e830:	0800fc35 	.word	0x0800fc35
 800e834:	0800fca6 	.word	0x0800fca6

0800e838 <__multiply>:
 800e838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e83c:	4614      	mov	r4, r2
 800e83e:	690a      	ldr	r2, [r1, #16]
 800e840:	6923      	ldr	r3, [r4, #16]
 800e842:	429a      	cmp	r2, r3
 800e844:	bfa8      	it	ge
 800e846:	4623      	movge	r3, r4
 800e848:	460f      	mov	r7, r1
 800e84a:	bfa4      	itt	ge
 800e84c:	460c      	movge	r4, r1
 800e84e:	461f      	movge	r7, r3
 800e850:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e854:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e858:	68a3      	ldr	r3, [r4, #8]
 800e85a:	6861      	ldr	r1, [r4, #4]
 800e85c:	eb0a 0609 	add.w	r6, sl, r9
 800e860:	42b3      	cmp	r3, r6
 800e862:	b085      	sub	sp, #20
 800e864:	bfb8      	it	lt
 800e866:	3101      	addlt	r1, #1
 800e868:	f7ff fe92 	bl	800e590 <_Balloc>
 800e86c:	b930      	cbnz	r0, 800e87c <__multiply+0x44>
 800e86e:	4602      	mov	r2, r0
 800e870:	4b44      	ldr	r3, [pc, #272]	@ (800e984 <__multiply+0x14c>)
 800e872:	4845      	ldr	r0, [pc, #276]	@ (800e988 <__multiply+0x150>)
 800e874:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e878:	f000 fdf2 	bl	800f460 <__assert_func>
 800e87c:	f100 0514 	add.w	r5, r0, #20
 800e880:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e884:	462b      	mov	r3, r5
 800e886:	2200      	movs	r2, #0
 800e888:	4543      	cmp	r3, r8
 800e88a:	d321      	bcc.n	800e8d0 <__multiply+0x98>
 800e88c:	f107 0114 	add.w	r1, r7, #20
 800e890:	f104 0214 	add.w	r2, r4, #20
 800e894:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e898:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e89c:	9302      	str	r3, [sp, #8]
 800e89e:	1b13      	subs	r3, r2, r4
 800e8a0:	3b15      	subs	r3, #21
 800e8a2:	f023 0303 	bic.w	r3, r3, #3
 800e8a6:	3304      	adds	r3, #4
 800e8a8:	f104 0715 	add.w	r7, r4, #21
 800e8ac:	42ba      	cmp	r2, r7
 800e8ae:	bf38      	it	cc
 800e8b0:	2304      	movcc	r3, #4
 800e8b2:	9301      	str	r3, [sp, #4]
 800e8b4:	9b02      	ldr	r3, [sp, #8]
 800e8b6:	9103      	str	r1, [sp, #12]
 800e8b8:	428b      	cmp	r3, r1
 800e8ba:	d80c      	bhi.n	800e8d6 <__multiply+0x9e>
 800e8bc:	2e00      	cmp	r6, #0
 800e8be:	dd03      	ble.n	800e8c8 <__multiply+0x90>
 800e8c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d05b      	beq.n	800e980 <__multiply+0x148>
 800e8c8:	6106      	str	r6, [r0, #16]
 800e8ca:	b005      	add	sp, #20
 800e8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8d0:	f843 2b04 	str.w	r2, [r3], #4
 800e8d4:	e7d8      	b.n	800e888 <__multiply+0x50>
 800e8d6:	f8b1 a000 	ldrh.w	sl, [r1]
 800e8da:	f1ba 0f00 	cmp.w	sl, #0
 800e8de:	d024      	beq.n	800e92a <__multiply+0xf2>
 800e8e0:	f104 0e14 	add.w	lr, r4, #20
 800e8e4:	46a9      	mov	r9, r5
 800e8e6:	f04f 0c00 	mov.w	ip, #0
 800e8ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e8ee:	f8d9 3000 	ldr.w	r3, [r9]
 800e8f2:	fa1f fb87 	uxth.w	fp, r7
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e8fc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e900:	f8d9 7000 	ldr.w	r7, [r9]
 800e904:	4463      	add	r3, ip
 800e906:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e90a:	fb0a c70b 	mla	r7, sl, fp, ip
 800e90e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e912:	b29b      	uxth	r3, r3
 800e914:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e918:	4572      	cmp	r2, lr
 800e91a:	f849 3b04 	str.w	r3, [r9], #4
 800e91e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e922:	d8e2      	bhi.n	800e8ea <__multiply+0xb2>
 800e924:	9b01      	ldr	r3, [sp, #4]
 800e926:	f845 c003 	str.w	ip, [r5, r3]
 800e92a:	9b03      	ldr	r3, [sp, #12]
 800e92c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e930:	3104      	adds	r1, #4
 800e932:	f1b9 0f00 	cmp.w	r9, #0
 800e936:	d021      	beq.n	800e97c <__multiply+0x144>
 800e938:	682b      	ldr	r3, [r5, #0]
 800e93a:	f104 0c14 	add.w	ip, r4, #20
 800e93e:	46ae      	mov	lr, r5
 800e940:	f04f 0a00 	mov.w	sl, #0
 800e944:	f8bc b000 	ldrh.w	fp, [ip]
 800e948:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e94c:	fb09 770b 	mla	r7, r9, fp, r7
 800e950:	4457      	add	r7, sl
 800e952:	b29b      	uxth	r3, r3
 800e954:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e958:	f84e 3b04 	str.w	r3, [lr], #4
 800e95c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e960:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e964:	f8be 3000 	ldrh.w	r3, [lr]
 800e968:	fb09 330a 	mla	r3, r9, sl, r3
 800e96c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e970:	4562      	cmp	r2, ip
 800e972:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e976:	d8e5      	bhi.n	800e944 <__multiply+0x10c>
 800e978:	9f01      	ldr	r7, [sp, #4]
 800e97a:	51eb      	str	r3, [r5, r7]
 800e97c:	3504      	adds	r5, #4
 800e97e:	e799      	b.n	800e8b4 <__multiply+0x7c>
 800e980:	3e01      	subs	r6, #1
 800e982:	e79b      	b.n	800e8bc <__multiply+0x84>
 800e984:	0800fc35 	.word	0x0800fc35
 800e988:	0800fca6 	.word	0x0800fca6

0800e98c <__pow5mult>:
 800e98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e990:	4615      	mov	r5, r2
 800e992:	f012 0203 	ands.w	r2, r2, #3
 800e996:	4607      	mov	r7, r0
 800e998:	460e      	mov	r6, r1
 800e99a:	d007      	beq.n	800e9ac <__pow5mult+0x20>
 800e99c:	4c25      	ldr	r4, [pc, #148]	@ (800ea34 <__pow5mult+0xa8>)
 800e99e:	3a01      	subs	r2, #1
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e9a6:	f7ff fe55 	bl	800e654 <__multadd>
 800e9aa:	4606      	mov	r6, r0
 800e9ac:	10ad      	asrs	r5, r5, #2
 800e9ae:	d03d      	beq.n	800ea2c <__pow5mult+0xa0>
 800e9b0:	69fc      	ldr	r4, [r7, #28]
 800e9b2:	b97c      	cbnz	r4, 800e9d4 <__pow5mult+0x48>
 800e9b4:	2010      	movs	r0, #16
 800e9b6:	f7ff fd23 	bl	800e400 <malloc>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	61f8      	str	r0, [r7, #28]
 800e9be:	b928      	cbnz	r0, 800e9cc <__pow5mult+0x40>
 800e9c0:	4b1d      	ldr	r3, [pc, #116]	@ (800ea38 <__pow5mult+0xac>)
 800e9c2:	481e      	ldr	r0, [pc, #120]	@ (800ea3c <__pow5mult+0xb0>)
 800e9c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e9c8:	f000 fd4a 	bl	800f460 <__assert_func>
 800e9cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e9d0:	6004      	str	r4, [r0, #0]
 800e9d2:	60c4      	str	r4, [r0, #12]
 800e9d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e9d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e9dc:	b94c      	cbnz	r4, 800e9f2 <__pow5mult+0x66>
 800e9de:	f240 2171 	movw	r1, #625	@ 0x271
 800e9e2:	4638      	mov	r0, r7
 800e9e4:	f7ff ff12 	bl	800e80c <__i2b>
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	6003      	str	r3, [r0, #0]
 800e9f2:	f04f 0900 	mov.w	r9, #0
 800e9f6:	07eb      	lsls	r3, r5, #31
 800e9f8:	d50a      	bpl.n	800ea10 <__pow5mult+0x84>
 800e9fa:	4631      	mov	r1, r6
 800e9fc:	4622      	mov	r2, r4
 800e9fe:	4638      	mov	r0, r7
 800ea00:	f7ff ff1a 	bl	800e838 <__multiply>
 800ea04:	4631      	mov	r1, r6
 800ea06:	4680      	mov	r8, r0
 800ea08:	4638      	mov	r0, r7
 800ea0a:	f7ff fe01 	bl	800e610 <_Bfree>
 800ea0e:	4646      	mov	r6, r8
 800ea10:	106d      	asrs	r5, r5, #1
 800ea12:	d00b      	beq.n	800ea2c <__pow5mult+0xa0>
 800ea14:	6820      	ldr	r0, [r4, #0]
 800ea16:	b938      	cbnz	r0, 800ea28 <__pow5mult+0x9c>
 800ea18:	4622      	mov	r2, r4
 800ea1a:	4621      	mov	r1, r4
 800ea1c:	4638      	mov	r0, r7
 800ea1e:	f7ff ff0b 	bl	800e838 <__multiply>
 800ea22:	6020      	str	r0, [r4, #0]
 800ea24:	f8c0 9000 	str.w	r9, [r0]
 800ea28:	4604      	mov	r4, r0
 800ea2a:	e7e4      	b.n	800e9f6 <__pow5mult+0x6a>
 800ea2c:	4630      	mov	r0, r6
 800ea2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea32:	bf00      	nop
 800ea34:	0800fd00 	.word	0x0800fd00
 800ea38:	0800fbc6 	.word	0x0800fbc6
 800ea3c:	0800fca6 	.word	0x0800fca6

0800ea40 <__lshift>:
 800ea40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea44:	460c      	mov	r4, r1
 800ea46:	6849      	ldr	r1, [r1, #4]
 800ea48:	6923      	ldr	r3, [r4, #16]
 800ea4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea4e:	68a3      	ldr	r3, [r4, #8]
 800ea50:	4607      	mov	r7, r0
 800ea52:	4691      	mov	r9, r2
 800ea54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea58:	f108 0601 	add.w	r6, r8, #1
 800ea5c:	42b3      	cmp	r3, r6
 800ea5e:	db0b      	blt.n	800ea78 <__lshift+0x38>
 800ea60:	4638      	mov	r0, r7
 800ea62:	f7ff fd95 	bl	800e590 <_Balloc>
 800ea66:	4605      	mov	r5, r0
 800ea68:	b948      	cbnz	r0, 800ea7e <__lshift+0x3e>
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	4b28      	ldr	r3, [pc, #160]	@ (800eb10 <__lshift+0xd0>)
 800ea6e:	4829      	ldr	r0, [pc, #164]	@ (800eb14 <__lshift+0xd4>)
 800ea70:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ea74:	f000 fcf4 	bl	800f460 <__assert_func>
 800ea78:	3101      	adds	r1, #1
 800ea7a:	005b      	lsls	r3, r3, #1
 800ea7c:	e7ee      	b.n	800ea5c <__lshift+0x1c>
 800ea7e:	2300      	movs	r3, #0
 800ea80:	f100 0114 	add.w	r1, r0, #20
 800ea84:	f100 0210 	add.w	r2, r0, #16
 800ea88:	4618      	mov	r0, r3
 800ea8a:	4553      	cmp	r3, sl
 800ea8c:	db33      	blt.n	800eaf6 <__lshift+0xb6>
 800ea8e:	6920      	ldr	r0, [r4, #16]
 800ea90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea94:	f104 0314 	add.w	r3, r4, #20
 800ea98:	f019 091f 	ands.w	r9, r9, #31
 800ea9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eaa0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eaa4:	d02b      	beq.n	800eafe <__lshift+0xbe>
 800eaa6:	f1c9 0e20 	rsb	lr, r9, #32
 800eaaa:	468a      	mov	sl, r1
 800eaac:	2200      	movs	r2, #0
 800eaae:	6818      	ldr	r0, [r3, #0]
 800eab0:	fa00 f009 	lsl.w	r0, r0, r9
 800eab4:	4310      	orrs	r0, r2
 800eab6:	f84a 0b04 	str.w	r0, [sl], #4
 800eaba:	f853 2b04 	ldr.w	r2, [r3], #4
 800eabe:	459c      	cmp	ip, r3
 800eac0:	fa22 f20e 	lsr.w	r2, r2, lr
 800eac4:	d8f3      	bhi.n	800eaae <__lshift+0x6e>
 800eac6:	ebac 0304 	sub.w	r3, ip, r4
 800eaca:	3b15      	subs	r3, #21
 800eacc:	f023 0303 	bic.w	r3, r3, #3
 800ead0:	3304      	adds	r3, #4
 800ead2:	f104 0015 	add.w	r0, r4, #21
 800ead6:	4584      	cmp	ip, r0
 800ead8:	bf38      	it	cc
 800eada:	2304      	movcc	r3, #4
 800eadc:	50ca      	str	r2, [r1, r3]
 800eade:	b10a      	cbz	r2, 800eae4 <__lshift+0xa4>
 800eae0:	f108 0602 	add.w	r6, r8, #2
 800eae4:	3e01      	subs	r6, #1
 800eae6:	4638      	mov	r0, r7
 800eae8:	612e      	str	r6, [r5, #16]
 800eaea:	4621      	mov	r1, r4
 800eaec:	f7ff fd90 	bl	800e610 <_Bfree>
 800eaf0:	4628      	mov	r0, r5
 800eaf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eaf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800eafa:	3301      	adds	r3, #1
 800eafc:	e7c5      	b.n	800ea8a <__lshift+0x4a>
 800eafe:	3904      	subs	r1, #4
 800eb00:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb04:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb08:	459c      	cmp	ip, r3
 800eb0a:	d8f9      	bhi.n	800eb00 <__lshift+0xc0>
 800eb0c:	e7ea      	b.n	800eae4 <__lshift+0xa4>
 800eb0e:	bf00      	nop
 800eb10:	0800fc35 	.word	0x0800fc35
 800eb14:	0800fca6 	.word	0x0800fca6

0800eb18 <__mcmp>:
 800eb18:	690a      	ldr	r2, [r1, #16]
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	6900      	ldr	r0, [r0, #16]
 800eb1e:	1a80      	subs	r0, r0, r2
 800eb20:	b530      	push	{r4, r5, lr}
 800eb22:	d10e      	bne.n	800eb42 <__mcmp+0x2a>
 800eb24:	3314      	adds	r3, #20
 800eb26:	3114      	adds	r1, #20
 800eb28:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eb2c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eb30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eb34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eb38:	4295      	cmp	r5, r2
 800eb3a:	d003      	beq.n	800eb44 <__mcmp+0x2c>
 800eb3c:	d205      	bcs.n	800eb4a <__mcmp+0x32>
 800eb3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb42:	bd30      	pop	{r4, r5, pc}
 800eb44:	42a3      	cmp	r3, r4
 800eb46:	d3f3      	bcc.n	800eb30 <__mcmp+0x18>
 800eb48:	e7fb      	b.n	800eb42 <__mcmp+0x2a>
 800eb4a:	2001      	movs	r0, #1
 800eb4c:	e7f9      	b.n	800eb42 <__mcmp+0x2a>
	...

0800eb50 <__mdiff>:
 800eb50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb54:	4689      	mov	r9, r1
 800eb56:	4606      	mov	r6, r0
 800eb58:	4611      	mov	r1, r2
 800eb5a:	4648      	mov	r0, r9
 800eb5c:	4614      	mov	r4, r2
 800eb5e:	f7ff ffdb 	bl	800eb18 <__mcmp>
 800eb62:	1e05      	subs	r5, r0, #0
 800eb64:	d112      	bne.n	800eb8c <__mdiff+0x3c>
 800eb66:	4629      	mov	r1, r5
 800eb68:	4630      	mov	r0, r6
 800eb6a:	f7ff fd11 	bl	800e590 <_Balloc>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	b928      	cbnz	r0, 800eb7e <__mdiff+0x2e>
 800eb72:	4b3f      	ldr	r3, [pc, #252]	@ (800ec70 <__mdiff+0x120>)
 800eb74:	f240 2137 	movw	r1, #567	@ 0x237
 800eb78:	483e      	ldr	r0, [pc, #248]	@ (800ec74 <__mdiff+0x124>)
 800eb7a:	f000 fc71 	bl	800f460 <__assert_func>
 800eb7e:	2301      	movs	r3, #1
 800eb80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb84:	4610      	mov	r0, r2
 800eb86:	b003      	add	sp, #12
 800eb88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb8c:	bfbc      	itt	lt
 800eb8e:	464b      	movlt	r3, r9
 800eb90:	46a1      	movlt	r9, r4
 800eb92:	4630      	mov	r0, r6
 800eb94:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800eb98:	bfba      	itte	lt
 800eb9a:	461c      	movlt	r4, r3
 800eb9c:	2501      	movlt	r5, #1
 800eb9e:	2500      	movge	r5, #0
 800eba0:	f7ff fcf6 	bl	800e590 <_Balloc>
 800eba4:	4602      	mov	r2, r0
 800eba6:	b918      	cbnz	r0, 800ebb0 <__mdiff+0x60>
 800eba8:	4b31      	ldr	r3, [pc, #196]	@ (800ec70 <__mdiff+0x120>)
 800ebaa:	f240 2145 	movw	r1, #581	@ 0x245
 800ebae:	e7e3      	b.n	800eb78 <__mdiff+0x28>
 800ebb0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ebb4:	6926      	ldr	r6, [r4, #16]
 800ebb6:	60c5      	str	r5, [r0, #12]
 800ebb8:	f109 0310 	add.w	r3, r9, #16
 800ebbc:	f109 0514 	add.w	r5, r9, #20
 800ebc0:	f104 0e14 	add.w	lr, r4, #20
 800ebc4:	f100 0b14 	add.w	fp, r0, #20
 800ebc8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ebcc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ebd0:	9301      	str	r3, [sp, #4]
 800ebd2:	46d9      	mov	r9, fp
 800ebd4:	f04f 0c00 	mov.w	ip, #0
 800ebd8:	9b01      	ldr	r3, [sp, #4]
 800ebda:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ebde:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ebe2:	9301      	str	r3, [sp, #4]
 800ebe4:	fa1f f38a 	uxth.w	r3, sl
 800ebe8:	4619      	mov	r1, r3
 800ebea:	b283      	uxth	r3, r0
 800ebec:	1acb      	subs	r3, r1, r3
 800ebee:	0c00      	lsrs	r0, r0, #16
 800ebf0:	4463      	add	r3, ip
 800ebf2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ebf6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ebfa:	b29b      	uxth	r3, r3
 800ebfc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ec00:	4576      	cmp	r6, lr
 800ec02:	f849 3b04 	str.w	r3, [r9], #4
 800ec06:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ec0a:	d8e5      	bhi.n	800ebd8 <__mdiff+0x88>
 800ec0c:	1b33      	subs	r3, r6, r4
 800ec0e:	3b15      	subs	r3, #21
 800ec10:	f023 0303 	bic.w	r3, r3, #3
 800ec14:	3415      	adds	r4, #21
 800ec16:	3304      	adds	r3, #4
 800ec18:	42a6      	cmp	r6, r4
 800ec1a:	bf38      	it	cc
 800ec1c:	2304      	movcc	r3, #4
 800ec1e:	441d      	add	r5, r3
 800ec20:	445b      	add	r3, fp
 800ec22:	461e      	mov	r6, r3
 800ec24:	462c      	mov	r4, r5
 800ec26:	4544      	cmp	r4, r8
 800ec28:	d30e      	bcc.n	800ec48 <__mdiff+0xf8>
 800ec2a:	f108 0103 	add.w	r1, r8, #3
 800ec2e:	1b49      	subs	r1, r1, r5
 800ec30:	f021 0103 	bic.w	r1, r1, #3
 800ec34:	3d03      	subs	r5, #3
 800ec36:	45a8      	cmp	r8, r5
 800ec38:	bf38      	it	cc
 800ec3a:	2100      	movcc	r1, #0
 800ec3c:	440b      	add	r3, r1
 800ec3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ec42:	b191      	cbz	r1, 800ec6a <__mdiff+0x11a>
 800ec44:	6117      	str	r7, [r2, #16]
 800ec46:	e79d      	b.n	800eb84 <__mdiff+0x34>
 800ec48:	f854 1b04 	ldr.w	r1, [r4], #4
 800ec4c:	46e6      	mov	lr, ip
 800ec4e:	0c08      	lsrs	r0, r1, #16
 800ec50:	fa1c fc81 	uxtah	ip, ip, r1
 800ec54:	4471      	add	r1, lr
 800ec56:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ec5a:	b289      	uxth	r1, r1
 800ec5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ec60:	f846 1b04 	str.w	r1, [r6], #4
 800ec64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ec68:	e7dd      	b.n	800ec26 <__mdiff+0xd6>
 800ec6a:	3f01      	subs	r7, #1
 800ec6c:	e7e7      	b.n	800ec3e <__mdiff+0xee>
 800ec6e:	bf00      	nop
 800ec70:	0800fc35 	.word	0x0800fc35
 800ec74:	0800fca6 	.word	0x0800fca6

0800ec78 <__ulp>:
 800ec78:	b082      	sub	sp, #8
 800ec7a:	ed8d 0b00 	vstr	d0, [sp]
 800ec7e:	9a01      	ldr	r2, [sp, #4]
 800ec80:	4b0f      	ldr	r3, [pc, #60]	@ (800ecc0 <__ulp+0x48>)
 800ec82:	4013      	ands	r3, r2
 800ec84:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	dc08      	bgt.n	800ec9e <__ulp+0x26>
 800ec8c:	425b      	negs	r3, r3
 800ec8e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ec92:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ec96:	da04      	bge.n	800eca2 <__ulp+0x2a>
 800ec98:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ec9c:	4113      	asrs	r3, r2
 800ec9e:	2200      	movs	r2, #0
 800eca0:	e008      	b.n	800ecb4 <__ulp+0x3c>
 800eca2:	f1a2 0314 	sub.w	r3, r2, #20
 800eca6:	2b1e      	cmp	r3, #30
 800eca8:	bfda      	itte	le
 800ecaa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ecae:	40da      	lsrle	r2, r3
 800ecb0:	2201      	movgt	r2, #1
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	4610      	mov	r0, r2
 800ecb8:	ec41 0b10 	vmov	d0, r0, r1
 800ecbc:	b002      	add	sp, #8
 800ecbe:	4770      	bx	lr
 800ecc0:	7ff00000 	.word	0x7ff00000

0800ecc4 <__b2d>:
 800ecc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ecc8:	6906      	ldr	r6, [r0, #16]
 800ecca:	f100 0814 	add.w	r8, r0, #20
 800ecce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ecd2:	1f37      	subs	r7, r6, #4
 800ecd4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ecd8:	4610      	mov	r0, r2
 800ecda:	f7ff fd4b 	bl	800e774 <__hi0bits>
 800ecde:	f1c0 0320 	rsb	r3, r0, #32
 800ece2:	280a      	cmp	r0, #10
 800ece4:	600b      	str	r3, [r1, #0]
 800ece6:	491b      	ldr	r1, [pc, #108]	@ (800ed54 <__b2d+0x90>)
 800ece8:	dc15      	bgt.n	800ed16 <__b2d+0x52>
 800ecea:	f1c0 0c0b 	rsb	ip, r0, #11
 800ecee:	fa22 f30c 	lsr.w	r3, r2, ip
 800ecf2:	45b8      	cmp	r8, r7
 800ecf4:	ea43 0501 	orr.w	r5, r3, r1
 800ecf8:	bf34      	ite	cc
 800ecfa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ecfe:	2300      	movcs	r3, #0
 800ed00:	3015      	adds	r0, #21
 800ed02:	fa02 f000 	lsl.w	r0, r2, r0
 800ed06:	fa23 f30c 	lsr.w	r3, r3, ip
 800ed0a:	4303      	orrs	r3, r0
 800ed0c:	461c      	mov	r4, r3
 800ed0e:	ec45 4b10 	vmov	d0, r4, r5
 800ed12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed16:	45b8      	cmp	r8, r7
 800ed18:	bf3a      	itte	cc
 800ed1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ed1e:	f1a6 0708 	subcc.w	r7, r6, #8
 800ed22:	2300      	movcs	r3, #0
 800ed24:	380b      	subs	r0, #11
 800ed26:	d012      	beq.n	800ed4e <__b2d+0x8a>
 800ed28:	f1c0 0120 	rsb	r1, r0, #32
 800ed2c:	fa23 f401 	lsr.w	r4, r3, r1
 800ed30:	4082      	lsls	r2, r0
 800ed32:	4322      	orrs	r2, r4
 800ed34:	4547      	cmp	r7, r8
 800ed36:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ed3a:	bf8c      	ite	hi
 800ed3c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ed40:	2200      	movls	r2, #0
 800ed42:	4083      	lsls	r3, r0
 800ed44:	40ca      	lsrs	r2, r1
 800ed46:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	e7de      	b.n	800ed0c <__b2d+0x48>
 800ed4e:	ea42 0501 	orr.w	r5, r2, r1
 800ed52:	e7db      	b.n	800ed0c <__b2d+0x48>
 800ed54:	3ff00000 	.word	0x3ff00000

0800ed58 <__d2b>:
 800ed58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ed5c:	460f      	mov	r7, r1
 800ed5e:	2101      	movs	r1, #1
 800ed60:	ec59 8b10 	vmov	r8, r9, d0
 800ed64:	4616      	mov	r6, r2
 800ed66:	f7ff fc13 	bl	800e590 <_Balloc>
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	b930      	cbnz	r0, 800ed7c <__d2b+0x24>
 800ed6e:	4602      	mov	r2, r0
 800ed70:	4b23      	ldr	r3, [pc, #140]	@ (800ee00 <__d2b+0xa8>)
 800ed72:	4824      	ldr	r0, [pc, #144]	@ (800ee04 <__d2b+0xac>)
 800ed74:	f240 310f 	movw	r1, #783	@ 0x30f
 800ed78:	f000 fb72 	bl	800f460 <__assert_func>
 800ed7c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ed80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ed84:	b10d      	cbz	r5, 800ed8a <__d2b+0x32>
 800ed86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ed8a:	9301      	str	r3, [sp, #4]
 800ed8c:	f1b8 0300 	subs.w	r3, r8, #0
 800ed90:	d023      	beq.n	800edda <__d2b+0x82>
 800ed92:	4668      	mov	r0, sp
 800ed94:	9300      	str	r3, [sp, #0]
 800ed96:	f7ff fd0c 	bl	800e7b2 <__lo0bits>
 800ed9a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ed9e:	b1d0      	cbz	r0, 800edd6 <__d2b+0x7e>
 800eda0:	f1c0 0320 	rsb	r3, r0, #32
 800eda4:	fa02 f303 	lsl.w	r3, r2, r3
 800eda8:	430b      	orrs	r3, r1
 800edaa:	40c2      	lsrs	r2, r0
 800edac:	6163      	str	r3, [r4, #20]
 800edae:	9201      	str	r2, [sp, #4]
 800edb0:	9b01      	ldr	r3, [sp, #4]
 800edb2:	61a3      	str	r3, [r4, #24]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	bf0c      	ite	eq
 800edb8:	2201      	moveq	r2, #1
 800edba:	2202      	movne	r2, #2
 800edbc:	6122      	str	r2, [r4, #16]
 800edbe:	b1a5      	cbz	r5, 800edea <__d2b+0x92>
 800edc0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800edc4:	4405      	add	r5, r0
 800edc6:	603d      	str	r5, [r7, #0]
 800edc8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800edcc:	6030      	str	r0, [r6, #0]
 800edce:	4620      	mov	r0, r4
 800edd0:	b003      	add	sp, #12
 800edd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800edd6:	6161      	str	r1, [r4, #20]
 800edd8:	e7ea      	b.n	800edb0 <__d2b+0x58>
 800edda:	a801      	add	r0, sp, #4
 800eddc:	f7ff fce9 	bl	800e7b2 <__lo0bits>
 800ede0:	9b01      	ldr	r3, [sp, #4]
 800ede2:	6163      	str	r3, [r4, #20]
 800ede4:	3020      	adds	r0, #32
 800ede6:	2201      	movs	r2, #1
 800ede8:	e7e8      	b.n	800edbc <__d2b+0x64>
 800edea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800edee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800edf2:	6038      	str	r0, [r7, #0]
 800edf4:	6918      	ldr	r0, [r3, #16]
 800edf6:	f7ff fcbd 	bl	800e774 <__hi0bits>
 800edfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800edfe:	e7e5      	b.n	800edcc <__d2b+0x74>
 800ee00:	0800fc35 	.word	0x0800fc35
 800ee04:	0800fca6 	.word	0x0800fca6

0800ee08 <__ratio>:
 800ee08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee0c:	b085      	sub	sp, #20
 800ee0e:	e9cd 1000 	strd	r1, r0, [sp]
 800ee12:	a902      	add	r1, sp, #8
 800ee14:	f7ff ff56 	bl	800ecc4 <__b2d>
 800ee18:	9800      	ldr	r0, [sp, #0]
 800ee1a:	a903      	add	r1, sp, #12
 800ee1c:	ec55 4b10 	vmov	r4, r5, d0
 800ee20:	f7ff ff50 	bl	800ecc4 <__b2d>
 800ee24:	9b01      	ldr	r3, [sp, #4]
 800ee26:	6919      	ldr	r1, [r3, #16]
 800ee28:	9b00      	ldr	r3, [sp, #0]
 800ee2a:	691b      	ldr	r3, [r3, #16]
 800ee2c:	1ac9      	subs	r1, r1, r3
 800ee2e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ee32:	1a9b      	subs	r3, r3, r2
 800ee34:	ec5b ab10 	vmov	sl, fp, d0
 800ee38:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	bfce      	itee	gt
 800ee40:	462a      	movgt	r2, r5
 800ee42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ee46:	465a      	movle	r2, fp
 800ee48:	462f      	mov	r7, r5
 800ee4a:	46d9      	mov	r9, fp
 800ee4c:	bfcc      	ite	gt
 800ee4e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ee52:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ee56:	464b      	mov	r3, r9
 800ee58:	4652      	mov	r2, sl
 800ee5a:	4620      	mov	r0, r4
 800ee5c:	4639      	mov	r1, r7
 800ee5e:	f7f1 fcfd 	bl	800085c <__aeabi_ddiv>
 800ee62:	ec41 0b10 	vmov	d0, r0, r1
 800ee66:	b005      	add	sp, #20
 800ee68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ee6c <__copybits>:
 800ee6c:	3901      	subs	r1, #1
 800ee6e:	b570      	push	{r4, r5, r6, lr}
 800ee70:	1149      	asrs	r1, r1, #5
 800ee72:	6914      	ldr	r4, [r2, #16]
 800ee74:	3101      	adds	r1, #1
 800ee76:	f102 0314 	add.w	r3, r2, #20
 800ee7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ee7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ee82:	1f05      	subs	r5, r0, #4
 800ee84:	42a3      	cmp	r3, r4
 800ee86:	d30c      	bcc.n	800eea2 <__copybits+0x36>
 800ee88:	1aa3      	subs	r3, r4, r2
 800ee8a:	3b11      	subs	r3, #17
 800ee8c:	f023 0303 	bic.w	r3, r3, #3
 800ee90:	3211      	adds	r2, #17
 800ee92:	42a2      	cmp	r2, r4
 800ee94:	bf88      	it	hi
 800ee96:	2300      	movhi	r3, #0
 800ee98:	4418      	add	r0, r3
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	4288      	cmp	r0, r1
 800ee9e:	d305      	bcc.n	800eeac <__copybits+0x40>
 800eea0:	bd70      	pop	{r4, r5, r6, pc}
 800eea2:	f853 6b04 	ldr.w	r6, [r3], #4
 800eea6:	f845 6f04 	str.w	r6, [r5, #4]!
 800eeaa:	e7eb      	b.n	800ee84 <__copybits+0x18>
 800eeac:	f840 3b04 	str.w	r3, [r0], #4
 800eeb0:	e7f4      	b.n	800ee9c <__copybits+0x30>

0800eeb2 <__any_on>:
 800eeb2:	f100 0214 	add.w	r2, r0, #20
 800eeb6:	6900      	ldr	r0, [r0, #16]
 800eeb8:	114b      	asrs	r3, r1, #5
 800eeba:	4298      	cmp	r0, r3
 800eebc:	b510      	push	{r4, lr}
 800eebe:	db11      	blt.n	800eee4 <__any_on+0x32>
 800eec0:	dd0a      	ble.n	800eed8 <__any_on+0x26>
 800eec2:	f011 011f 	ands.w	r1, r1, #31
 800eec6:	d007      	beq.n	800eed8 <__any_on+0x26>
 800eec8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eecc:	fa24 f001 	lsr.w	r0, r4, r1
 800eed0:	fa00 f101 	lsl.w	r1, r0, r1
 800eed4:	428c      	cmp	r4, r1
 800eed6:	d10b      	bne.n	800eef0 <__any_on+0x3e>
 800eed8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eedc:	4293      	cmp	r3, r2
 800eede:	d803      	bhi.n	800eee8 <__any_on+0x36>
 800eee0:	2000      	movs	r0, #0
 800eee2:	bd10      	pop	{r4, pc}
 800eee4:	4603      	mov	r3, r0
 800eee6:	e7f7      	b.n	800eed8 <__any_on+0x26>
 800eee8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eeec:	2900      	cmp	r1, #0
 800eeee:	d0f5      	beq.n	800eedc <__any_on+0x2a>
 800eef0:	2001      	movs	r0, #1
 800eef2:	e7f6      	b.n	800eee2 <__any_on+0x30>

0800eef4 <_strtol_l.constprop.0>:
 800eef4:	2b24      	cmp	r3, #36	@ 0x24
 800eef6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eefa:	4686      	mov	lr, r0
 800eefc:	4690      	mov	r8, r2
 800eefe:	d801      	bhi.n	800ef04 <_strtol_l.constprop.0+0x10>
 800ef00:	2b01      	cmp	r3, #1
 800ef02:	d106      	bne.n	800ef12 <_strtol_l.constprop.0+0x1e>
 800ef04:	f7fe f860 	bl	800cfc8 <__errno>
 800ef08:	2316      	movs	r3, #22
 800ef0a:	6003      	str	r3, [r0, #0]
 800ef0c:	2000      	movs	r0, #0
 800ef0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef12:	4834      	ldr	r0, [pc, #208]	@ (800efe4 <_strtol_l.constprop.0+0xf0>)
 800ef14:	460d      	mov	r5, r1
 800ef16:	462a      	mov	r2, r5
 800ef18:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef1c:	5d06      	ldrb	r6, [r0, r4]
 800ef1e:	f016 0608 	ands.w	r6, r6, #8
 800ef22:	d1f8      	bne.n	800ef16 <_strtol_l.constprop.0+0x22>
 800ef24:	2c2d      	cmp	r4, #45	@ 0x2d
 800ef26:	d12d      	bne.n	800ef84 <_strtol_l.constprop.0+0x90>
 800ef28:	782c      	ldrb	r4, [r5, #0]
 800ef2a:	2601      	movs	r6, #1
 800ef2c:	1c95      	adds	r5, r2, #2
 800ef2e:	f033 0210 	bics.w	r2, r3, #16
 800ef32:	d109      	bne.n	800ef48 <_strtol_l.constprop.0+0x54>
 800ef34:	2c30      	cmp	r4, #48	@ 0x30
 800ef36:	d12a      	bne.n	800ef8e <_strtol_l.constprop.0+0x9a>
 800ef38:	782a      	ldrb	r2, [r5, #0]
 800ef3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ef3e:	2a58      	cmp	r2, #88	@ 0x58
 800ef40:	d125      	bne.n	800ef8e <_strtol_l.constprop.0+0x9a>
 800ef42:	786c      	ldrb	r4, [r5, #1]
 800ef44:	2310      	movs	r3, #16
 800ef46:	3502      	adds	r5, #2
 800ef48:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ef4c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ef50:	2200      	movs	r2, #0
 800ef52:	fbbc f9f3 	udiv	r9, ip, r3
 800ef56:	4610      	mov	r0, r2
 800ef58:	fb03 ca19 	mls	sl, r3, r9, ip
 800ef5c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ef60:	2f09      	cmp	r7, #9
 800ef62:	d81b      	bhi.n	800ef9c <_strtol_l.constprop.0+0xa8>
 800ef64:	463c      	mov	r4, r7
 800ef66:	42a3      	cmp	r3, r4
 800ef68:	dd27      	ble.n	800efba <_strtol_l.constprop.0+0xc6>
 800ef6a:	1c57      	adds	r7, r2, #1
 800ef6c:	d007      	beq.n	800ef7e <_strtol_l.constprop.0+0x8a>
 800ef6e:	4581      	cmp	r9, r0
 800ef70:	d320      	bcc.n	800efb4 <_strtol_l.constprop.0+0xc0>
 800ef72:	d101      	bne.n	800ef78 <_strtol_l.constprop.0+0x84>
 800ef74:	45a2      	cmp	sl, r4
 800ef76:	db1d      	blt.n	800efb4 <_strtol_l.constprop.0+0xc0>
 800ef78:	fb00 4003 	mla	r0, r0, r3, r4
 800ef7c:	2201      	movs	r2, #1
 800ef7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef82:	e7eb      	b.n	800ef5c <_strtol_l.constprop.0+0x68>
 800ef84:	2c2b      	cmp	r4, #43	@ 0x2b
 800ef86:	bf04      	itt	eq
 800ef88:	782c      	ldrbeq	r4, [r5, #0]
 800ef8a:	1c95      	addeq	r5, r2, #2
 800ef8c:	e7cf      	b.n	800ef2e <_strtol_l.constprop.0+0x3a>
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d1da      	bne.n	800ef48 <_strtol_l.constprop.0+0x54>
 800ef92:	2c30      	cmp	r4, #48	@ 0x30
 800ef94:	bf0c      	ite	eq
 800ef96:	2308      	moveq	r3, #8
 800ef98:	230a      	movne	r3, #10
 800ef9a:	e7d5      	b.n	800ef48 <_strtol_l.constprop.0+0x54>
 800ef9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800efa0:	2f19      	cmp	r7, #25
 800efa2:	d801      	bhi.n	800efa8 <_strtol_l.constprop.0+0xb4>
 800efa4:	3c37      	subs	r4, #55	@ 0x37
 800efa6:	e7de      	b.n	800ef66 <_strtol_l.constprop.0+0x72>
 800efa8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800efac:	2f19      	cmp	r7, #25
 800efae:	d804      	bhi.n	800efba <_strtol_l.constprop.0+0xc6>
 800efb0:	3c57      	subs	r4, #87	@ 0x57
 800efb2:	e7d8      	b.n	800ef66 <_strtol_l.constprop.0+0x72>
 800efb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800efb8:	e7e1      	b.n	800ef7e <_strtol_l.constprop.0+0x8a>
 800efba:	1c53      	adds	r3, r2, #1
 800efbc:	d108      	bne.n	800efd0 <_strtol_l.constprop.0+0xdc>
 800efbe:	2322      	movs	r3, #34	@ 0x22
 800efc0:	f8ce 3000 	str.w	r3, [lr]
 800efc4:	4660      	mov	r0, ip
 800efc6:	f1b8 0f00 	cmp.w	r8, #0
 800efca:	d0a0      	beq.n	800ef0e <_strtol_l.constprop.0+0x1a>
 800efcc:	1e69      	subs	r1, r5, #1
 800efce:	e006      	b.n	800efde <_strtol_l.constprop.0+0xea>
 800efd0:	b106      	cbz	r6, 800efd4 <_strtol_l.constprop.0+0xe0>
 800efd2:	4240      	negs	r0, r0
 800efd4:	f1b8 0f00 	cmp.w	r8, #0
 800efd8:	d099      	beq.n	800ef0e <_strtol_l.constprop.0+0x1a>
 800efda:	2a00      	cmp	r2, #0
 800efdc:	d1f6      	bne.n	800efcc <_strtol_l.constprop.0+0xd8>
 800efde:	f8c8 1000 	str.w	r1, [r8]
 800efe2:	e794      	b.n	800ef0e <_strtol_l.constprop.0+0x1a>
 800efe4:	0800fe01 	.word	0x0800fe01

0800efe8 <_strtol_r>:
 800efe8:	f7ff bf84 	b.w	800eef4 <_strtol_l.constprop.0>

0800efec <__ascii_wctomb>:
 800efec:	4603      	mov	r3, r0
 800efee:	4608      	mov	r0, r1
 800eff0:	b141      	cbz	r1, 800f004 <__ascii_wctomb+0x18>
 800eff2:	2aff      	cmp	r2, #255	@ 0xff
 800eff4:	d904      	bls.n	800f000 <__ascii_wctomb+0x14>
 800eff6:	228a      	movs	r2, #138	@ 0x8a
 800eff8:	601a      	str	r2, [r3, #0]
 800effa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800effe:	4770      	bx	lr
 800f000:	700a      	strb	r2, [r1, #0]
 800f002:	2001      	movs	r0, #1
 800f004:	4770      	bx	lr

0800f006 <__ssputs_r>:
 800f006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f00a:	688e      	ldr	r6, [r1, #8]
 800f00c:	461f      	mov	r7, r3
 800f00e:	42be      	cmp	r6, r7
 800f010:	680b      	ldr	r3, [r1, #0]
 800f012:	4682      	mov	sl, r0
 800f014:	460c      	mov	r4, r1
 800f016:	4690      	mov	r8, r2
 800f018:	d82d      	bhi.n	800f076 <__ssputs_r+0x70>
 800f01a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f01e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f022:	d026      	beq.n	800f072 <__ssputs_r+0x6c>
 800f024:	6965      	ldr	r5, [r4, #20]
 800f026:	6909      	ldr	r1, [r1, #16]
 800f028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f02c:	eba3 0901 	sub.w	r9, r3, r1
 800f030:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f034:	1c7b      	adds	r3, r7, #1
 800f036:	444b      	add	r3, r9
 800f038:	106d      	asrs	r5, r5, #1
 800f03a:	429d      	cmp	r5, r3
 800f03c:	bf38      	it	cc
 800f03e:	461d      	movcc	r5, r3
 800f040:	0553      	lsls	r3, r2, #21
 800f042:	d527      	bpl.n	800f094 <__ssputs_r+0x8e>
 800f044:	4629      	mov	r1, r5
 800f046:	f7ff fa05 	bl	800e454 <_malloc_r>
 800f04a:	4606      	mov	r6, r0
 800f04c:	b360      	cbz	r0, 800f0a8 <__ssputs_r+0xa2>
 800f04e:	6921      	ldr	r1, [r4, #16]
 800f050:	464a      	mov	r2, r9
 800f052:	f7fd ffe6 	bl	800d022 <memcpy>
 800f056:	89a3      	ldrh	r3, [r4, #12]
 800f058:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f05c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f060:	81a3      	strh	r3, [r4, #12]
 800f062:	6126      	str	r6, [r4, #16]
 800f064:	6165      	str	r5, [r4, #20]
 800f066:	444e      	add	r6, r9
 800f068:	eba5 0509 	sub.w	r5, r5, r9
 800f06c:	6026      	str	r6, [r4, #0]
 800f06e:	60a5      	str	r5, [r4, #8]
 800f070:	463e      	mov	r6, r7
 800f072:	42be      	cmp	r6, r7
 800f074:	d900      	bls.n	800f078 <__ssputs_r+0x72>
 800f076:	463e      	mov	r6, r7
 800f078:	6820      	ldr	r0, [r4, #0]
 800f07a:	4632      	mov	r2, r6
 800f07c:	4641      	mov	r1, r8
 800f07e:	f000 f9c5 	bl	800f40c <memmove>
 800f082:	68a3      	ldr	r3, [r4, #8]
 800f084:	1b9b      	subs	r3, r3, r6
 800f086:	60a3      	str	r3, [r4, #8]
 800f088:	6823      	ldr	r3, [r4, #0]
 800f08a:	4433      	add	r3, r6
 800f08c:	6023      	str	r3, [r4, #0]
 800f08e:	2000      	movs	r0, #0
 800f090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f094:	462a      	mov	r2, r5
 800f096:	f000 fa15 	bl	800f4c4 <_realloc_r>
 800f09a:	4606      	mov	r6, r0
 800f09c:	2800      	cmp	r0, #0
 800f09e:	d1e0      	bne.n	800f062 <__ssputs_r+0x5c>
 800f0a0:	6921      	ldr	r1, [r4, #16]
 800f0a2:	4650      	mov	r0, sl
 800f0a4:	f7fe fe28 	bl	800dcf8 <_free_r>
 800f0a8:	230c      	movs	r3, #12
 800f0aa:	f8ca 3000 	str.w	r3, [sl]
 800f0ae:	89a3      	ldrh	r3, [r4, #12]
 800f0b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f0b4:	81a3      	strh	r3, [r4, #12]
 800f0b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f0ba:	e7e9      	b.n	800f090 <__ssputs_r+0x8a>

0800f0bc <_svfiprintf_r>:
 800f0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c0:	4698      	mov	r8, r3
 800f0c2:	898b      	ldrh	r3, [r1, #12]
 800f0c4:	061b      	lsls	r3, r3, #24
 800f0c6:	b09d      	sub	sp, #116	@ 0x74
 800f0c8:	4607      	mov	r7, r0
 800f0ca:	460d      	mov	r5, r1
 800f0cc:	4614      	mov	r4, r2
 800f0ce:	d510      	bpl.n	800f0f2 <_svfiprintf_r+0x36>
 800f0d0:	690b      	ldr	r3, [r1, #16]
 800f0d2:	b973      	cbnz	r3, 800f0f2 <_svfiprintf_r+0x36>
 800f0d4:	2140      	movs	r1, #64	@ 0x40
 800f0d6:	f7ff f9bd 	bl	800e454 <_malloc_r>
 800f0da:	6028      	str	r0, [r5, #0]
 800f0dc:	6128      	str	r0, [r5, #16]
 800f0de:	b930      	cbnz	r0, 800f0ee <_svfiprintf_r+0x32>
 800f0e0:	230c      	movs	r3, #12
 800f0e2:	603b      	str	r3, [r7, #0]
 800f0e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f0e8:	b01d      	add	sp, #116	@ 0x74
 800f0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ee:	2340      	movs	r3, #64	@ 0x40
 800f0f0:	616b      	str	r3, [r5, #20]
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f0f6:	2320      	movs	r3, #32
 800f0f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f0fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f100:	2330      	movs	r3, #48	@ 0x30
 800f102:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f2a0 <_svfiprintf_r+0x1e4>
 800f106:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f10a:	f04f 0901 	mov.w	r9, #1
 800f10e:	4623      	mov	r3, r4
 800f110:	469a      	mov	sl, r3
 800f112:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f116:	b10a      	cbz	r2, 800f11c <_svfiprintf_r+0x60>
 800f118:	2a25      	cmp	r2, #37	@ 0x25
 800f11a:	d1f9      	bne.n	800f110 <_svfiprintf_r+0x54>
 800f11c:	ebba 0b04 	subs.w	fp, sl, r4
 800f120:	d00b      	beq.n	800f13a <_svfiprintf_r+0x7e>
 800f122:	465b      	mov	r3, fp
 800f124:	4622      	mov	r2, r4
 800f126:	4629      	mov	r1, r5
 800f128:	4638      	mov	r0, r7
 800f12a:	f7ff ff6c 	bl	800f006 <__ssputs_r>
 800f12e:	3001      	adds	r0, #1
 800f130:	f000 80a7 	beq.w	800f282 <_svfiprintf_r+0x1c6>
 800f134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f136:	445a      	add	r2, fp
 800f138:	9209      	str	r2, [sp, #36]	@ 0x24
 800f13a:	f89a 3000 	ldrb.w	r3, [sl]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f000 809f 	beq.w	800f282 <_svfiprintf_r+0x1c6>
 800f144:	2300      	movs	r3, #0
 800f146:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f14a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f14e:	f10a 0a01 	add.w	sl, sl, #1
 800f152:	9304      	str	r3, [sp, #16]
 800f154:	9307      	str	r3, [sp, #28]
 800f156:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f15a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f15c:	4654      	mov	r4, sl
 800f15e:	2205      	movs	r2, #5
 800f160:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f164:	484e      	ldr	r0, [pc, #312]	@ (800f2a0 <_svfiprintf_r+0x1e4>)
 800f166:	f7f1 f83b 	bl	80001e0 <memchr>
 800f16a:	9a04      	ldr	r2, [sp, #16]
 800f16c:	b9d8      	cbnz	r0, 800f1a6 <_svfiprintf_r+0xea>
 800f16e:	06d0      	lsls	r0, r2, #27
 800f170:	bf44      	itt	mi
 800f172:	2320      	movmi	r3, #32
 800f174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f178:	0711      	lsls	r1, r2, #28
 800f17a:	bf44      	itt	mi
 800f17c:	232b      	movmi	r3, #43	@ 0x2b
 800f17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f182:	f89a 3000 	ldrb.w	r3, [sl]
 800f186:	2b2a      	cmp	r3, #42	@ 0x2a
 800f188:	d015      	beq.n	800f1b6 <_svfiprintf_r+0xfa>
 800f18a:	9a07      	ldr	r2, [sp, #28]
 800f18c:	4654      	mov	r4, sl
 800f18e:	2000      	movs	r0, #0
 800f190:	f04f 0c0a 	mov.w	ip, #10
 800f194:	4621      	mov	r1, r4
 800f196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f19a:	3b30      	subs	r3, #48	@ 0x30
 800f19c:	2b09      	cmp	r3, #9
 800f19e:	d94b      	bls.n	800f238 <_svfiprintf_r+0x17c>
 800f1a0:	b1b0      	cbz	r0, 800f1d0 <_svfiprintf_r+0x114>
 800f1a2:	9207      	str	r2, [sp, #28]
 800f1a4:	e014      	b.n	800f1d0 <_svfiprintf_r+0x114>
 800f1a6:	eba0 0308 	sub.w	r3, r0, r8
 800f1aa:	fa09 f303 	lsl.w	r3, r9, r3
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	9304      	str	r3, [sp, #16]
 800f1b2:	46a2      	mov	sl, r4
 800f1b4:	e7d2      	b.n	800f15c <_svfiprintf_r+0xa0>
 800f1b6:	9b03      	ldr	r3, [sp, #12]
 800f1b8:	1d19      	adds	r1, r3, #4
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	9103      	str	r1, [sp, #12]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	bfbb      	ittet	lt
 800f1c2:	425b      	neglt	r3, r3
 800f1c4:	f042 0202 	orrlt.w	r2, r2, #2
 800f1c8:	9307      	strge	r3, [sp, #28]
 800f1ca:	9307      	strlt	r3, [sp, #28]
 800f1cc:	bfb8      	it	lt
 800f1ce:	9204      	strlt	r2, [sp, #16]
 800f1d0:	7823      	ldrb	r3, [r4, #0]
 800f1d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1d4:	d10a      	bne.n	800f1ec <_svfiprintf_r+0x130>
 800f1d6:	7863      	ldrb	r3, [r4, #1]
 800f1d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f1da:	d132      	bne.n	800f242 <_svfiprintf_r+0x186>
 800f1dc:	9b03      	ldr	r3, [sp, #12]
 800f1de:	1d1a      	adds	r2, r3, #4
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	9203      	str	r2, [sp, #12]
 800f1e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f1e8:	3402      	adds	r4, #2
 800f1ea:	9305      	str	r3, [sp, #20]
 800f1ec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f2b0 <_svfiprintf_r+0x1f4>
 800f1f0:	7821      	ldrb	r1, [r4, #0]
 800f1f2:	2203      	movs	r2, #3
 800f1f4:	4650      	mov	r0, sl
 800f1f6:	f7f0 fff3 	bl	80001e0 <memchr>
 800f1fa:	b138      	cbz	r0, 800f20c <_svfiprintf_r+0x150>
 800f1fc:	9b04      	ldr	r3, [sp, #16]
 800f1fe:	eba0 000a 	sub.w	r0, r0, sl
 800f202:	2240      	movs	r2, #64	@ 0x40
 800f204:	4082      	lsls	r2, r0
 800f206:	4313      	orrs	r3, r2
 800f208:	3401      	adds	r4, #1
 800f20a:	9304      	str	r3, [sp, #16]
 800f20c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f210:	4824      	ldr	r0, [pc, #144]	@ (800f2a4 <_svfiprintf_r+0x1e8>)
 800f212:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f216:	2206      	movs	r2, #6
 800f218:	f7f0 ffe2 	bl	80001e0 <memchr>
 800f21c:	2800      	cmp	r0, #0
 800f21e:	d036      	beq.n	800f28e <_svfiprintf_r+0x1d2>
 800f220:	4b21      	ldr	r3, [pc, #132]	@ (800f2a8 <_svfiprintf_r+0x1ec>)
 800f222:	bb1b      	cbnz	r3, 800f26c <_svfiprintf_r+0x1b0>
 800f224:	9b03      	ldr	r3, [sp, #12]
 800f226:	3307      	adds	r3, #7
 800f228:	f023 0307 	bic.w	r3, r3, #7
 800f22c:	3308      	adds	r3, #8
 800f22e:	9303      	str	r3, [sp, #12]
 800f230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f232:	4433      	add	r3, r6
 800f234:	9309      	str	r3, [sp, #36]	@ 0x24
 800f236:	e76a      	b.n	800f10e <_svfiprintf_r+0x52>
 800f238:	fb0c 3202 	mla	r2, ip, r2, r3
 800f23c:	460c      	mov	r4, r1
 800f23e:	2001      	movs	r0, #1
 800f240:	e7a8      	b.n	800f194 <_svfiprintf_r+0xd8>
 800f242:	2300      	movs	r3, #0
 800f244:	3401      	adds	r4, #1
 800f246:	9305      	str	r3, [sp, #20]
 800f248:	4619      	mov	r1, r3
 800f24a:	f04f 0c0a 	mov.w	ip, #10
 800f24e:	4620      	mov	r0, r4
 800f250:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f254:	3a30      	subs	r2, #48	@ 0x30
 800f256:	2a09      	cmp	r2, #9
 800f258:	d903      	bls.n	800f262 <_svfiprintf_r+0x1a6>
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d0c6      	beq.n	800f1ec <_svfiprintf_r+0x130>
 800f25e:	9105      	str	r1, [sp, #20]
 800f260:	e7c4      	b.n	800f1ec <_svfiprintf_r+0x130>
 800f262:	fb0c 2101 	mla	r1, ip, r1, r2
 800f266:	4604      	mov	r4, r0
 800f268:	2301      	movs	r3, #1
 800f26a:	e7f0      	b.n	800f24e <_svfiprintf_r+0x192>
 800f26c:	ab03      	add	r3, sp, #12
 800f26e:	9300      	str	r3, [sp, #0]
 800f270:	462a      	mov	r2, r5
 800f272:	4b0e      	ldr	r3, [pc, #56]	@ (800f2ac <_svfiprintf_r+0x1f0>)
 800f274:	a904      	add	r1, sp, #16
 800f276:	4638      	mov	r0, r7
 800f278:	f7fc ff50 	bl	800c11c <_printf_float>
 800f27c:	1c42      	adds	r2, r0, #1
 800f27e:	4606      	mov	r6, r0
 800f280:	d1d6      	bne.n	800f230 <_svfiprintf_r+0x174>
 800f282:	89ab      	ldrh	r3, [r5, #12]
 800f284:	065b      	lsls	r3, r3, #25
 800f286:	f53f af2d 	bmi.w	800f0e4 <_svfiprintf_r+0x28>
 800f28a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f28c:	e72c      	b.n	800f0e8 <_svfiprintf_r+0x2c>
 800f28e:	ab03      	add	r3, sp, #12
 800f290:	9300      	str	r3, [sp, #0]
 800f292:	462a      	mov	r2, r5
 800f294:	4b05      	ldr	r3, [pc, #20]	@ (800f2ac <_svfiprintf_r+0x1f0>)
 800f296:	a904      	add	r1, sp, #16
 800f298:	4638      	mov	r0, r7
 800f29a:	f7fd f9d7 	bl	800c64c <_printf_i>
 800f29e:	e7ed      	b.n	800f27c <_svfiprintf_r+0x1c0>
 800f2a0:	0800ff01 	.word	0x0800ff01
 800f2a4:	0800ff0b 	.word	0x0800ff0b
 800f2a8:	0800c11d 	.word	0x0800c11d
 800f2ac:	0800f007 	.word	0x0800f007
 800f2b0:	0800ff07 	.word	0x0800ff07

0800f2b4 <__sflush_r>:
 800f2b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2bc:	0716      	lsls	r6, r2, #28
 800f2be:	4605      	mov	r5, r0
 800f2c0:	460c      	mov	r4, r1
 800f2c2:	d454      	bmi.n	800f36e <__sflush_r+0xba>
 800f2c4:	684b      	ldr	r3, [r1, #4]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	dc02      	bgt.n	800f2d0 <__sflush_r+0x1c>
 800f2ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	dd48      	ble.n	800f362 <__sflush_r+0xae>
 800f2d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f2d2:	2e00      	cmp	r6, #0
 800f2d4:	d045      	beq.n	800f362 <__sflush_r+0xae>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f2dc:	682f      	ldr	r7, [r5, #0]
 800f2de:	6a21      	ldr	r1, [r4, #32]
 800f2e0:	602b      	str	r3, [r5, #0]
 800f2e2:	d030      	beq.n	800f346 <__sflush_r+0x92>
 800f2e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f2e6:	89a3      	ldrh	r3, [r4, #12]
 800f2e8:	0759      	lsls	r1, r3, #29
 800f2ea:	d505      	bpl.n	800f2f8 <__sflush_r+0x44>
 800f2ec:	6863      	ldr	r3, [r4, #4]
 800f2ee:	1ad2      	subs	r2, r2, r3
 800f2f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f2f2:	b10b      	cbz	r3, 800f2f8 <__sflush_r+0x44>
 800f2f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f2f6:	1ad2      	subs	r2, r2, r3
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f2fc:	6a21      	ldr	r1, [r4, #32]
 800f2fe:	4628      	mov	r0, r5
 800f300:	47b0      	blx	r6
 800f302:	1c43      	adds	r3, r0, #1
 800f304:	89a3      	ldrh	r3, [r4, #12]
 800f306:	d106      	bne.n	800f316 <__sflush_r+0x62>
 800f308:	6829      	ldr	r1, [r5, #0]
 800f30a:	291d      	cmp	r1, #29
 800f30c:	d82b      	bhi.n	800f366 <__sflush_r+0xb2>
 800f30e:	4a2a      	ldr	r2, [pc, #168]	@ (800f3b8 <__sflush_r+0x104>)
 800f310:	410a      	asrs	r2, r1
 800f312:	07d6      	lsls	r6, r2, #31
 800f314:	d427      	bmi.n	800f366 <__sflush_r+0xb2>
 800f316:	2200      	movs	r2, #0
 800f318:	6062      	str	r2, [r4, #4]
 800f31a:	04d9      	lsls	r1, r3, #19
 800f31c:	6922      	ldr	r2, [r4, #16]
 800f31e:	6022      	str	r2, [r4, #0]
 800f320:	d504      	bpl.n	800f32c <__sflush_r+0x78>
 800f322:	1c42      	adds	r2, r0, #1
 800f324:	d101      	bne.n	800f32a <__sflush_r+0x76>
 800f326:	682b      	ldr	r3, [r5, #0]
 800f328:	b903      	cbnz	r3, 800f32c <__sflush_r+0x78>
 800f32a:	6560      	str	r0, [r4, #84]	@ 0x54
 800f32c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f32e:	602f      	str	r7, [r5, #0]
 800f330:	b1b9      	cbz	r1, 800f362 <__sflush_r+0xae>
 800f332:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f336:	4299      	cmp	r1, r3
 800f338:	d002      	beq.n	800f340 <__sflush_r+0x8c>
 800f33a:	4628      	mov	r0, r5
 800f33c:	f7fe fcdc 	bl	800dcf8 <_free_r>
 800f340:	2300      	movs	r3, #0
 800f342:	6363      	str	r3, [r4, #52]	@ 0x34
 800f344:	e00d      	b.n	800f362 <__sflush_r+0xae>
 800f346:	2301      	movs	r3, #1
 800f348:	4628      	mov	r0, r5
 800f34a:	47b0      	blx	r6
 800f34c:	4602      	mov	r2, r0
 800f34e:	1c50      	adds	r0, r2, #1
 800f350:	d1c9      	bne.n	800f2e6 <__sflush_r+0x32>
 800f352:	682b      	ldr	r3, [r5, #0]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d0c6      	beq.n	800f2e6 <__sflush_r+0x32>
 800f358:	2b1d      	cmp	r3, #29
 800f35a:	d001      	beq.n	800f360 <__sflush_r+0xac>
 800f35c:	2b16      	cmp	r3, #22
 800f35e:	d11e      	bne.n	800f39e <__sflush_r+0xea>
 800f360:	602f      	str	r7, [r5, #0]
 800f362:	2000      	movs	r0, #0
 800f364:	e022      	b.n	800f3ac <__sflush_r+0xf8>
 800f366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f36a:	b21b      	sxth	r3, r3
 800f36c:	e01b      	b.n	800f3a6 <__sflush_r+0xf2>
 800f36e:	690f      	ldr	r7, [r1, #16]
 800f370:	2f00      	cmp	r7, #0
 800f372:	d0f6      	beq.n	800f362 <__sflush_r+0xae>
 800f374:	0793      	lsls	r3, r2, #30
 800f376:	680e      	ldr	r6, [r1, #0]
 800f378:	bf08      	it	eq
 800f37a:	694b      	ldreq	r3, [r1, #20]
 800f37c:	600f      	str	r7, [r1, #0]
 800f37e:	bf18      	it	ne
 800f380:	2300      	movne	r3, #0
 800f382:	eba6 0807 	sub.w	r8, r6, r7
 800f386:	608b      	str	r3, [r1, #8]
 800f388:	f1b8 0f00 	cmp.w	r8, #0
 800f38c:	dde9      	ble.n	800f362 <__sflush_r+0xae>
 800f38e:	6a21      	ldr	r1, [r4, #32]
 800f390:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f392:	4643      	mov	r3, r8
 800f394:	463a      	mov	r2, r7
 800f396:	4628      	mov	r0, r5
 800f398:	47b0      	blx	r6
 800f39a:	2800      	cmp	r0, #0
 800f39c:	dc08      	bgt.n	800f3b0 <__sflush_r+0xfc>
 800f39e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3a6:	81a3      	strh	r3, [r4, #12]
 800f3a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3b0:	4407      	add	r7, r0
 800f3b2:	eba8 0800 	sub.w	r8, r8, r0
 800f3b6:	e7e7      	b.n	800f388 <__sflush_r+0xd4>
 800f3b8:	dfbffffe 	.word	0xdfbffffe

0800f3bc <_fflush_r>:
 800f3bc:	b538      	push	{r3, r4, r5, lr}
 800f3be:	690b      	ldr	r3, [r1, #16]
 800f3c0:	4605      	mov	r5, r0
 800f3c2:	460c      	mov	r4, r1
 800f3c4:	b913      	cbnz	r3, 800f3cc <_fflush_r+0x10>
 800f3c6:	2500      	movs	r5, #0
 800f3c8:	4628      	mov	r0, r5
 800f3ca:	bd38      	pop	{r3, r4, r5, pc}
 800f3cc:	b118      	cbz	r0, 800f3d6 <_fflush_r+0x1a>
 800f3ce:	6a03      	ldr	r3, [r0, #32]
 800f3d0:	b90b      	cbnz	r3, 800f3d6 <_fflush_r+0x1a>
 800f3d2:	f7fd fcfb 	bl	800cdcc <__sinit>
 800f3d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d0f3      	beq.n	800f3c6 <_fflush_r+0xa>
 800f3de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f3e0:	07d0      	lsls	r0, r2, #31
 800f3e2:	d404      	bmi.n	800f3ee <_fflush_r+0x32>
 800f3e4:	0599      	lsls	r1, r3, #22
 800f3e6:	d402      	bmi.n	800f3ee <_fflush_r+0x32>
 800f3e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f3ea:	f7fd fe18 	bl	800d01e <__retarget_lock_acquire_recursive>
 800f3ee:	4628      	mov	r0, r5
 800f3f0:	4621      	mov	r1, r4
 800f3f2:	f7ff ff5f 	bl	800f2b4 <__sflush_r>
 800f3f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f3f8:	07da      	lsls	r2, r3, #31
 800f3fa:	4605      	mov	r5, r0
 800f3fc:	d4e4      	bmi.n	800f3c8 <_fflush_r+0xc>
 800f3fe:	89a3      	ldrh	r3, [r4, #12]
 800f400:	059b      	lsls	r3, r3, #22
 800f402:	d4e1      	bmi.n	800f3c8 <_fflush_r+0xc>
 800f404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f406:	f7fd fe0b 	bl	800d020 <__retarget_lock_release_recursive>
 800f40a:	e7dd      	b.n	800f3c8 <_fflush_r+0xc>

0800f40c <memmove>:
 800f40c:	4288      	cmp	r0, r1
 800f40e:	b510      	push	{r4, lr}
 800f410:	eb01 0402 	add.w	r4, r1, r2
 800f414:	d902      	bls.n	800f41c <memmove+0x10>
 800f416:	4284      	cmp	r4, r0
 800f418:	4623      	mov	r3, r4
 800f41a:	d807      	bhi.n	800f42c <memmove+0x20>
 800f41c:	1e43      	subs	r3, r0, #1
 800f41e:	42a1      	cmp	r1, r4
 800f420:	d008      	beq.n	800f434 <memmove+0x28>
 800f422:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f42a:	e7f8      	b.n	800f41e <memmove+0x12>
 800f42c:	4402      	add	r2, r0
 800f42e:	4601      	mov	r1, r0
 800f430:	428a      	cmp	r2, r1
 800f432:	d100      	bne.n	800f436 <memmove+0x2a>
 800f434:	bd10      	pop	{r4, pc}
 800f436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f43a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f43e:	e7f7      	b.n	800f430 <memmove+0x24>

0800f440 <_sbrk_r>:
 800f440:	b538      	push	{r3, r4, r5, lr}
 800f442:	4d06      	ldr	r5, [pc, #24]	@ (800f45c <_sbrk_r+0x1c>)
 800f444:	2300      	movs	r3, #0
 800f446:	4604      	mov	r4, r0
 800f448:	4608      	mov	r0, r1
 800f44a:	602b      	str	r3, [r5, #0]
 800f44c:	f7f2 fed2 	bl	80021f4 <_sbrk>
 800f450:	1c43      	adds	r3, r0, #1
 800f452:	d102      	bne.n	800f45a <_sbrk_r+0x1a>
 800f454:	682b      	ldr	r3, [r5, #0]
 800f456:	b103      	cbz	r3, 800f45a <_sbrk_r+0x1a>
 800f458:	6023      	str	r3, [r4, #0]
 800f45a:	bd38      	pop	{r3, r4, r5, pc}
 800f45c:	20002428 	.word	0x20002428

0800f460 <__assert_func>:
 800f460:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f462:	4614      	mov	r4, r2
 800f464:	461a      	mov	r2, r3
 800f466:	4b09      	ldr	r3, [pc, #36]	@ (800f48c <__assert_func+0x2c>)
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	4605      	mov	r5, r0
 800f46c:	68d8      	ldr	r0, [r3, #12]
 800f46e:	b954      	cbnz	r4, 800f486 <__assert_func+0x26>
 800f470:	4b07      	ldr	r3, [pc, #28]	@ (800f490 <__assert_func+0x30>)
 800f472:	461c      	mov	r4, r3
 800f474:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f478:	9100      	str	r1, [sp, #0]
 800f47a:	462b      	mov	r3, r5
 800f47c:	4905      	ldr	r1, [pc, #20]	@ (800f494 <__assert_func+0x34>)
 800f47e:	f000 f84f 	bl	800f520 <fiprintf>
 800f482:	f000 f85f 	bl	800f544 <abort>
 800f486:	4b04      	ldr	r3, [pc, #16]	@ (800f498 <__assert_func+0x38>)
 800f488:	e7f4      	b.n	800f474 <__assert_func+0x14>
 800f48a:	bf00      	nop
 800f48c:	2000027c 	.word	0x2000027c
 800f490:	0800ff4d 	.word	0x0800ff4d
 800f494:	0800ff1f 	.word	0x0800ff1f
 800f498:	0800ff12 	.word	0x0800ff12

0800f49c <_calloc_r>:
 800f49c:	b570      	push	{r4, r5, r6, lr}
 800f49e:	fba1 5402 	umull	r5, r4, r1, r2
 800f4a2:	b93c      	cbnz	r4, 800f4b4 <_calloc_r+0x18>
 800f4a4:	4629      	mov	r1, r5
 800f4a6:	f7fe ffd5 	bl	800e454 <_malloc_r>
 800f4aa:	4606      	mov	r6, r0
 800f4ac:	b928      	cbnz	r0, 800f4ba <_calloc_r+0x1e>
 800f4ae:	2600      	movs	r6, #0
 800f4b0:	4630      	mov	r0, r6
 800f4b2:	bd70      	pop	{r4, r5, r6, pc}
 800f4b4:	220c      	movs	r2, #12
 800f4b6:	6002      	str	r2, [r0, #0]
 800f4b8:	e7f9      	b.n	800f4ae <_calloc_r+0x12>
 800f4ba:	462a      	mov	r2, r5
 800f4bc:	4621      	mov	r1, r4
 800f4be:	f7fd fd1e 	bl	800cefe <memset>
 800f4c2:	e7f5      	b.n	800f4b0 <_calloc_r+0x14>

0800f4c4 <_realloc_r>:
 800f4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4c8:	4680      	mov	r8, r0
 800f4ca:	4615      	mov	r5, r2
 800f4cc:	460c      	mov	r4, r1
 800f4ce:	b921      	cbnz	r1, 800f4da <_realloc_r+0x16>
 800f4d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4d4:	4611      	mov	r1, r2
 800f4d6:	f7fe bfbd 	b.w	800e454 <_malloc_r>
 800f4da:	b92a      	cbnz	r2, 800f4e8 <_realloc_r+0x24>
 800f4dc:	f7fe fc0c 	bl	800dcf8 <_free_r>
 800f4e0:	2400      	movs	r4, #0
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4e8:	f000 f833 	bl	800f552 <_malloc_usable_size_r>
 800f4ec:	4285      	cmp	r5, r0
 800f4ee:	4606      	mov	r6, r0
 800f4f0:	d802      	bhi.n	800f4f8 <_realloc_r+0x34>
 800f4f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f4f6:	d8f4      	bhi.n	800f4e2 <_realloc_r+0x1e>
 800f4f8:	4629      	mov	r1, r5
 800f4fa:	4640      	mov	r0, r8
 800f4fc:	f7fe ffaa 	bl	800e454 <_malloc_r>
 800f500:	4607      	mov	r7, r0
 800f502:	2800      	cmp	r0, #0
 800f504:	d0ec      	beq.n	800f4e0 <_realloc_r+0x1c>
 800f506:	42b5      	cmp	r5, r6
 800f508:	462a      	mov	r2, r5
 800f50a:	4621      	mov	r1, r4
 800f50c:	bf28      	it	cs
 800f50e:	4632      	movcs	r2, r6
 800f510:	f7fd fd87 	bl	800d022 <memcpy>
 800f514:	4621      	mov	r1, r4
 800f516:	4640      	mov	r0, r8
 800f518:	f7fe fbee 	bl	800dcf8 <_free_r>
 800f51c:	463c      	mov	r4, r7
 800f51e:	e7e0      	b.n	800f4e2 <_realloc_r+0x1e>

0800f520 <fiprintf>:
 800f520:	b40e      	push	{r1, r2, r3}
 800f522:	b503      	push	{r0, r1, lr}
 800f524:	4601      	mov	r1, r0
 800f526:	ab03      	add	r3, sp, #12
 800f528:	4805      	ldr	r0, [pc, #20]	@ (800f540 <fiprintf+0x20>)
 800f52a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f52e:	6800      	ldr	r0, [r0, #0]
 800f530:	9301      	str	r3, [sp, #4]
 800f532:	f000 f83f 	bl	800f5b4 <_vfiprintf_r>
 800f536:	b002      	add	sp, #8
 800f538:	f85d eb04 	ldr.w	lr, [sp], #4
 800f53c:	b003      	add	sp, #12
 800f53e:	4770      	bx	lr
 800f540:	2000027c 	.word	0x2000027c

0800f544 <abort>:
 800f544:	b508      	push	{r3, lr}
 800f546:	2006      	movs	r0, #6
 800f548:	f000 fa08 	bl	800f95c <raise>
 800f54c:	2001      	movs	r0, #1
 800f54e:	f7f2 fdd9 	bl	8002104 <_exit>

0800f552 <_malloc_usable_size_r>:
 800f552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f556:	1f18      	subs	r0, r3, #4
 800f558:	2b00      	cmp	r3, #0
 800f55a:	bfbc      	itt	lt
 800f55c:	580b      	ldrlt	r3, [r1, r0]
 800f55e:	18c0      	addlt	r0, r0, r3
 800f560:	4770      	bx	lr

0800f562 <__sfputc_r>:
 800f562:	6893      	ldr	r3, [r2, #8]
 800f564:	3b01      	subs	r3, #1
 800f566:	2b00      	cmp	r3, #0
 800f568:	b410      	push	{r4}
 800f56a:	6093      	str	r3, [r2, #8]
 800f56c:	da08      	bge.n	800f580 <__sfputc_r+0x1e>
 800f56e:	6994      	ldr	r4, [r2, #24]
 800f570:	42a3      	cmp	r3, r4
 800f572:	db01      	blt.n	800f578 <__sfputc_r+0x16>
 800f574:	290a      	cmp	r1, #10
 800f576:	d103      	bne.n	800f580 <__sfputc_r+0x1e>
 800f578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f57c:	f000 b932 	b.w	800f7e4 <__swbuf_r>
 800f580:	6813      	ldr	r3, [r2, #0]
 800f582:	1c58      	adds	r0, r3, #1
 800f584:	6010      	str	r0, [r2, #0]
 800f586:	7019      	strb	r1, [r3, #0]
 800f588:	4608      	mov	r0, r1
 800f58a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f58e:	4770      	bx	lr

0800f590 <__sfputs_r>:
 800f590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f592:	4606      	mov	r6, r0
 800f594:	460f      	mov	r7, r1
 800f596:	4614      	mov	r4, r2
 800f598:	18d5      	adds	r5, r2, r3
 800f59a:	42ac      	cmp	r4, r5
 800f59c:	d101      	bne.n	800f5a2 <__sfputs_r+0x12>
 800f59e:	2000      	movs	r0, #0
 800f5a0:	e007      	b.n	800f5b2 <__sfputs_r+0x22>
 800f5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5a6:	463a      	mov	r2, r7
 800f5a8:	4630      	mov	r0, r6
 800f5aa:	f7ff ffda 	bl	800f562 <__sfputc_r>
 800f5ae:	1c43      	adds	r3, r0, #1
 800f5b0:	d1f3      	bne.n	800f59a <__sfputs_r+0xa>
 800f5b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f5b4 <_vfiprintf_r>:
 800f5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5b8:	460d      	mov	r5, r1
 800f5ba:	b09d      	sub	sp, #116	@ 0x74
 800f5bc:	4614      	mov	r4, r2
 800f5be:	4698      	mov	r8, r3
 800f5c0:	4606      	mov	r6, r0
 800f5c2:	b118      	cbz	r0, 800f5cc <_vfiprintf_r+0x18>
 800f5c4:	6a03      	ldr	r3, [r0, #32]
 800f5c6:	b90b      	cbnz	r3, 800f5cc <_vfiprintf_r+0x18>
 800f5c8:	f7fd fc00 	bl	800cdcc <__sinit>
 800f5cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5ce:	07d9      	lsls	r1, r3, #31
 800f5d0:	d405      	bmi.n	800f5de <_vfiprintf_r+0x2a>
 800f5d2:	89ab      	ldrh	r3, [r5, #12]
 800f5d4:	059a      	lsls	r2, r3, #22
 800f5d6:	d402      	bmi.n	800f5de <_vfiprintf_r+0x2a>
 800f5d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5da:	f7fd fd20 	bl	800d01e <__retarget_lock_acquire_recursive>
 800f5de:	89ab      	ldrh	r3, [r5, #12]
 800f5e0:	071b      	lsls	r3, r3, #28
 800f5e2:	d501      	bpl.n	800f5e8 <_vfiprintf_r+0x34>
 800f5e4:	692b      	ldr	r3, [r5, #16]
 800f5e6:	b99b      	cbnz	r3, 800f610 <_vfiprintf_r+0x5c>
 800f5e8:	4629      	mov	r1, r5
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	f000 f938 	bl	800f860 <__swsetup_r>
 800f5f0:	b170      	cbz	r0, 800f610 <_vfiprintf_r+0x5c>
 800f5f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f5f4:	07dc      	lsls	r4, r3, #31
 800f5f6:	d504      	bpl.n	800f602 <_vfiprintf_r+0x4e>
 800f5f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f5fc:	b01d      	add	sp, #116	@ 0x74
 800f5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f602:	89ab      	ldrh	r3, [r5, #12]
 800f604:	0598      	lsls	r0, r3, #22
 800f606:	d4f7      	bmi.n	800f5f8 <_vfiprintf_r+0x44>
 800f608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f60a:	f7fd fd09 	bl	800d020 <__retarget_lock_release_recursive>
 800f60e:	e7f3      	b.n	800f5f8 <_vfiprintf_r+0x44>
 800f610:	2300      	movs	r3, #0
 800f612:	9309      	str	r3, [sp, #36]	@ 0x24
 800f614:	2320      	movs	r3, #32
 800f616:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f61a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f61e:	2330      	movs	r3, #48	@ 0x30
 800f620:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f7d0 <_vfiprintf_r+0x21c>
 800f624:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f628:	f04f 0901 	mov.w	r9, #1
 800f62c:	4623      	mov	r3, r4
 800f62e:	469a      	mov	sl, r3
 800f630:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f634:	b10a      	cbz	r2, 800f63a <_vfiprintf_r+0x86>
 800f636:	2a25      	cmp	r2, #37	@ 0x25
 800f638:	d1f9      	bne.n	800f62e <_vfiprintf_r+0x7a>
 800f63a:	ebba 0b04 	subs.w	fp, sl, r4
 800f63e:	d00b      	beq.n	800f658 <_vfiprintf_r+0xa4>
 800f640:	465b      	mov	r3, fp
 800f642:	4622      	mov	r2, r4
 800f644:	4629      	mov	r1, r5
 800f646:	4630      	mov	r0, r6
 800f648:	f7ff ffa2 	bl	800f590 <__sfputs_r>
 800f64c:	3001      	adds	r0, #1
 800f64e:	f000 80a7 	beq.w	800f7a0 <_vfiprintf_r+0x1ec>
 800f652:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f654:	445a      	add	r2, fp
 800f656:	9209      	str	r2, [sp, #36]	@ 0x24
 800f658:	f89a 3000 	ldrb.w	r3, [sl]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	f000 809f 	beq.w	800f7a0 <_vfiprintf_r+0x1ec>
 800f662:	2300      	movs	r3, #0
 800f664:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f66c:	f10a 0a01 	add.w	sl, sl, #1
 800f670:	9304      	str	r3, [sp, #16]
 800f672:	9307      	str	r3, [sp, #28]
 800f674:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f678:	931a      	str	r3, [sp, #104]	@ 0x68
 800f67a:	4654      	mov	r4, sl
 800f67c:	2205      	movs	r2, #5
 800f67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f682:	4853      	ldr	r0, [pc, #332]	@ (800f7d0 <_vfiprintf_r+0x21c>)
 800f684:	f7f0 fdac 	bl	80001e0 <memchr>
 800f688:	9a04      	ldr	r2, [sp, #16]
 800f68a:	b9d8      	cbnz	r0, 800f6c4 <_vfiprintf_r+0x110>
 800f68c:	06d1      	lsls	r1, r2, #27
 800f68e:	bf44      	itt	mi
 800f690:	2320      	movmi	r3, #32
 800f692:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f696:	0713      	lsls	r3, r2, #28
 800f698:	bf44      	itt	mi
 800f69a:	232b      	movmi	r3, #43	@ 0x2b
 800f69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f6a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6a6:	d015      	beq.n	800f6d4 <_vfiprintf_r+0x120>
 800f6a8:	9a07      	ldr	r2, [sp, #28]
 800f6aa:	4654      	mov	r4, sl
 800f6ac:	2000      	movs	r0, #0
 800f6ae:	f04f 0c0a 	mov.w	ip, #10
 800f6b2:	4621      	mov	r1, r4
 800f6b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6b8:	3b30      	subs	r3, #48	@ 0x30
 800f6ba:	2b09      	cmp	r3, #9
 800f6bc:	d94b      	bls.n	800f756 <_vfiprintf_r+0x1a2>
 800f6be:	b1b0      	cbz	r0, 800f6ee <_vfiprintf_r+0x13a>
 800f6c0:	9207      	str	r2, [sp, #28]
 800f6c2:	e014      	b.n	800f6ee <_vfiprintf_r+0x13a>
 800f6c4:	eba0 0308 	sub.w	r3, r0, r8
 800f6c8:	fa09 f303 	lsl.w	r3, r9, r3
 800f6cc:	4313      	orrs	r3, r2
 800f6ce:	9304      	str	r3, [sp, #16]
 800f6d0:	46a2      	mov	sl, r4
 800f6d2:	e7d2      	b.n	800f67a <_vfiprintf_r+0xc6>
 800f6d4:	9b03      	ldr	r3, [sp, #12]
 800f6d6:	1d19      	adds	r1, r3, #4
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	9103      	str	r1, [sp, #12]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	bfbb      	ittet	lt
 800f6e0:	425b      	neglt	r3, r3
 800f6e2:	f042 0202 	orrlt.w	r2, r2, #2
 800f6e6:	9307      	strge	r3, [sp, #28]
 800f6e8:	9307      	strlt	r3, [sp, #28]
 800f6ea:	bfb8      	it	lt
 800f6ec:	9204      	strlt	r2, [sp, #16]
 800f6ee:	7823      	ldrb	r3, [r4, #0]
 800f6f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f6f2:	d10a      	bne.n	800f70a <_vfiprintf_r+0x156>
 800f6f4:	7863      	ldrb	r3, [r4, #1]
 800f6f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6f8:	d132      	bne.n	800f760 <_vfiprintf_r+0x1ac>
 800f6fa:	9b03      	ldr	r3, [sp, #12]
 800f6fc:	1d1a      	adds	r2, r3, #4
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	9203      	str	r2, [sp, #12]
 800f702:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f706:	3402      	adds	r4, #2
 800f708:	9305      	str	r3, [sp, #20]
 800f70a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f7e0 <_vfiprintf_r+0x22c>
 800f70e:	7821      	ldrb	r1, [r4, #0]
 800f710:	2203      	movs	r2, #3
 800f712:	4650      	mov	r0, sl
 800f714:	f7f0 fd64 	bl	80001e0 <memchr>
 800f718:	b138      	cbz	r0, 800f72a <_vfiprintf_r+0x176>
 800f71a:	9b04      	ldr	r3, [sp, #16]
 800f71c:	eba0 000a 	sub.w	r0, r0, sl
 800f720:	2240      	movs	r2, #64	@ 0x40
 800f722:	4082      	lsls	r2, r0
 800f724:	4313      	orrs	r3, r2
 800f726:	3401      	adds	r4, #1
 800f728:	9304      	str	r3, [sp, #16]
 800f72a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f72e:	4829      	ldr	r0, [pc, #164]	@ (800f7d4 <_vfiprintf_r+0x220>)
 800f730:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f734:	2206      	movs	r2, #6
 800f736:	f7f0 fd53 	bl	80001e0 <memchr>
 800f73a:	2800      	cmp	r0, #0
 800f73c:	d03f      	beq.n	800f7be <_vfiprintf_r+0x20a>
 800f73e:	4b26      	ldr	r3, [pc, #152]	@ (800f7d8 <_vfiprintf_r+0x224>)
 800f740:	bb1b      	cbnz	r3, 800f78a <_vfiprintf_r+0x1d6>
 800f742:	9b03      	ldr	r3, [sp, #12]
 800f744:	3307      	adds	r3, #7
 800f746:	f023 0307 	bic.w	r3, r3, #7
 800f74a:	3308      	adds	r3, #8
 800f74c:	9303      	str	r3, [sp, #12]
 800f74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f750:	443b      	add	r3, r7
 800f752:	9309      	str	r3, [sp, #36]	@ 0x24
 800f754:	e76a      	b.n	800f62c <_vfiprintf_r+0x78>
 800f756:	fb0c 3202 	mla	r2, ip, r2, r3
 800f75a:	460c      	mov	r4, r1
 800f75c:	2001      	movs	r0, #1
 800f75e:	e7a8      	b.n	800f6b2 <_vfiprintf_r+0xfe>
 800f760:	2300      	movs	r3, #0
 800f762:	3401      	adds	r4, #1
 800f764:	9305      	str	r3, [sp, #20]
 800f766:	4619      	mov	r1, r3
 800f768:	f04f 0c0a 	mov.w	ip, #10
 800f76c:	4620      	mov	r0, r4
 800f76e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f772:	3a30      	subs	r2, #48	@ 0x30
 800f774:	2a09      	cmp	r2, #9
 800f776:	d903      	bls.n	800f780 <_vfiprintf_r+0x1cc>
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d0c6      	beq.n	800f70a <_vfiprintf_r+0x156>
 800f77c:	9105      	str	r1, [sp, #20]
 800f77e:	e7c4      	b.n	800f70a <_vfiprintf_r+0x156>
 800f780:	fb0c 2101 	mla	r1, ip, r1, r2
 800f784:	4604      	mov	r4, r0
 800f786:	2301      	movs	r3, #1
 800f788:	e7f0      	b.n	800f76c <_vfiprintf_r+0x1b8>
 800f78a:	ab03      	add	r3, sp, #12
 800f78c:	9300      	str	r3, [sp, #0]
 800f78e:	462a      	mov	r2, r5
 800f790:	4b12      	ldr	r3, [pc, #72]	@ (800f7dc <_vfiprintf_r+0x228>)
 800f792:	a904      	add	r1, sp, #16
 800f794:	4630      	mov	r0, r6
 800f796:	f7fc fcc1 	bl	800c11c <_printf_float>
 800f79a:	4607      	mov	r7, r0
 800f79c:	1c78      	adds	r0, r7, #1
 800f79e:	d1d6      	bne.n	800f74e <_vfiprintf_r+0x19a>
 800f7a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7a2:	07d9      	lsls	r1, r3, #31
 800f7a4:	d405      	bmi.n	800f7b2 <_vfiprintf_r+0x1fe>
 800f7a6:	89ab      	ldrh	r3, [r5, #12]
 800f7a8:	059a      	lsls	r2, r3, #22
 800f7aa:	d402      	bmi.n	800f7b2 <_vfiprintf_r+0x1fe>
 800f7ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7ae:	f7fd fc37 	bl	800d020 <__retarget_lock_release_recursive>
 800f7b2:	89ab      	ldrh	r3, [r5, #12]
 800f7b4:	065b      	lsls	r3, r3, #25
 800f7b6:	f53f af1f 	bmi.w	800f5f8 <_vfiprintf_r+0x44>
 800f7ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7bc:	e71e      	b.n	800f5fc <_vfiprintf_r+0x48>
 800f7be:	ab03      	add	r3, sp, #12
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	462a      	mov	r2, r5
 800f7c4:	4b05      	ldr	r3, [pc, #20]	@ (800f7dc <_vfiprintf_r+0x228>)
 800f7c6:	a904      	add	r1, sp, #16
 800f7c8:	4630      	mov	r0, r6
 800f7ca:	f7fc ff3f 	bl	800c64c <_printf_i>
 800f7ce:	e7e4      	b.n	800f79a <_vfiprintf_r+0x1e6>
 800f7d0:	0800ff01 	.word	0x0800ff01
 800f7d4:	0800ff0b 	.word	0x0800ff0b
 800f7d8:	0800c11d 	.word	0x0800c11d
 800f7dc:	0800f591 	.word	0x0800f591
 800f7e0:	0800ff07 	.word	0x0800ff07

0800f7e4 <__swbuf_r>:
 800f7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7e6:	460e      	mov	r6, r1
 800f7e8:	4614      	mov	r4, r2
 800f7ea:	4605      	mov	r5, r0
 800f7ec:	b118      	cbz	r0, 800f7f6 <__swbuf_r+0x12>
 800f7ee:	6a03      	ldr	r3, [r0, #32]
 800f7f0:	b90b      	cbnz	r3, 800f7f6 <__swbuf_r+0x12>
 800f7f2:	f7fd faeb 	bl	800cdcc <__sinit>
 800f7f6:	69a3      	ldr	r3, [r4, #24]
 800f7f8:	60a3      	str	r3, [r4, #8]
 800f7fa:	89a3      	ldrh	r3, [r4, #12]
 800f7fc:	071a      	lsls	r2, r3, #28
 800f7fe:	d501      	bpl.n	800f804 <__swbuf_r+0x20>
 800f800:	6923      	ldr	r3, [r4, #16]
 800f802:	b943      	cbnz	r3, 800f816 <__swbuf_r+0x32>
 800f804:	4621      	mov	r1, r4
 800f806:	4628      	mov	r0, r5
 800f808:	f000 f82a 	bl	800f860 <__swsetup_r>
 800f80c:	b118      	cbz	r0, 800f816 <__swbuf_r+0x32>
 800f80e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800f812:	4638      	mov	r0, r7
 800f814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f816:	6823      	ldr	r3, [r4, #0]
 800f818:	6922      	ldr	r2, [r4, #16]
 800f81a:	1a98      	subs	r0, r3, r2
 800f81c:	6963      	ldr	r3, [r4, #20]
 800f81e:	b2f6      	uxtb	r6, r6
 800f820:	4283      	cmp	r3, r0
 800f822:	4637      	mov	r7, r6
 800f824:	dc05      	bgt.n	800f832 <__swbuf_r+0x4e>
 800f826:	4621      	mov	r1, r4
 800f828:	4628      	mov	r0, r5
 800f82a:	f7ff fdc7 	bl	800f3bc <_fflush_r>
 800f82e:	2800      	cmp	r0, #0
 800f830:	d1ed      	bne.n	800f80e <__swbuf_r+0x2a>
 800f832:	68a3      	ldr	r3, [r4, #8]
 800f834:	3b01      	subs	r3, #1
 800f836:	60a3      	str	r3, [r4, #8]
 800f838:	6823      	ldr	r3, [r4, #0]
 800f83a:	1c5a      	adds	r2, r3, #1
 800f83c:	6022      	str	r2, [r4, #0]
 800f83e:	701e      	strb	r6, [r3, #0]
 800f840:	6962      	ldr	r2, [r4, #20]
 800f842:	1c43      	adds	r3, r0, #1
 800f844:	429a      	cmp	r2, r3
 800f846:	d004      	beq.n	800f852 <__swbuf_r+0x6e>
 800f848:	89a3      	ldrh	r3, [r4, #12]
 800f84a:	07db      	lsls	r3, r3, #31
 800f84c:	d5e1      	bpl.n	800f812 <__swbuf_r+0x2e>
 800f84e:	2e0a      	cmp	r6, #10
 800f850:	d1df      	bne.n	800f812 <__swbuf_r+0x2e>
 800f852:	4621      	mov	r1, r4
 800f854:	4628      	mov	r0, r5
 800f856:	f7ff fdb1 	bl	800f3bc <_fflush_r>
 800f85a:	2800      	cmp	r0, #0
 800f85c:	d0d9      	beq.n	800f812 <__swbuf_r+0x2e>
 800f85e:	e7d6      	b.n	800f80e <__swbuf_r+0x2a>

0800f860 <__swsetup_r>:
 800f860:	b538      	push	{r3, r4, r5, lr}
 800f862:	4b29      	ldr	r3, [pc, #164]	@ (800f908 <__swsetup_r+0xa8>)
 800f864:	4605      	mov	r5, r0
 800f866:	6818      	ldr	r0, [r3, #0]
 800f868:	460c      	mov	r4, r1
 800f86a:	b118      	cbz	r0, 800f874 <__swsetup_r+0x14>
 800f86c:	6a03      	ldr	r3, [r0, #32]
 800f86e:	b90b      	cbnz	r3, 800f874 <__swsetup_r+0x14>
 800f870:	f7fd faac 	bl	800cdcc <__sinit>
 800f874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f878:	0719      	lsls	r1, r3, #28
 800f87a:	d422      	bmi.n	800f8c2 <__swsetup_r+0x62>
 800f87c:	06da      	lsls	r2, r3, #27
 800f87e:	d407      	bmi.n	800f890 <__swsetup_r+0x30>
 800f880:	2209      	movs	r2, #9
 800f882:	602a      	str	r2, [r5, #0]
 800f884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f888:	81a3      	strh	r3, [r4, #12]
 800f88a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f88e:	e033      	b.n	800f8f8 <__swsetup_r+0x98>
 800f890:	0758      	lsls	r0, r3, #29
 800f892:	d512      	bpl.n	800f8ba <__swsetup_r+0x5a>
 800f894:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f896:	b141      	cbz	r1, 800f8aa <__swsetup_r+0x4a>
 800f898:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f89c:	4299      	cmp	r1, r3
 800f89e:	d002      	beq.n	800f8a6 <__swsetup_r+0x46>
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	f7fe fa29 	bl	800dcf8 <_free_r>
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8aa:	89a3      	ldrh	r3, [r4, #12]
 800f8ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f8b0:	81a3      	strh	r3, [r4, #12]
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	6063      	str	r3, [r4, #4]
 800f8b6:	6923      	ldr	r3, [r4, #16]
 800f8b8:	6023      	str	r3, [r4, #0]
 800f8ba:	89a3      	ldrh	r3, [r4, #12]
 800f8bc:	f043 0308 	orr.w	r3, r3, #8
 800f8c0:	81a3      	strh	r3, [r4, #12]
 800f8c2:	6923      	ldr	r3, [r4, #16]
 800f8c4:	b94b      	cbnz	r3, 800f8da <__swsetup_r+0x7a>
 800f8c6:	89a3      	ldrh	r3, [r4, #12]
 800f8c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f8cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8d0:	d003      	beq.n	800f8da <__swsetup_r+0x7a>
 800f8d2:	4621      	mov	r1, r4
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	f000 f883 	bl	800f9e0 <__smakebuf_r>
 800f8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8de:	f013 0201 	ands.w	r2, r3, #1
 800f8e2:	d00a      	beq.n	800f8fa <__swsetup_r+0x9a>
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	60a2      	str	r2, [r4, #8]
 800f8e8:	6962      	ldr	r2, [r4, #20]
 800f8ea:	4252      	negs	r2, r2
 800f8ec:	61a2      	str	r2, [r4, #24]
 800f8ee:	6922      	ldr	r2, [r4, #16]
 800f8f0:	b942      	cbnz	r2, 800f904 <__swsetup_r+0xa4>
 800f8f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f8f6:	d1c5      	bne.n	800f884 <__swsetup_r+0x24>
 800f8f8:	bd38      	pop	{r3, r4, r5, pc}
 800f8fa:	0799      	lsls	r1, r3, #30
 800f8fc:	bf58      	it	pl
 800f8fe:	6962      	ldrpl	r2, [r4, #20]
 800f900:	60a2      	str	r2, [r4, #8]
 800f902:	e7f4      	b.n	800f8ee <__swsetup_r+0x8e>
 800f904:	2000      	movs	r0, #0
 800f906:	e7f7      	b.n	800f8f8 <__swsetup_r+0x98>
 800f908:	2000027c 	.word	0x2000027c

0800f90c <_raise_r>:
 800f90c:	291f      	cmp	r1, #31
 800f90e:	b538      	push	{r3, r4, r5, lr}
 800f910:	4605      	mov	r5, r0
 800f912:	460c      	mov	r4, r1
 800f914:	d904      	bls.n	800f920 <_raise_r+0x14>
 800f916:	2316      	movs	r3, #22
 800f918:	6003      	str	r3, [r0, #0]
 800f91a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f91e:	bd38      	pop	{r3, r4, r5, pc}
 800f920:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f922:	b112      	cbz	r2, 800f92a <_raise_r+0x1e>
 800f924:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f928:	b94b      	cbnz	r3, 800f93e <_raise_r+0x32>
 800f92a:	4628      	mov	r0, r5
 800f92c:	f000 f830 	bl	800f990 <_getpid_r>
 800f930:	4622      	mov	r2, r4
 800f932:	4601      	mov	r1, r0
 800f934:	4628      	mov	r0, r5
 800f936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f93a:	f000 b817 	b.w	800f96c <_kill_r>
 800f93e:	2b01      	cmp	r3, #1
 800f940:	d00a      	beq.n	800f958 <_raise_r+0x4c>
 800f942:	1c59      	adds	r1, r3, #1
 800f944:	d103      	bne.n	800f94e <_raise_r+0x42>
 800f946:	2316      	movs	r3, #22
 800f948:	6003      	str	r3, [r0, #0]
 800f94a:	2001      	movs	r0, #1
 800f94c:	e7e7      	b.n	800f91e <_raise_r+0x12>
 800f94e:	2100      	movs	r1, #0
 800f950:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f954:	4620      	mov	r0, r4
 800f956:	4798      	blx	r3
 800f958:	2000      	movs	r0, #0
 800f95a:	e7e0      	b.n	800f91e <_raise_r+0x12>

0800f95c <raise>:
 800f95c:	4b02      	ldr	r3, [pc, #8]	@ (800f968 <raise+0xc>)
 800f95e:	4601      	mov	r1, r0
 800f960:	6818      	ldr	r0, [r3, #0]
 800f962:	f7ff bfd3 	b.w	800f90c <_raise_r>
 800f966:	bf00      	nop
 800f968:	2000027c 	.word	0x2000027c

0800f96c <_kill_r>:
 800f96c:	b538      	push	{r3, r4, r5, lr}
 800f96e:	4d07      	ldr	r5, [pc, #28]	@ (800f98c <_kill_r+0x20>)
 800f970:	2300      	movs	r3, #0
 800f972:	4604      	mov	r4, r0
 800f974:	4608      	mov	r0, r1
 800f976:	4611      	mov	r1, r2
 800f978:	602b      	str	r3, [r5, #0]
 800f97a:	f7f2 fbb3 	bl	80020e4 <_kill>
 800f97e:	1c43      	adds	r3, r0, #1
 800f980:	d102      	bne.n	800f988 <_kill_r+0x1c>
 800f982:	682b      	ldr	r3, [r5, #0]
 800f984:	b103      	cbz	r3, 800f988 <_kill_r+0x1c>
 800f986:	6023      	str	r3, [r4, #0]
 800f988:	bd38      	pop	{r3, r4, r5, pc}
 800f98a:	bf00      	nop
 800f98c:	20002428 	.word	0x20002428

0800f990 <_getpid_r>:
 800f990:	f7f2 bba0 	b.w	80020d4 <_getpid>

0800f994 <__swhatbuf_r>:
 800f994:	b570      	push	{r4, r5, r6, lr}
 800f996:	460c      	mov	r4, r1
 800f998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f99c:	2900      	cmp	r1, #0
 800f99e:	b096      	sub	sp, #88	@ 0x58
 800f9a0:	4615      	mov	r5, r2
 800f9a2:	461e      	mov	r6, r3
 800f9a4:	da0d      	bge.n	800f9c2 <__swhatbuf_r+0x2e>
 800f9a6:	89a3      	ldrh	r3, [r4, #12]
 800f9a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f9ac:	f04f 0100 	mov.w	r1, #0
 800f9b0:	bf14      	ite	ne
 800f9b2:	2340      	movne	r3, #64	@ 0x40
 800f9b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f9b8:	2000      	movs	r0, #0
 800f9ba:	6031      	str	r1, [r6, #0]
 800f9bc:	602b      	str	r3, [r5, #0]
 800f9be:	b016      	add	sp, #88	@ 0x58
 800f9c0:	bd70      	pop	{r4, r5, r6, pc}
 800f9c2:	466a      	mov	r2, sp
 800f9c4:	f000 f848 	bl	800fa58 <_fstat_r>
 800f9c8:	2800      	cmp	r0, #0
 800f9ca:	dbec      	blt.n	800f9a6 <__swhatbuf_r+0x12>
 800f9cc:	9901      	ldr	r1, [sp, #4]
 800f9ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f9d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f9d6:	4259      	negs	r1, r3
 800f9d8:	4159      	adcs	r1, r3
 800f9da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f9de:	e7eb      	b.n	800f9b8 <__swhatbuf_r+0x24>

0800f9e0 <__smakebuf_r>:
 800f9e0:	898b      	ldrh	r3, [r1, #12]
 800f9e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f9e4:	079d      	lsls	r5, r3, #30
 800f9e6:	4606      	mov	r6, r0
 800f9e8:	460c      	mov	r4, r1
 800f9ea:	d507      	bpl.n	800f9fc <__smakebuf_r+0x1c>
 800f9ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f9f0:	6023      	str	r3, [r4, #0]
 800f9f2:	6123      	str	r3, [r4, #16]
 800f9f4:	2301      	movs	r3, #1
 800f9f6:	6163      	str	r3, [r4, #20]
 800f9f8:	b003      	add	sp, #12
 800f9fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9fc:	ab01      	add	r3, sp, #4
 800f9fe:	466a      	mov	r2, sp
 800fa00:	f7ff ffc8 	bl	800f994 <__swhatbuf_r>
 800fa04:	9f00      	ldr	r7, [sp, #0]
 800fa06:	4605      	mov	r5, r0
 800fa08:	4639      	mov	r1, r7
 800fa0a:	4630      	mov	r0, r6
 800fa0c:	f7fe fd22 	bl	800e454 <_malloc_r>
 800fa10:	b948      	cbnz	r0, 800fa26 <__smakebuf_r+0x46>
 800fa12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa16:	059a      	lsls	r2, r3, #22
 800fa18:	d4ee      	bmi.n	800f9f8 <__smakebuf_r+0x18>
 800fa1a:	f023 0303 	bic.w	r3, r3, #3
 800fa1e:	f043 0302 	orr.w	r3, r3, #2
 800fa22:	81a3      	strh	r3, [r4, #12]
 800fa24:	e7e2      	b.n	800f9ec <__smakebuf_r+0xc>
 800fa26:	89a3      	ldrh	r3, [r4, #12]
 800fa28:	6020      	str	r0, [r4, #0]
 800fa2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa2e:	81a3      	strh	r3, [r4, #12]
 800fa30:	9b01      	ldr	r3, [sp, #4]
 800fa32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fa36:	b15b      	cbz	r3, 800fa50 <__smakebuf_r+0x70>
 800fa38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	f000 f81d 	bl	800fa7c <_isatty_r>
 800fa42:	b128      	cbz	r0, 800fa50 <__smakebuf_r+0x70>
 800fa44:	89a3      	ldrh	r3, [r4, #12]
 800fa46:	f023 0303 	bic.w	r3, r3, #3
 800fa4a:	f043 0301 	orr.w	r3, r3, #1
 800fa4e:	81a3      	strh	r3, [r4, #12]
 800fa50:	89a3      	ldrh	r3, [r4, #12]
 800fa52:	431d      	orrs	r5, r3
 800fa54:	81a5      	strh	r5, [r4, #12]
 800fa56:	e7cf      	b.n	800f9f8 <__smakebuf_r+0x18>

0800fa58 <_fstat_r>:
 800fa58:	b538      	push	{r3, r4, r5, lr}
 800fa5a:	4d07      	ldr	r5, [pc, #28]	@ (800fa78 <_fstat_r+0x20>)
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	4604      	mov	r4, r0
 800fa60:	4608      	mov	r0, r1
 800fa62:	4611      	mov	r1, r2
 800fa64:	602b      	str	r3, [r5, #0]
 800fa66:	f7f2 fb9d 	bl	80021a4 <_fstat>
 800fa6a:	1c43      	adds	r3, r0, #1
 800fa6c:	d102      	bne.n	800fa74 <_fstat_r+0x1c>
 800fa6e:	682b      	ldr	r3, [r5, #0]
 800fa70:	b103      	cbz	r3, 800fa74 <_fstat_r+0x1c>
 800fa72:	6023      	str	r3, [r4, #0]
 800fa74:	bd38      	pop	{r3, r4, r5, pc}
 800fa76:	bf00      	nop
 800fa78:	20002428 	.word	0x20002428

0800fa7c <_isatty_r>:
 800fa7c:	b538      	push	{r3, r4, r5, lr}
 800fa7e:	4d06      	ldr	r5, [pc, #24]	@ (800fa98 <_isatty_r+0x1c>)
 800fa80:	2300      	movs	r3, #0
 800fa82:	4604      	mov	r4, r0
 800fa84:	4608      	mov	r0, r1
 800fa86:	602b      	str	r3, [r5, #0]
 800fa88:	f7f2 fb9c 	bl	80021c4 <_isatty>
 800fa8c:	1c43      	adds	r3, r0, #1
 800fa8e:	d102      	bne.n	800fa96 <_isatty_r+0x1a>
 800fa90:	682b      	ldr	r3, [r5, #0]
 800fa92:	b103      	cbz	r3, 800fa96 <_isatty_r+0x1a>
 800fa94:	6023      	str	r3, [r4, #0]
 800fa96:	bd38      	pop	{r3, r4, r5, pc}
 800fa98:	20002428 	.word	0x20002428

0800fa9c <_init>:
 800fa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa9e:	bf00      	nop
 800faa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faa2:	bc08      	pop	{r3}
 800faa4:	469e      	mov	lr, r3
 800faa6:	4770      	bx	lr

0800faa8 <_fini>:
 800faa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faaa:	bf00      	nop
 800faac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faae:	bc08      	pop	{r3}
 800fab0:	469e      	mov	lr, r3
 800fab2:	4770      	bx	lr
